<opus_project>
  <xml_version>2.0</xml_version>
  <general>
    <project_name type="string" hidden="True">mag_zone_base</project_name>
    <description type="string">MAG Zone Base Project</description>
    <parent type="file">urbansim_zone/configs/urbansim_zone.xml</parent>
    <expression_library type="dictionary">
      <variable use="both" source="expression" name="household.avg_edu_adults" type="variable_definition">safe_array_divide((household.aggregate((person.age&gt;17)*(person.education))),(household.aggregate(person.age&gt;17)))</variable>
      <variable use="both" source="expression" name="household.married_family" type="variable_definition">(household.aggregate(person.marriage_status == 1))&gt;1</variable>
      <variable use="both" source="primary attribute" name="household.lag_income" type="variable_definition">household.income</variable>
      <variable use="both" source="primary attribute" name="household.age_of_head" type="variable_definition">household.aggregate(person.age * person.head_of_hh)</variable>
      <variable use="both" source="primary attribute" name="household.hh_lag_income" type="variable_definition">household.lag_income</variable>
      <variable use="both" source="expression" name="household.hh_oldhead" type="variable_definition">household.age_of_head &gt; 64</variable>
      <variable use="both" source="primary attribute" name="household.hh_persons" type="variable_definition">household.persons</variable>
      <variable use="both" source="primary attribute" name="household.hh_workers" type="variable_definition">mag_zone.household.workers</variable>
      <variable use="both" source="expression" name="household.workeligible_id" type="variable_definition"> 1*((household.aggregate(person.age&gt;15))==1)+2*((household.aggregate(person.age&gt;15))==2)+3*((household.aggregate(person.age&gt;15))&gt;=3)</variable>
      <variable use="both" source="expression" name="household.avg_edu_workeligible" type="variable_definition">safe_array_divide((household.aggregate((person.age&gt;15)*(person.education))),(household.aggregate(person.age&gt;15)))</variable>
      <variable use="both" source="expression" name="household.avg_age_workeligible" type="variable_definition">safe_array_divide((household.aggregate((person.age&gt;15)*(person.age))),(household.aggregate(person.age&gt;15)))</variable>
      <variable use="both" source="expression" name="household.workeligible" type="variable_definition">household.aggregate(person.age&gt;15)</variable>
      <variable use="both" source="expression" name="household.enrollment_of_head" type="variable_definition">household.aggregate( (person.student_status &gt; 1) * (person.head_of_hh ==1) )</variable>
      <variable use="both" source="expression" name="household.oldhead" type="variable_definition">household.age_of_head &gt; 64</variable>
      <variable use="both" source="primary attribute" name="household.persons" type="variable_definition">household.persons</variable>
      <variable use="both" source="primary attribute" name="household.children" type="variable_definition">household.children</variable>
      <variable use="both" source="primary attribute" name="household.workers" type="variable_definition">household.workers</variable>
      <variable use="both" source="expression" name="household.avgage_workeligible_u24" type="variable_definition">(safe_array_divide((household.aggregate((person.age&gt;15)*(person.age))),(household.aggregate(person.age&gt;15))))&lt;24</variable>
      <variable use="both" source="expression" name="household.one_eligible_worker" type="variable_definition">(household.aggregate(person.age&gt;15))==1</variable>
      <variable use="both" source="expression" name="household.two_eligible_workers" type="variable_definition">(household.aggregate(person.age&gt;15))==2</variable>
      <variable use="both" source="expression" name="household.threeplus_eligible_workers" type="variable_definition">(household.aggregate(person.age&gt;15))&gt;=3</variable>
      <variable use="both" source="expression" name="household.inc0" type="variable_definition">(household.income &lt; 15039)</variable>
      <variable use="both" source="expression" name="household.inc1" type="variable_definition">(household.income &gt;= 15039)*(household.income &lt; 25607)</variable>
      <variable use="both" source="expression" name="household.inc2" type="variable_definition">(household.income &gt;= 25607)*(household.income &lt; 36411)</variable>
      <variable use="both" source="expression" name="household.inc3" type="variable_definition">(household.income &gt;= 36411)*(household.income &lt; 48132)</variable>
      <variable use="both" source="expression" name="household.inc4" type="variable_definition">(household.income &gt;= 48132)*(household.income &lt; 61612)</variable>
      <variable use="both" source="expression" name="household.inc5" type="variable_definition">(household.income &gt;= 61612)*(household.income &lt; 77060)</variable>
      <variable use="both" source="expression" name="household.inc6" type="variable_definition">(household.income &gt;= 77060)*(household.income &lt; 96034)</variable>
      <variable use="both" source="expression" name="household.inc7" type="variable_definition">(household.income &gt;= 96034)*(household.income &lt; 122521)</variable>
      <variable use="both" source="expression" name="household.inc8" type="variable_definition">(household.income &gt;= 122521)*(household.income &lt; 170272)</variable>
      <variable use="both" source="expression" name="household.inc9" type="variable_definition">(household.income &gt;= 170272)</variable>
      <variable use="both" source="expression" name="household.slope0" type="variable_definition">(household.income &lt; 15039)*(household.income)</variable>
      <variable use="both" source="expression" name="household.slope1" type="variable_definition">(household.income &gt;= 15039)*(household.income &lt; 25607)*(household.income - 15039)</variable>
      <variable use="both" source="expression" name="household.slope2" type="variable_definition">(household.income &gt;= 25607)*(household.income &lt; 36411)*(household.income - 25607)</variable>
      <variable use="both" source="expression" name="household.slope3" type="variable_definition">(household.income &gt;= 36411)*(household.income &lt; 48132)*(household.income - 36411)</variable>
      <variable use="both" source="expression" name="household.slope4" type="variable_definition">(household.income &gt;= 48132)*(household.income &lt; 61612)*(household.income - 48132)</variable>
      <variable use="both" source="expression" name="household.slope5" type="variable_definition">(household.income &gt;= 61612)*(household.income &lt; 77060)*(household.income - 61612)</variable>
      <variable use="both" source="expression" name="household.slope6" type="variable_definition">(household.income &gt;= 77060)*(household.income &lt; 96034)*(household.income - 77060)</variable>
      <variable use="both" source="expression" name="household.slope7" type="variable_definition">(household.income &gt;= 96034)*(household.income &lt; 122521)*(household.income - 96034)</variable>
      <variable use="both" source="expression" name="household.slope8" type="variable_definition">(household.income &gt;= 122521)*(household.income &lt; 170272)*(household.income - 122521)</variable>
      <variable use="both" source="expression" name="household.slope9" type="variable_definition">(household.income &gt;= 170272)*(household.income - 170272)</variable>
      <variable use="both" source="Python class" name="building.occupied_rmf_units_col" type="variable_definition">mag_zone.building.occupied_rmf_units_col</variable>
      <variable use="both" source="Python class" name="building.occupied_rsf_units_col" type="variable_definition">mag_zone.building.occupied_rsf_units_col</variable>
      <variable use="both" source="Python class" name="building.total_rmf_units_col" type="variable_definition">mag_zone.building.total_rmf_units_col</variable>
      <variable use="both" source="Python class" name="building.total_rsf_units_col" type="variable_definition">mag_zone.building.total_rsf_units_col</variable>
      <variable use="both" source="Python class" name="building.occupied_retl_units_col" type="variable_definition">mag_zone.building.occupied_retl_units_col</variable>
      <variable use="both" source="Python class" name="building.occupied_ind_units_col" type="variable_definition">mag_zone.building.occupied_ind_units_col</variable>
      <variable use="both" source="Python class" name="building.occupied_off_units_col" type="variable_definition">mag_zone.building.occupied_off_units_col</variable>
      <variable use="both" source="Python class" name="building.total_retl_units_col" type="variable_definition">mag_zone.building.total_retl_units_col</variable>
      <variable use="both" source="Python class" name="building.total_ind_units_col" type="variable_definition">mag_zone.building.total_ind_units_col</variable>
      <variable use="both" source="Python class" name="building.total_off_units_col" type="variable_definition">mag_zone.building.total_off_units_col</variable>
      <variable use="both" source="Python class" name="building.total_hot_units_col" type="variable_definition">mag_zone.building.total_hot_units_col</variable>
      <variable use="both" source="expression" name="building.num_jobs_in_building" type="variable_definition">building.number_of_agents(job)</variable>
      <variable use="both" source="Python class" name="building.is_building_type_hot" type="variable_definition">urbansim_zone.building.is_building_type_hot</variable>
      <variable use="both" source="Python class" name="building.occupied_hot_units_col" type="variable_definition">mag_zone.building.occupied_hot_units_col</variable>
      <variable use="both" source="expression" name="building.mpa_id" type="variable_definition">building.disaggregate(zone.mpa_id)</variable>
      <variable use="both" source="expression" name="building.dev_prj_test" type="variable_definition">building.disaggregate(development_project.non_residential_sqft)</variable>
      <variable use="both" source="primary attribute" name="building.bldg_nonres_sqft" type="variable_definition">building.non_residential_sqft</variable>
      <variable use="both" source="expression" name="building.nonres_sqft_lag" type="variable_definition">building.non_residential_sqft - building.non_residential_sqft_lag1</variable>
      <variable use="both" source="expression" name="building.nonres_sqft_test" type="variable_definition">building.disaggregate(development_project.non_residential_sqft)</variable>
      <variable use="both" source="expression" name="building.zonal_is_in_SC" type="variable_definition">building.disaggregate(zone.disaggregate(mpa.mpa_id == 4))</variable>
      <variable use="both" source="expression" name="building.zonal_avg_hh_income_1" type="variable_definition">(building.disaggregate(safe_array_divide(zone.aggregate(household.income,intermediates=[building]),zone.number_of_agents(household))))</variable>
      <variable use="both" source="expression" name="building.zonal_avg_res_sqft_per_person" type="variable_definition">building.disaggregate(zone.aggregate(safe_array_divide(building.sqft_per_unit,building.aggregate(household.persons))+0, function=mean))</variable>
      <variable use="both" source="expression" name="building.zonal_num_jobs_20" type="variable_definition">ln(building.disaggregate(zone.aggregate(job.sector_id == 20)))</variable>
      <variable use="both" source="expression" name="building.zonal_is_value_high" type="variable_definition">building.disaggregate(zone.value_indicator) == 2</variable>
      <variable use="both" source="expression" name="building.zonal_hotel_job_space_to_vac_ratio" type="variable_definition">ln(building.disaggregate(safe_array_divide(zone.aggregate(where(building.building_type_id == 11,urbansim_zone.building.total_job_spaces, 0)),zone.aggregate(where(building.building_type_id == 11,urbansim_zone.building.vacant_job_spaces,0)))))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_medial_unit_price" type="variable_definition">ln(where(building.building_type_id==7,building.average_value_per_unit,0))</variable>
      <variable use="both" source="expression" name="building.zonal_public_job_space_to_vac_ratio" type="variable_definition">ln(building.disaggregate(safe_array_divide(zone.aggregate(where(building.building_type_id == 6,urbansim_zone.building.total_job_spaces, 0)),zone.aggregate(where(building.building_type_id == 6,urbansim_zone.building.vacant_job_spaces,0)))))</variable>
      <variable use="both" source="expression" name="building.zonal_sector_18_fraction" type="variable_definition">ln(building.disaggregate(safe_array_divide((zone.aggregate(job.sector_id == 18)),zone.number_of_agents(job))))</variable>
      <variable use="both" source="expression" name="building.zonal_sector_14_fraction" type="variable_definition">ln(building.disaggregate(safe_array_divide((zone.aggregate(job.sector_id == 14)),zone.number_of_agents(job))))</variable>
      <variable use="both" source="expression" name="building.zonal_sector_10_fraction" type="variable_definition">ln(building.disaggregate(safe_array_divide((zone.aggregate(job.sector_id == 10)),zone.number_of_agents(job))))</variable>
      <variable use="both" source="expression" name="building.zonal_sector_6_fraction" type="variable_definition">ln(building.disaggregate(safe_array_divide((zone.aggregate(job.sector_id == 6)),zone.number_of_agents(job))))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_agriculture_unit_price" type="variable_definition">ln(where(building.building_type_id==12,building.average_value_per_unit,0))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_is_hotel" type="variable_definition">building.building_type_id == 11</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_is_education" type="variable_definition">building.building_type_id == 9</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_is_industrial" type="variable_definition">building.building_type_id == 4</variable>
      <variable use="both" source="expression" name="household_x_building.zonal_bldg_ln_price_hhld_income_ratio" type="variable_definition">ln(safe_array_divide(building.average_value_per_unit, household.income))</variable>
      <variable use="both" source="expression" name="building.zonal_vac_office_job_spaces_per_acre" type="variable_definition">ln(building.disaggregate(zone.aggregate(where(building.building_type_id == 5,urbansim_zone.building.vacant_job_spaces,0))/zone.acres))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_office_unit_price" type="variable_definition">ln(where(building.building_type_id==5,building.average_value_per_unit,0))</variable>
      <variable use="both" source="expression" name="building.zonal_industrial_job_space_to_vac_ratio" type="variable_definition">ln(building.disaggregate(safe_array_divide(zone.aggregate(where(building.building_type_id == 4,urbansim_zone.building.total_job_spaces, 0)),zone.aggregate(where(building.building_type_id == 4,urbansim_zone.building.vacant_job_spaces,0)))))</variable>
      <variable use="both" source="expression" name="building.zonal_num_industrial_jobs_per_acre" type="variable_definition">ln(building.disaggregate((zone.aggregate(job.sector_id == 8)+ zone.aggregate(job.sector_id == 6) + zone.aggregate(job.sector_id == 5))/zone.acres))</variable>
      <variable use="both" source="expression" name="building.zonal_num_retail_jobs_per_acre" type="variable_definition">ln(building.disaggregate(zone.aggregate(job.sector_id == 7)/zone.acres))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_developable_retaill_sqft_capacity" type="variable_definition">ln(where(building.building_type_id == 3,urbansim_zone.building.developable_non_residential_sqft_capacity,0))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_sf_units" type="variable_definition">ln(where(building.building_type_id==1,building.residential_units,0))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_avg_year_built" type="variable_definition">ln(building.year_built)</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_land_per_unit" type="variable_definition">ln_bounded(safe_array_divide(building.residential_units, building.land_area))</variable>
      <variable use="both" source="expression" name="building.zonal_network_length_localrd" type="variable_definition">ln(building.disaggregate(zone.network_length_localrd))</variable>
      <variable use="both" source="expression" name="building.zonal_num_jobs_6" type="variable_definition">ln(building.disaggregate(zone.aggregate(job.sector_id == 6)))</variable>
      <variable use="both" source="expression" name="building.zonal_num_jobs_19" type="variable_definition">ln(building.disaggregate(zone.aggregate(job.sector_id == 19)))</variable>
      <variable use="both" source="expression" name="building.zonal_num_jobs_15" type="variable_definition">ln(building.disaggregate(zone.aggregate(job.sector_id == 15)))</variable>
      <variable use="both" source="expression" name="building.zonal_num_jobs_11" type="variable_definition">ln(building.disaggregate(zone.aggregate(job.sector_id == 11)))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_res_units" type="variable_definition">ln(urbansim_zone.building.residential_units)</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_num_jobs_6" type="variable_definition">ln(building.aggregate(job.sector_id==6))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_num_jobs_19" type="variable_definition">ln(building.aggregate(job.sector_id==19))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_num_jobs_15" type="variable_definition">ln(building.aggregate(job.sector_id==15))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_num_jobs_11" type="variable_definition">ln(building.aggregate(job.sector_id==11))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_num_hh" type="variable_definition">ln(urbansim_zone.building.number_of_households)</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_developable_non_residential_sqft_capacity" type="variable_definition">ln(urbansim_zone.building.developable_non_residential_sqft_capacity)</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_vacant_job_spaces" type="variable_definition">ln(urbansim_zone.building.vacant_job_spaces)</variable>
      <variable use="both" source="expression" name="building.zonal_res_to_vac_ratio" type="variable_definition">ln(building.disaggregate(safe_array_divide(zone.aggregate(building.residential_units),zone.aggregate(urbansim_zone.building.vacant_residential_units))))</variable>
      <variable use="both" source="expression" name="building.zonal_num_jobs_per_acre" type="variable_definition">ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))</variable>
      <variable use="both" source="expression" name="building.zonal_emp_pk_sov_access" type="variable_definition">ln(building.disaggregate(zone.emp_pk_sov_access))</variable>
      <variable use="both" source="expression" name="building.zonal_num_jobs_7" type="variable_definition">ln(building.disaggregate(zone.aggregate(job.sector_id == 7)))</variable>
      <variable use="both" source="expression" name="building.zonal_phoenix_cbd_distance" type="variable_definition">ln(building.disaggregate(zone.dist_to_phx_cbd))</variable>
      <variable use="both" source="primary attribute" name="building.building_type_id" type="variable_definition">building.building_type_id</variable>
      <variable use="both" source="expression" name="building.xxx" type="variable_definition">building.building_id &gt;0</variable>
      <variable use="both" source="primary attribute" name="building.bldg_zone_id" type="variable_definition">building.zone_id</variable>
      <variable use="both" source="expression" name="building.num_hh_in_building" type="variable_definition">building.number_of_agents(household)</variable>
      <variable use="both" source="expression" name="building.building_emp_pk_hov_access" type="variable_definition">building.disaggregate(zone.emp_pk_hov_access)</variable>
      <variable use="both" source="expression" name="building.building_freeway_within_qtr_mile" type="variable_definition">building.disaggregate(zone.freeway_within_qtr_mile)</variable>
      <variable use="both" source="primary attribute" name="building.building_year_built" type="variable_definition">building.year_built</variable>
      <variable use="both" source="expression" name="building.HLCM_ln_residential_units" type="variable_definition">ln_bounded(building.residential_units)</variable>
      <variable use="both" source="expression" name="building.HLCM_lnresunits" type="variable_definition">ln(building.residential_units)</variable>
      <variable use="both" source="expression" name="building.HLCM_lnbldgsqftperunit" type="variable_definition">ln(building.sqft_per_unit)</variable>
      <variable use="both" source="expression" name="building.NHB_ELCM_lnpopden" type="variable_definition">ln(building.disaggregate(urbansim_zone.zone.population))</variable>
      <variable use="both" source="expression" name="building.NHB_ELCM_lnavgvalperunit" type="variable_definition">ln(building.average_value_per_unit)</variable>
      <variable use="both" source="expression" name="building.NHB_ELCM_lnavgincome" type="variable_definition">ln(building.aggregate(household.income, function=mean))</variable>
      <variable use="both" source="expression" name="building.NHB_ELCM_is_office" type="variable_definition">building.building_type_id==5</variable>
      <variable use="both" source="expression" name="building.NHB_ELCM_is_industrial" type="variable_definition">building.building_type_id==4</variable>
      <variable use="both" source="expression" name="building.NHB_ELCM_lnnonressqft" type="variable_definition">ln(building.non_residential_sqft)</variable>
      <variable use="both" source="expression" name="building.NHB_ELCM_lnempden" type="variable_definition">ln(building.disaggregate(urbansim_zone.zone.number_of_jobs))</variable>
      <variable use="both" source="expression" name="building.num_hh_in_zone" type="variable_definition">building.disaggregate(zone.number_of_agents(household))</variable>
      <variable use="both" source="expression" name="building.num_jobs_in_zone" type="variable_definition">building.disaggregate(zone.number_of_agents(job))</variable>
      <variable use="both" source="expression" name="building.ln_average_value_per_unit" type="variable_definition">ln(building.average_value_per_unit)</variable>
      <variable use="both" source="expression" name="building.phoenix_cbd_distance" type="variable_definition">building.disaggregate(zone.dist_to_phx_cbd)</variable>
      <variable use="both" source="expression" name="building.zonal_is_in_SC" type="variable_definition">building.disaggregate(zone.disaggregate(mpa.mpa_id == 4))</variable>
      <variable use="both" source="expression" name="building.zonal_is_in_PA" type="variable_definition">building.disaggregate(zone.disaggregate(mpa.mpa_id == 5))</variable>
      <variable use="both" source="expression" name="building.zonal_sector_20_fraction" type="variable_definition">ln(building.disaggregate(safe_array_divide((zone.aggregate(job.sector_id == 20)),zone.number_of_agents(job))))</variable>
      <variable use="both" source="expression" name="building.zonal_num_jobs_20" type="variable_definition">ln(building.disaggregate(zone.aggregate(job.sector_id == 20)))</variable>
      <variable use="both" source="Python class" name="household.hhld_income_category" type="variable_definition">urbansim.household.income_category</variable>
      <variable use="both" source="expression" name="building.zonal_avg_hh_income_1" type="variable_definition">(building.disaggregate(zone.aggregate(household.income, intermediates=[building],function = mean)))</variable>
      <variable use="both" source="expression" name="building.zonal_is_value_low" type="variable_definition">building.disaggregate(zone.value_indicator) == 1</variable>
      <variable use="both" source="expression" name="building.zonal_is_value_high" type="variable_definition">building.disaggregate(zone.value_indicator) == 2</variable>
      <variable use="both" source="expression" name="building.network_length_majorrd_zone" type="variable_definition">(building.disaggregate(zone.network_length_majorrd))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_civic_unit_price" type="variable_definition">ln(where(building.building_type_id==8,building.average_value_per_unit,0))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_hotel_unit_price" type="variable_definition">ln(where(building.building_type_id==11,building.average_value_per_unit,0))</variable>
      <variable use="both" source="expression" name="building.zonal_hotel_job_space_to_vac_ratio" type="variable_definition">ln(building.disaggregate(safe_array_divide(zone.aggregate(where(building.building_type_id == 11,urbansim_zone.building.total_job_spaces, 0)),zone.aggregate(where(building.building_type_id == 11,urbansim_zone.building.vacant_job_spaces,0)))))</variable>
      <variable use="both" source="expression" name="building.zonal_civic_job_space_to_vac_ratio" type="variable_definition">ln(building.disaggregate(safe_array_divide(zone.aggregate(where(building.building_type_id == 8,urbansim_zone.building.total_job_spaces, 0)),zone.aggregate(where(building.building_type_id == 8,urbansim_zone.building.vacant_job_spaces,0)))))</variable>
      <variable use="both" source="expression" name="building.zonal_num_children_per_acre" type="variable_definition">ln(building.disaggregate(safe_array_divide(zone.aggregate(household.children), zone.acres)))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_educational_unit_price" type="variable_definition">ln(where(building.building_type_id==9,building.average_value_per_unit,0))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_medial_unit_price" type="variable_definition">ln(where(building.building_type_id==7,building.average_value_per_unit,0))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_public_unit_price" type="variable_definition">ln(where(building.building_type_id==6,building.average_value_per_unit,0))</variable>
      <variable use="both" source="expression" name="building.zonal_medical_job_space_to_vac_ratio" type="variable_definition">ln(building.disaggregate(safe_array_divide(zone.aggregate(where(building.building_type_id == 7,urbansim_zone.building.total_job_spaces, 0)),zone.aggregate(where(building.building_type_id == 7,urbansim_zone.building.vacant_job_spaces,0)))))</variable>
      <variable use="both" source="expression" name="building.zonal_educational_job_space_to_vac_ratio" type="variable_definition">ln(building.disaggregate(safe_array_divide(zone.aggregate(where(building.building_type_id == 9,urbansim_zone.building.total_job_spaces, 0)),zone.aggregate(where(building.building_type_id == 9,urbansim_zone.building.vacant_job_spaces,0)))))</variable>
      <variable use="both" source="expression" name="building.zonal_public_job_space_to_vac_ratio" type="variable_definition">ln(building.disaggregate(safe_array_divide(zone.aggregate(where(building.building_type_id == 6,urbansim_zone.building.total_job_spaces, 0)),zone.aggregate(where(building.building_type_id == 6,urbansim_zone.building.vacant_job_spaces,0)))))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_transportation_unit_price" type="variable_definition">ln(where(building.building_type_id==13,building.average_value_per_unit,0))</variable>
      <variable use="both" source="expression" name="building.zonal_transportation_job_space_to_vac_ratio" type="variable_definition">ln(building.disaggregate(safe_array_divide(zone.aggregate(where(building.building_type_id == 13,urbansim_zone.building.total_job_spaces, 0)),zone.aggregate(where(building.building_type_id == 13,urbansim_zone.building.vacant_job_spaces,0)))))</variable>
      <variable use="both" source="expression" name="building.zonal_sector_19_fraction" type="variable_definition">ln(building.disaggregate(safe_array_divide((zone.aggregate(job.sector_id == 19)),zone.number_of_agents(job))))</variable>
      <variable use="both" source="expression" name="building.zonal_sector_18_fraction" type="variable_definition">ln(building.disaggregate(safe_array_divide((zone.aggregate(job.sector_id == 18)),zone.number_of_agents(job))))</variable>
      <variable use="both" source="expression" name="building.zonal_sector_17_fraction" type="variable_definition">ln(building.disaggregate(safe_array_divide((zone.aggregate(job.sector_id == 17)),zone.number_of_agents(job))))</variable>
      <variable use="both" source="expression" name="building.zonal_sector_16_fraction" type="variable_definition">ln(building.disaggregate(safe_array_divide((zone.aggregate(job.sector_id == 16)),zone.number_of_agents(job))))</variable>
      <variable use="both" source="expression" name="building.zonal_sector_15_fraction" type="variable_definition">ln(building.disaggregate(safe_array_divide((zone.aggregate(job.sector_id == 15)),zone.number_of_agents(job))))</variable>
      <variable use="both" source="expression" name="building.zonal_sector_14_fraction" type="variable_definition">ln(building.disaggregate(safe_array_divide((zone.aggregate(job.sector_id == 14)),zone.number_of_agents(job))))</variable>
      <variable use="both" source="expression" name="building.zonal_sector_13_fraction" type="variable_definition">ln(building.disaggregate(safe_array_divide((zone.aggregate(job.sector_id == 13)),zone.number_of_agents(job))))</variable>
      <variable use="both" source="expression" name="building.zonal_sector_12_fraction" type="variable_definition">ln(building.disaggregate(safe_array_divide((zone.aggregate(job.sector_id == 12)),zone.number_of_agents(job))))</variable>
      <variable use="both" source="expression" name="building.zonal_sector_11_fraction" type="variable_definition">ln(building.disaggregate(safe_array_divide((zone.aggregate(job.sector_id ==11)),zone.number_of_agents(job))))</variable>
      <variable use="both" source="expression" name="building.zonal_sector_10_fraction" type="variable_definition">ln(building.disaggregate(safe_array_divide((zone.aggregate(job.sector_id == 10)),zone.number_of_agents(job))))</variable>
      <variable use="both" source="expression" name="building.zonal_sector_9_fraction" type="variable_definition">ln(building.disaggregate(safe_array_divide((zone.aggregate(job.sector_id == 9)),zone.number_of_agents(job))))</variable>
      <variable use="both" source="expression" name="building.zonal_sector_8_fraction" type="variable_definition">ln(building.disaggregate(safe_array_divide((zone.aggregate(job.sector_id == 8)),zone.number_of_agents(job))))</variable>
      <variable use="both" source="expression" name="building.zonal_sector_7_fraction" type="variable_definition">ln(building.disaggregate(safe_array_divide((zone.aggregate(job.sector_id == 7)),zone.number_of_agents(job))))</variable>
      <variable use="both" source="expression" name="building.zonal_sector_6_fraction" type="variable_definition">ln(building.disaggregate(safe_array_divide((zone.aggregate(job.sector_id == 6)),zone.number_of_agents(job))))</variable>
      <variable use="both" source="expression" name="building.zonal_sector_5_fraction" type="variable_definition">ln(building.disaggregate(safe_array_divide((zone.aggregate(job.sector_id == 5)),zone.number_of_agents(job))))</variable>
      <variable use="both" source="expression" name="building.zonal_sector_3_fraction" type="variable_definition">ln(building.disaggregate(safe_array_divide((zone.aggregate(job.sector_id == 3)),zone.number_of_agents(job))))</variable>
      <variable use="both" source="expression" name="building.zonal_sector_2_fraction" type="variable_definition">ln(building.disaggregate(safe_array_divide((zone.aggregate(job.sector_id == 2)),zone.number_of_agents(job))))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_agriculture_unit_price" type="variable_definition">ln(where(building.building_type_id==12,building.average_value_per_unit,0))</variable>
      <variable use="both" source="expression" name="building.zonal_agriculturel_job_space_to_vac_ratio" type="variable_definition">ln(building.disaggregate(safe_array_divide(zone.aggregate(where(building.building_type_id == 4,urbansim_zone.building.total_job_spaces, 0)),zone.aggregate(where(building.building_type_id == 4,urbansim_zone.building.vacant_job_spaces,0)))))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_is_transportation" type="variable_definition">building.building_type_id == 13</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_is_agriculture" type="variable_definition">building.building_type_id == 12</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_is_hotel" type="variable_definition">building.building_type_id == 11</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_is_public" type="variable_definition">building.building_type_id == 6</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_is_medical" type="variable_definition">building.building_type_id == 7</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_is_gq" type="variable_definition">building.building_type_id == 10</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_is_education" type="variable_definition">building.building_type_id == 9</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_is_civic" type="variable_definition">building.building_type_id == 8</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_is_retail" type="variable_definition">building.building_type_id == 3</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_is_office" type="variable_definition">building.building_type_id == 5</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_is_industrial" type="variable_definition">building.building_type_id == 4</variable>
      <variable use="both" source="expression" name="building.zonal_sector_1_fraction" type="variable_definition">ln(building.disaggregate(safe_array_divide((zone.aggregate(job.sector_id == 1)),zone.number_of_agents(job))))</variable>
      <variable use="both" source="primary attribute" name="building.zonal_bldg_sqft_per_unit_1" type="variable_definition">building.sqft_per_unit</variable>
      <variable use="both" source="expression" name="household_x_building.zonal_hhld_size_x_bldg_sqft_per_unit" type="variable_definition">household.persons*building.sqft_per_unit</variable>
      <variable use="both" source="expression" name="building.zonal_ln_avg_res_sqft_per_person" type="variable_definition">building.disaggregate(ln(zone.aggregate(safe_array_divide(building.sqft_per_unit,building.aggregate(household.persons))+0, function=mean)))</variable>
      <variable use="both" source="expression" name="building.zonal_avg_res_sqft_per_person" type="variable_definition">building.disaggregate(zone.aggregate(safe_array_divide(building.sqft_per_unit,building.aggregate(household.persons))+0, function=mean))</variable>
      <variable use="both" source="expression" name="building.zonal_ln_avg_persons_per_hhld" type="variable_definition">ln(building.disaggregate(zone.aggregate(household.persons+0, intermediates=[building],function=mean)))</variable>
      <variable use="both" source="expression" name="building.zonal_avg_persons_per_hhld" type="variable_definition">building.disaggregate(zone.aggregate(household.persons+0, intermediates=[building],function=mean))</variable>
      <variable use="both" source="expression" name="household_x_building.zonal_bldg_ln_price_hhld_income_ratio" type="variable_definition">ln(safe_array_divide(building.average_value_per_unit, household.income))</variable>
      <variable use="both" source="expression" name="household_x_building.zonal_bldg_price_hhld_income_ratio" type="variable_definition">safe_array_divide(building.average_value_per_unit, household.income)</variable>
      <variable use="both" source="expression" name="household.zonal_ln_hhld_size" type="variable_definition">ln(household.persons)</variable>
      <variable use="both" source="expression" name="household_x_building.zonal_one_pers_x_non_sfr" type="variable_definition">(household.persons&lt;2)*numpy.logical_not(building.building_type_id == 1)</variable>
      <variable use="both" source="expression" name="household_x_building.zonal_ln_hhld_inc_x_is_RMF" type="variable_definition">ln(household.income)*(building.building_type_id == 2)</variable>
      <variable use="both" source="primary attribute" name="household.zonal_hhld_size" type="variable_definition">household.persons</variable>
      <variable use="both" source="expression" name="building.zonal_average_value_per_unit" type="variable_definition">building.average_value_per_unit</variable>
      <variable use="both" source="expression" name="household_x_building.zonal_ln_hhld_size_x_bldg_sqft_per_unit" type="variable_definition">ln(household.persons*building.sqft_per_unit)</variable>
      <variable use="both" source="expression" name="building.zonal_vac_office_job_spaces_per_acre" type="variable_definition">ln(building.disaggregate(zone.aggregate(where(building.building_type_id == 5,urbansim_zone.building.vacant_job_spaces,0))/zone.acres))</variable>
      <variable use="both" source="expression" name="building.zonal_office_job_space_to_vac_ratio" type="variable_definition">ln(building.disaggregate(safe_array_divide(zone.aggregate(where(building.building_type_id == 5,urbansim_zone.building.total_job_spaces, 0)),zone.aggregate(where(building.building_type_id == 5,urbansim_zone.building.vacant_job_spaces,0)))))</variable>
      <variable use="both" source="expression" name="building.zonal_officel_sqft_to_capacity_ratio" type="variable_definition">ln(building.disaggregate(safe_array_divide(zone.aggregate(where(building.building_type_id == 5, urbansim_zone.building.non_residential_sqft,0)),zone.aggregate(where(building.building_type_id == 5,urbansim_zone.building.non_residential_sqft_capacity, 0)))))</variable>
      <variable use="both" source="expression" name="building.zonal_total_office_job_space_per_acre" type="variable_definition">ln(building.disaggregate(safe_array_divide(zone.aggregate(where(building.building_type_id == 5,urbansim_zone.building.total_job_spaces, 0)), zone.acres)))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_office_unit_price" type="variable_definition">ln(where(building.building_type_id==5,building.average_value_per_unit,0))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_developable_office_sqft_capacity" type="variable_definition">ln(where(building.building_type_id == 5,urbansim_zone.building.developable_non_residential_sqft_capacity,0))</variable>
      <variable use="both" source="expression" name="building.zonal_num_officel_jobs_per_acre" type="variable_definition">ln(building.disaggregate((zone.aggregate(job.sector_id == 9)+ zone.aggregate(job.sector_id == 10) + zone.aggregate(job.sector_id == 11)+ zone.aggregate(job.sector_id == 13))/zone.acres))</variable>
      <variable use="both" source="expression" name="building.zonal_vac_industrial_job_spaces_per_acre" type="variable_definition">ln(building.disaggregate(zone.aggregate(where(building.building_type_id == 4,urbansim_zone.building.vacant_job_spaces,0))/zone.acres))</variable>
      <variable use="both" source="expression" name="building.zonal_industrial_job_space_to_vac_ratio" type="variable_definition">ln(building.disaggregate(safe_array_divide(zone.aggregate(where(building.building_type_id == 4,urbansim_zone.building.total_job_spaces, 0)),zone.aggregate(where(building.building_type_id == 4,urbansim_zone.building.vacant_job_spaces,0)))))</variable>
      <variable use="both" source="expression" name="building.zonal_industrial_sqft_to_capacity_ratio" type="variable_definition">ln(building.disaggregate(safe_array_divide(zone.aggregate(where(building.building_type_id == 4, urbansim_zone.building.non_residential_sqft,0)),zone.aggregate(where(building.building_type_id == 4,urbansim_zone.building.non_residential_sqft_capacity, 0)))))</variable>
      <variable use="both" source="expression" name="building.zonal_total_industrial_job_space_per_acre" type="variable_definition">ln(building.disaggregate(safe_array_divide(zone.aggregate(where(building.building_type_id == 4,urbansim_zone.building.total_job_spaces, 0)), zone.acres)))</variable>
      <variable use="both" source="expression" name="building.zonal_total_retail_job_space_per_acre" type="variable_definition">ln(building.disaggregate(safe_array_divide(zone.aggregate(where(building.building_type_id == 3,urbansim_zone.building.total_job_spaces, 0)), zone.acres)))</variable>
      <variable use="both" source="expression" name="building.zonal_num_industrial_jobs_per_acre" type="variable_definition">ln(building.disaggregate((zone.aggregate(job.sector_id == 8)+ zone.aggregate(job.sector_id == 6) + zone.aggregate(job.sector_id == 5))/zone.acres))</variable>
      <variable use="both" source="expression" name="building.zonal_vac_retail_job_spaces_per_acre" type="variable_definition">ln(building.disaggregate(zone.aggregate(where(building.building_type_id == 3,urbansim_zone.building.vacant_job_spaces,0))/zone.acres))</variable>
      <variable use="both" source="expression" name="building.zonal_retail_sqft_to_capacity_ratio" type="variable_definition">ln(building.disaggregate(safe_array_divide(zone.aggregate(where(building.building_type_id == 3, urbansim_zone.building.non_residential_sqft,0)),zone.aggregate(where(building.building_type_id == 3,urbansim_zone.building.non_residential_sqft_capacity, 0)))))</variable>
      <variable use="both" source="expression" name="building.zonal_retail_job_space_to_vac_ratio" type="variable_definition">ln(building.disaggregate(safe_array_divide(zone.aggregate(where(building.building_type_id == 3,urbansim_zone.building.total_job_spaces, 0)),zone.aggregate(where(building.building_type_id == 3,urbansim_zone.building.vacant_job_spaces,0)))))</variable>
      <variable use="both" source="expression" name="building.zonal_num_retail_jobs_per_acre" type="variable_definition">ln(building.disaggregate(zone.aggregate(job.sector_id == 7)/zone.acres))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_industrial_unit_price" type="variable_definition">ln(where(building.building_type_id==4,building.average_value_per_unit,0))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_developable_industrial_sqft_capacity" type="variable_definition">ln(where(building.building_type_id == 4,urbansim_zone.building.developable_non_residential_sqft_capacity,0))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_retail_unit_price" type="variable_definition">ln(where(building.building_type_id==3,building.average_value_per_unit,0))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_developable_retaill_sqft_capacity" type="variable_definition">ln(where(building.building_type_id == 3,urbansim_zone.building.developable_non_residential_sqft_capacity,0))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_developable_mf_residential_units_capacity" type="variable_definition">ln(where(building.building_type_id == 2,urbansim_zone.building.developable_residential_units_capacity,0))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_developable_sf_residential_units_capacity" type="variable_definition">ln(where(building.building_type_id == 1,urbansim_zone.building.developable_residential_units_capacity,0))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_mf_units" type="variable_definition">ln(where(building.building_type_id==2,building.residential_units,0))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_sf_units" type="variable_definition">ln(where(building.building_type_id==1,building.residential_units,0))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_sf_unit_price" type="variable_definition">ln(where(building.building_type_id==1,building.average_value_per_unit,0))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_mf_unit_price" type="variable_definition">ln(where(building.building_type_id==2,building.average_value_per_unit,0))</variable>
      <variable use="both" source="expression" name="building.zonal_avg_hh_income" type="variable_definition">ln(building.disaggregate(zone.aggregate(household.income, function = mean)))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_avg_year_built" type="variable_definition">ln(building.year_built)</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_res_to_vac_ratio" type="variable_definition">ln(safe_array_divide((building.residential_units),(urbansim_zone.building.vacant_residential_units)))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_res_to_capacity_ratio" type="variable_definition">ln(safe_array_divide((urbansim_zone.building.residential_units),(urbansim_zone.building.residential_units_capacity)))</variable>
      <variable use="both" source="primary attribute" name="building.zonal_bldg_bldg_typeID" type="variable_definition">building.building_type_id</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_land_per_unit" type="variable_definition">ln_bounded(safe_array_divide(building.residential_units, building.land_area))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_far" type="variable_definition">ln_bounded(safe_array_divide(building.non_residential_sqft, building.land_area))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_avg_hh_income" type="variable_definition">ln(building.aggregate(household.income, function = mean))</variable>
      <variable use="both" source="expression" name="building.zonal_network_length_majorrd" type="variable_definition">ln(building.disaggregate(zone.network_length_majorrd))</variable>
      <variable use="both" source="expression" name="building.zonal_network_length_localrd" type="variable_definition">ln(building.disaggregate(zone.network_length_localrd))</variable>
      <variable use="both" source="expression" name="building.zonal_network_length_highway" type="variable_definition">ln(building.disaggregate(zone.network_length_highway))</variable>
      <variable use="both" source="expression" name="building.zonal_network_length_freeway" type="variable_definition">ln(building.disaggregate(zone.network_length_freeway))</variable>
      <variable use="both" source="expression" name="building.zonal_sqft_per_unit" type="variable_definition">ln(building.disaggregate(zone.aggregate(where(building.building_type_id &lt; 3, building.sqft_per_unit, 0),function=mean)))</variable>
      <variable use="both" source="expression" name="building.zonal_num_jobs_6" type="variable_definition">ln(building.disaggregate(zone.aggregate(job.sector_id == 6)))</variable>
      <variable use="both" source="expression" name="building.zonal_num_jobs_5" type="variable_definition">ln(building.disaggregate(zone.aggregate(job.sector_id == 5)))</variable>
      <variable use="both" source="expression" name="building.zonal_num_jobs_3" type="variable_definition">ln(building.disaggregate(zone.aggregate(job.sector_id == 3)))</variable>
      <variable use="both" source="expression" name="building.zonal_num_jobs_2" type="variable_definition">ln(building.disaggregate(zone.aggregate(job.sector_id == 2)))</variable>
      <variable use="both" source="expression" name="building.zonal_num_jobs_19" type="variable_definition">ln(building.disaggregate(zone.aggregate(job.sector_id == 19)))</variable>
      <variable use="both" source="expression" name="building.zonal_num_jobs_18" type="variable_definition">ln(building.disaggregate(zone.aggregate(job.sector_id == 18)))</variable>
      <variable use="both" source="expression" name="building.zonal_num_jobs_17" type="variable_definition">ln(building.disaggregate(zone.aggregate(job.sector_id == 17)))</variable>
      <variable use="both" source="expression" name="building.zonal_num_jobs_16" type="variable_definition">ln(building.disaggregate(zone.aggregate(job.sector_id == 16)))</variable>
      <variable use="both" source="expression" name="building.zonal_num_jobs_15" type="variable_definition">ln(building.disaggregate(zone.aggregate(job.sector_id == 15)))</variable>
      <variable use="both" source="expression" name="building.zonal_num_jobs_14" type="variable_definition">ln(building.disaggregate(zone.aggregate(job.sector_id == 14)))</variable>
      <variable use="both" source="expression" name="building.zonal_num_jobs_13" type="variable_definition">ln(building.disaggregate(zone.aggregate(job.sector_id == 13)))</variable>
      <variable use="both" source="expression" name="building.zonal_num_jobs_12" type="variable_definition">ln(building.disaggregate(zone.aggregate(job.sector_id == 12)))</variable>
      <variable use="both" source="expression" name="building.zonal_num_jobs_11" type="variable_definition">ln(building.disaggregate(zone.aggregate(job.sector_id == 11)))</variable>
      <variable use="both" source="expression" name="building.zonal_num_jobs_10" type="variable_definition">ln(building.disaggregate(zone.aggregate(job.sector_id == 10)))</variable>
      <variable use="both" source="expression" name="building.zonal_num_jobs_1" type="variable_definition">ln(building.disaggregate(zone.aggregate(job.sector_id == 1)))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_vac_res_units" type="variable_definition">ln(urbansim_zone.building.vacant_residential_units)</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_res_units" type="variable_definition">ln(urbansim_zone.building.residential_units)</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_num_jobs_9" type="variable_definition">ln(building.aggregate(job.sector_id==9))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_num_jobs_8" type="variable_definition">ln(building.aggregate(job.sector_id==8))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_num_jobs_7" type="variable_definition">ln(building.aggregate(job.sector_id == 7))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_num_jobs_6" type="variable_definition">ln(building.aggregate(job.sector_id==6))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_num_jobs_5" type="variable_definition">ln(building.aggregate(job.sector_id==5))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_num_jobs_3" type="variable_definition">ln(building.aggregate(job.sector_id==3))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_num_jobs_2" type="variable_definition">ln(building.aggregate(job.sector_id==2))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_num_jobs_19" type="variable_definition">ln(building.aggregate(job.sector_id==19))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_num_jobs_18" type="variable_definition">ln(building.aggregate(job.sector_id==18))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_num_jobs_17" type="variable_definition">ln(building.aggregate(job.sector_id==17))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_num_jobs_16" type="variable_definition">ln(building.aggregate(job.sector_id==16))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_num_jobs_15" type="variable_definition">ln(building.aggregate(job.sector_id==15))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_num_jobs_14" type="variable_definition">ln(building.aggregate(job.sector_id==14))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_num_jobs_13" type="variable_definition">ln(building.aggregate(job.sector_id==13))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_num_jobs_12" type="variable_definition">ln(building.aggregate(job.sector_id==12))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_num_jobs_11" type="variable_definition">ln(building.aggregate(job.sector_id==11))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_num_jobs_10" type="variable_definition">ln(building.aggregate(job.sector_id==10))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_num_jobs_1" type="variable_definition">ln(building.aggregate(job.sector_id==1))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_num_jobs" type="variable_definition">ln(urbansim_zone.building.number_of_non_home_based_jobs)</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_num_hh" type="variable_definition">ln(urbansim_zone.building.number_of_households)</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_nonres_to_capacity_ratio" type="variable_definition">ln(safe_array_divide((urbansim_zone.building.non_residential_sqft),(urbansim_zone.building.non_residential_sqft_capacity)))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_job_space_to_vac_ratio" type="variable_definition">ln(safe_array_divide((urbansim_zone.building.total_job_spaces),(urbansim_zone.building.vacant_job_spaces)))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_developable_residential_units_capacity" type="variable_definition">ln(urbansim_zone.building.developable_residential_units_capacity)</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_developable_non_residential_sqft_capacity" type="variable_definition">ln(urbansim_zone.building.developable_non_residential_sqft_capacity)</variable>
      <variable use="both" source="expression" name="building.zonal_vac_job_spaces_per_acre" type="variable_definition">ln(building.disaggregate(zone.aggregate(urbansim_zone.building.vacant_job_spaces)/zone.acres))</variable>
      <variable use="both" source="expression" name="building.zonal_toal_job_spaces_per_acre" type="variable_definition">ln(building.disaggregate(zone.aggregate(urbansim_zone.building.total_job_spaces)/zone.acres))</variable>
      <variable use="both" source="expression" name="building.zonal_job_space_to_vac_ratio" type="variable_definition">ln(building.disaggregate(safe_array_divide(zone.aggregate(urbansim_zone.building.total_job_spaces),zone.aggregate(urbansim_zone.building.vacant_job_spaces))))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_vacant_job_spaces" type="variable_definition">ln(urbansim_zone.building.vacant_job_spaces)</variable>
      <variable use="both" source="expression" name="building.zonal_ln_average_value_per_unit" type="variable_definition">ln(building.average_value_per_unit)</variable>
      <variable use="both" source="expression" name="building.zonal_num_jobs_8" type="variable_definition">ln(building.disaggregate(zone.aggregate(job.sector_id == 8)))</variable>
      <variable use="both" source="expression" name="zone.zonal_vac_job_spaces_per_acre" type="variable_definition">zone.aggregate(urbansim_zone.building.vacant_job_spaces)/zone.acres</variable>
      <variable use="both" source="expression" name="zone.zonal_toal_job_spaces_per_acre" type="variable_definition">zone.aggregate(urbansim_zone.building.total_job_spaces)/zone.acres</variable>
      <variable use="both" source="expression" name="building.zonal_num_hhlds_per_acre" type="variable_definition">ln(building.disaggregate(zone.number_of_agents(household)/zone.acres))</variable>
      <variable use="both" source="expression" name="building.zonal_nonres_to_capacity_ratio" type="variable_definition">ln(building.disaggregate(safe_array_divide(zone.aggregate(urbansim_zone.building.non_residential_sqft),zone.aggregate(urbansim_zone.building.non_residential_sqft_capacity))))</variable>
      <variable use="both" source="expression" name="building.zonal_res_to_capacity_ratio" type="variable_definition">ln(building.disaggregate(safe_array_divide(zone.aggregate(building.residential_units),zone.aggregate(building.residential_units_capacity))))</variable>
      <variable use="both" source="expression" name="building.zonal_res_to_vac_ratio" type="variable_definition">ln(building.disaggregate(safe_array_divide(zone.aggregate(building.residential_units),zone.aggregate(urbansim_zone.building.vacant_residential_units))))</variable>
      <variable use="both" source="expression" name="building.zonal_vac_res_units_per_acre" type="variable_definition">ln(building.disaggregate(zone.aggregate(urbansim_zone.building.vacant_residential_units)/zone.acres))</variable>
      <variable use="both" source="expression" name="building.zonal_res_units_per_acre" type="variable_definition">ln(building.disaggregate(zone.aggregate(urbansim_zone.building.residential_units)/zone.acres))</variable>
      <variable use="both" source="expression" name="building.zonal_num_pops_per_acre" type="variable_definition">ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))</variable>
      <variable use="both" source="expression" name="building.zonal_num_jobs_per_acre" type="variable_definition">ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))</variable>
      <variable use="both" source="expression" name="building.zonal_pop_ofp_sov_access" type="variable_definition">ln(building.disaggregate(zone.pop_ofp_sov_access))</variable>
      <variable use="both" source="expression" name="building.zonal_pop_pk_sov_access" type="variable_definition">ln(building.disaggregate(zone.pop_pk_sov_access))</variable>
      <variable use="both" source="expression" name="building.zonal_emp_ofp_sov_access" type="variable_definition">ln(building.disaggregate(zone.emp_ofp_sov_access))</variable>
      <variable use="both" source="expression" name="building.zonal_emp_pk_sov_access" type="variable_definition">ln(building.disaggregate(zone.emp_pk_sov_access))</variable>
      <variable use="both" source="expression" name="building.zonal_freeway_within_qtr_mile" type="variable_definition">ln(building.disaggregate(zone.freeway_within_qtr_mile))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_sqft_per_unit" type="variable_definition">ln(building.sqft_per_unit)</variable>
      <variable use="both" source="expression" name="building.zonal_num_jobs_9" type="variable_definition">ln(building.disaggregate(zone.aggregate(job.sector_id == 9)))</variable>
      <variable use="both" source="expression" name="building.zonal_num_jobs_7" type="variable_definition">ln(building.disaggregate(zone.aggregate(job.sector_id == 7)))</variable>
      <variable use="both" source="expression" name="building.zonal_num_jobs" type="variable_definition">ln(building.disaggregate(zone.number_of_agents(job)))</variable>
      <variable use="both" source="expression" name="building.zonal_num_hh" type="variable_definition">ln(building.disaggregate(zone.number_of_agents(household)))</variable>
      <variable use="both" source="expression" name="building.zonal_phoenix_cbd_distance" type="variable_definition">ln(building.disaggregate(zone.dist_to_phx_cbd))</variable>	</expression_library>    <dataset_pool_configuration type="class">
      <class_name type="string" hidden="True">DatasetPoolConfiguration</class_name>
      <class_module type="string" hidden="True">opus_core.configurations.dataset_pool_configuration</class_module>
      <argument name="package_order" type="list">['mag_zone','urbansim_zone','urbansim','opus_core']</argument>
    </dataset_pool_configuration>
    <available_datasets type="list">['zone','building','household','person','job','raz2011','razi03','mpa','mpa2011','mpai03','county','taz2011','tazi03','blockgroup_2010','blockgroup_2000','travel_data','active_development','household_x_building','development_project','alldata','development_event_history','target_vacancy','building_type','building_sqft_per_job']</available_datasets>
  </general>
  <model_manager>
    <models config_name="model_system" hidden="False" name="Models" setexpanded="True" type="dictionary">
      <model name="child_leaving_home_model" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module>urbansim.models.child_leaving_home_model</class_module>
            <class_name>ChildLeavingHomeModel</class_name>
          </import>
          <init type="dictionary">
            <argument name="probabilities" parser_action="quote_string" type="string">opus_core.upc.rate_based_probabilities</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
            <name name="name" type="string">ChildLeavingHomeModel</name>
          </init>
          <prepare_for_run type="dictionary">
            <output name="output" type="string">mem_resources</output>
            <argument name="rate_storage" type="string">base_cache_storage</argument>
            <argument name="rate_table" parser_action="quote_string" type="string" model_dependency_type="table">annual_child_leaving_home_rates</argument>
            <argument name="probability_attribute" parser_action="quote_string" type="string">child_leaving_home_probability</argument>
            <name name="name" type="string">prepare_for_run</name>
          </prepare_for_run>
          <run type="dictionary">
            <output name="output" type="string">child_leaving_home_index</output>
            <argument name="resources" type="string">mem_resources</argument>
            <argument name="person_set" type="string" model_dependency_type="dataset">person</argument>
            <argument name="household_set" type="string" model_dependency_type="dataset">household</argument>
          </run>
        </structure>
      </model>
      <model name="roommate_model" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module>urbansim.models.roommate_model</class_module>
            <class_name>RoommateModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">RoommateModel</name>
          </init>
          <run type="dictionary">
            <argument name="person_set" type="string" model_dependency_type="dataset">person</argument>
            <argument name="household_set" type="string" model_dependency_type="dataset">household</argument>
          </run>
        </structure>
      </model>
      <model name="zeroworker_income_model" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">mag_zone.models.zeroworker_income_model</class_module>
            <class_name type="string">ZeroworkerIncomeModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">ZeroworkerIncomeModel</name>
            <argument name="regression_procedure" parser_action="quote_string" type="string">opus_core.linear_regression</argument>
            <argument convert_blank_to_none="True" name="submodel_string" type="string"/>
            <argument convert_blank_to_none="True" name="run_config" type="string"/>
            <argument convert_blank_to_none="True" name="estimate_config" type="string"/>
            <argument name="debuglevel" type="integer">0</argument>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
          </init>
          <run type="dictionary">
            <argument name="specification" type="string">specification</argument>
            <argument name="coefficients" type="string">coefficients</argument>
            <argument name="dataset" type="string">household</argument>
            <argument convert_blank_to_none="True" hidden="True" name="index" type="string">rm_index</argument>
            <argument name="chunk_specification" type="string">{'nchunks':12}</argument>
            <argument name="data_objects" type="string">datasets</argument>
          </run>
          <prepare_for_run type="dictionary">
            <name name="name" type="string">prepare_for_run</name>
            <argument convert_blank_to_none="True" name="dataset" type="string"/>
            <argument convert_blank_to_none="True" name="dataset_filter" parser_action="quote_string" type="string"/>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">zeroworker_income_model_specification</argument>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_table" parser_action="quote_string" type="string">zeroworker_income_model_coefficients</argument>
            <argument name="cache_storage" type="string">base_cache_storage</argument>
            <argument name="sample_coefficients" type="boolean">False</argument>
            <argument name="distribution" parser_action="quote_string" type="string">normal</argument>
            <argument name="multiplicator" type="integer">1</argument>
            <output name="output" type="string">(specification, coefficients, rm_index)</output>
          </prepare_for_run>
        </structure>
        <estimation_config name="Estimation Configuration" parser_action="skip">
          <config_override config_name="models" name="Models to run before estimation" type="list">[]</config_override>
        </estimation_config>
      </model>
      <model name="household_workers_init_model" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">mag_zone.models.household_workers_init_model</class_module>
            <class_name type="string">HouseholdWorkersInitChoiceModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">HouseholdWorkersInitChoiceModel</name>
            <argument name="choice_set" type="string" model_dependency_type="dataset">[0,1,2,3]</argument>
            <argument name="utilities" parser_action="quote_string" type="string">opus_core.linear_utilities</argument>
            <argument name="probabilities" parser_action="quote_string" type="string">opus_core.mnl_probabilities</argument>
            <argument name="choices" parser_action="quote_string" type="string">opus_core.random_choices</argument>
            <argument name="submodel_string" parser_action="quote_string" type="string">workeligible_id</argument>
            <argument name="choice_attribute_name" parser_action="quote_string" type="string" model_dependency_type="variable">numworker_id =0*(household.workers==0)+1*(household.workers==1)+2*(household.workers==2)+3*(household.workers&gt;=3)</argument>
            <argument name="interaction_pkg" parser_action="quote_string" type="string">opus_core</argument>
            <argument convert_blank_to_none="True" name="run_config" type="string"/>
            <argument name="estimate_config" type="dictionary">
              <key name="estimation_size_agents" type="float">.25</key>
            </argument>
            <argument name="debuglevel" type="integer">0</argument>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
          </init>
          <run type="dictionary">
            <argument name="specification" type="string">specification</argument>
            <argument name="coefficients" type="string">coefficients</argument>
            <argument name="agent_set" type="string" model_dependency_type="dataset">household</argument>
            <argument name="agents_index" type="string">cm_index</argument>
            <argument convert_blank_to_none="True" name="chunk_specification" type="string"/>
            <argument name="data_objects" type="string">datasets</argument>
          </run>
          <prepare_for_run type="dictionary">
            <name name="name" type="string">prepare_for_run</name>
            <output name="output" type="string">(specification, coefficients, cm_index)</output>
            <argument convert_blank_to_none="True" name="agent_set" type="string" model_dependency_type="dataset">household</argument>
            <argument convert_blank_to_none="True" name="agent_filter" parser_action="quote_string" type="string" model_dependency_type="variable"/>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string" model_dependency_type="table">household_workers_init_model_specification</argument>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_table" parser_action="quote_string" type="string" model_dependency_type="table">household_workers_init_model_coefficients</argument>
            <argument name="cache_storage" type="string">base_cache_storage</argument>
            <argument name="sample_coefficients" type="boolean">False</argument>
            <argument name="distribution" parser_action="quote_string" type="string">normal</argument>
            <argument name="multiplicator" type="integer">1</argument>
          </prepare_for_run>
          <estimate type="dictionary">
            <output name="output" type="string">(coefficients, dummy)</output>
            <argument name="specification" type="string">specification</argument>
            <argument name="agent_set" type="string" model_dependency_type="dataset">household</argument>
            <argument name="agents_index" type="string">cm_index</argument>
            <argument name="procedure" parser_action="quote_string" type="string">opus_core.bhhh_mnl_estimation</argument>
            <argument name="data_objects" type="string">datasets</argument>
          </estimate>
          <prepare_for_estimate type="dictionary">
            <name name="name" type="string">prepare_for_estimate</name>
            <output name="output" type="string">(specification, cm_index)</output>
            <argument convert_blank_to_none="True" name="agent_set" type="string" model_dependency_type="dataset">household</argument>
            <argument convert_blank_to_none="True" name="agent_filter" parser_action="quote_string" type="string" model_dependency_type="variable"/>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string" model_dependency_type="table">choice_model_template_specification</argument>
          </prepare_for_estimate>
        </structure>
        <specification type="dictionary" dynamic="True">
          <submodel type="submodel" hidden="Children" name="worker_model" submodel_id="-2">
            <description type="string">worker_model</description>
            <equation equation_id="0" name="0worker" type="submodel_equation">
              <variable_list type="variable_list">
              </variable_list>
            </equation>
            <equation equation_id="1" name="1worker" type="submodel_equation">
              <variable_list type="variable_list">
                <variable_spec name="household.avg_age_workeligible" coefficient_name="oneworker_avg_age_adults"/>
                <variable_spec name="household.avg_edu_workeligible" coefficient_name="oneworker_avg_edu_adults"/>
                <variable_spec name="household.children" coefficient_name="oneworker_children"/>
                <variable_spec name="constant" coefficient_name="oneworker_constant"/>
                <variable_spec name="household.enrollment_of_head" coefficient_name="oneworker_enrolled"/>
                <variable_spec name="household.oldhead" coefficient_name="oneworker_old_hher"/>
                <variable_spec name="household.one_eligible_worker" coefficient_name="oneworker_one_eligible"/>
                <variable_spec name="household.two_eligible_workers" coefficient_name="oneworker_two_eligible"/>
                <variable_spec name="household.workeligible" coefficient_name="oneworker_workeligible"/>
                <variable_spec name="household.avgage_workeligible_u24" coefficient_name="oneworker_avgage_workeligible_u24"/>
              </variable_list>
            </equation>
            <equation equation_id="2" name="2worker">
              <variable_list type="variable_list">
                <variable_spec name="household.avg_age_workeligible" coefficient_name="twoworker_avg_age_adults"/>
                <variable_spec name="household.avg_edu_workeligible" coefficient_name="twoworker_avg_edu_adults"/>
                <variable_spec name="household.children" coefficient_name="twoworker_children"/>
                <variable_spec name="constant" coefficient_name="twoworker_constant"/>
                <variable_spec name="household.enrollment_of_head" coefficient_name="twoworker_enrolled"/>
                <variable_spec name="household.married_family" coefficient_name="twoworker_married_fam"/>
                <variable_spec name="household.oldhead" coefficient_name="twoworker_old_hher"/>
                <variable_spec name="household.two_eligible_workers" coefficient_name="twoworker_two_eligible"/>
                <variable_spec name="household.workeligible" coefficient_name="twoworker_workeligible"/>
                <variable_spec name="household.avgage_workeligible_u24" coefficient_name="twoworker_avgage_workeligible_u24"/>
              </variable_list>
            </equation>
            <equation equation_id="3" name="3worker">
              <variable_list type="variable_list">
                <variable_spec name="household.avg_age_workeligible" coefficient_name="threeworker_avg_age_adults"/>
                <variable_spec name="household.avg_edu_workeligible" coefficient_name="threeworker_avg_edu_adults"/>
                <variable_spec name="household.children" coefficient_name="threeworker_children"/>
                <variable_spec name="constant" coefficient_name="threeplusworker_constant"/>
                <variable_spec name="household.enrollment_of_head" coefficient_name="threeworker_enrolled"/>
                <variable_spec name="household.married_family" coefficient_name="threeworker_married_fam"/>
                <variable_spec name="household.oldhead" coefficient_name="threeworker_old_hher"/>
                <variable_spec name="household.workeligible" coefficient_name="threeworker_workeligible"/>
                <variable_spec name="household.avgage_workeligible_u24" coefficient_name="threeworker_avgage_workeligible_u24"/>
              </variable_list>
            </equation>
          </submodel>
        </specification>
        <estimation_config name="Estimation Configuration" parser_action="skip">
          <config_override config_name="models" name="Models to run before estimation" type="list">[]</config_override>
        </estimation_config>
      </model>
      <model name="household_workers_model" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">mag_zone.models.household_workers_choice_model</class_module>
            <class_name type="string">HouseholdWorkersChoiceModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">HouseholdWorkersChoiceModel</name>
            <argument name="choice_set" type="string" model_dependency_type="dataset">[0,1,2,3]</argument>
            <argument name="utilities" parser_action="quote_string" type="string">opus_core.linear_utilities</argument>
            <argument name="probabilities" parser_action="quote_string" type="string">opus_core.mnl_probabilities</argument>
            <argument name="choices" parser_action="quote_string" type="string">opus_core.random_choices</argument>
            <argument name="submodel_string" parser_action="quote_string" type="string">workeligible_id</argument>
            <argument name="choice_attribute_name" parser_action="quote_string" type="string" model_dependency_type="variable">numworker_id =0*(household.workers==0)+1*(household.workers==1)+2*(household.workers==2)+3*(household.workers&gt;=3)</argument>
            <argument name="interaction_pkg" parser_action="quote_string" type="string">opus_core</argument>
            <argument convert_blank_to_none="True" name="run_config" type="string"/>
            <argument name="estimate_config" type="dictionary">
              <key name="estimation_size_agents" type="float">1.0</key>
            </argument>
            <argument name="debuglevel" type="integer">0</argument>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
          </init>
          <run type="dictionary">
            <argument name="specification" type="string">specification</argument>
            <argument name="coefficients" type="string">coefficients</argument>
            <argument name="agent_set" type="string" model_dependency_type="dataset">household</argument>
            <argument name="agents_index" type="string">cm_index</argument>
            <argument convert_blank_to_none="True" name="chunk_specification" type="string">{'nchunks':6}</argument>
            <argument name="data_objects" type="string">datasets</argument>
          </run>
          <prepare_for_run type="dictionary">
            <name name="name" type="string">prepare_for_run</name>
            <output name="output" type="string">(specification, coefficients, cm_index)</output>
            <argument convert_blank_to_none="True" name="agent_set" type="string" model_dependency_type="dataset">household</argument>
            <argument convert_blank_to_none="True" name="agent_filter" parser_action="quote_string" type="string" model_dependency_type="variable"/>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string" model_dependency_type="table">household_workers_model_specification</argument>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_table" parser_action="quote_string" type="string" model_dependency_type="table">household_workers_model_coefficients</argument>
            <argument name="cache_storage" type="string">base_cache_storage</argument>
            <argument name="sample_coefficients" type="boolean">False</argument>
            <argument name="distribution" parser_action="quote_string" type="string">normal</argument>
            <argument name="multiplicator" type="integer">1</argument>
          </prepare_for_run>
          <estimate type="dictionary">
            <output name="output" type="string">(coefficients, dummy)</output>
            <argument name="specification" type="string">specification</argument>
            <argument name="agent_set" type="string" model_dependency_type="dataset">household</argument>
            <argument name="agents_index" type="string">cm_index</argument>
            <argument name="procedure" parser_action="quote_string" type="string">opus_core.bhhh_mnl_estimation</argument>
            <argument name="data_objects" type="string">datasets</argument>
          </estimate>
          <prepare_for_estimate type="dictionary">
            <name name="name" type="string">prepare_for_estimate</name>
            <output name="output" type="string">(specification, cm_index)</output>
            <argument convert_blank_to_none="True" name="agent_set" type="string" model_dependency_type="dataset">household</argument>
            <argument convert_blank_to_none="True" name="agent_filter" parser_action="quote_string" type="string" model_dependency_type="variable"/>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string" model_dependency_type="table">choice_model_template_specification</argument>
          </prepare_for_estimate>
        </structure>
        <estimation_config name="Estimation Configuration" parser_action="skip">
          <config_override config_name="models" name="Models to run before estimation" type="list">[]</config_override>
        </estimation_config>
      </model>
      <model name="education_model" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module>mag_zone.models.education_model</class_module>
            <class_name>EducationModel</class_name>
          </import>
          <init type="dictionary">
            <argument name="probabilities" parser_action="quote_string" type="string">mag_zone.models.edu_exit_probabilities</argument>
            <argument name="location_id_name" parser_action="quote_string" type="string">person_id</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
            <name name="name" type="string">EducationModel</name>
          </init>
          <prepare_for_run type="dictionary">
            <output name="output" type="string">mem_resources</output>
            <argument name="rate_storage" type="string">base_cache_storage</argument>
            <argument name="rate_table" parser_action="quote_string" type="string" model_dependency_type="table">annual_edu_exit_rates</argument>
            <name name="name" type="string">prepare_for_run</name>
          </prepare_for_run>
          <run type="dictionary">
            <output name="output" type="string">education_index</output>
            <argument name="resources" type="string">mem_resources</argument>
            <argument name="person_set" type="string" model_dependency_type="dataset">person</argument>
            <argument name="household_set" type="string" model_dependency_type="dataset">household</argument>
          </run>
        </structure>
      </model>
      <model name="income_regression_model" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">mag_zone.models.income_regression_model</class_module>
            <class_name type="string">IncomeRegressionModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">IncomeRegressionModel</name>
            <argument name="regression_procedure" parser_action="quote_string" type="string">opus_core.linear_regression</argument>
            <argument convert_blank_to_none="True" name="submodel_string" type="string"/>
            <argument convert_blank_to_none="True" name="run_config" type="string"/>
            <argument convert_blank_to_none="True" name="estimate_config" type="string"/>
            <argument name="debuglevel" type="integer">0</argument>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
          </init>
          <run type="dictionary">
            <argument name="specification" type="string">specification</argument>
            <argument name="coefficients" type="string">coefficients</argument>
            <argument name="dataset" type="string">household</argument>
            <argument convert_blank_to_none="True" hidden="True" name="index" type="string">rm_index</argument>
            <argument name="data_objects" type="string">datasets</argument>
          </run>
          <prepare_for_run type="dictionary">
            <name name="name" type="string">prepare_for_run</name>
            <argument convert_blank_to_none="True" name="dataset" type="string"/>
            <argument convert_blank_to_none="True" name="dataset_filter" parser_action="quote_string" type="string"/>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">income_regression_model_specification</argument>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_table" parser_action="quote_string" type="string">income_regression_model_coefficients</argument>
            <argument name="cache_storage" type="string">base_cache_storage</argument>
            <argument name="sample_coefficients" type="boolean">False</argument>
            <argument name="distribution" parser_action="quote_string" type="string">normal</argument>
            <argument name="multiplicator" type="integer">1</argument>
            <output name="output" type="string">(specification, coefficients, rm_index)</output>
          </prepare_for_run>
          <estimate type="dictionary">
            <argument name="specification" type="string">specification</argument>
            <argument name="dataset" type="string">household</argument>
            <argument config_name="outcome_attribute" name="dependent_variable" parser_action="quote_string" type="string">household.income</argument>
            <argument convert_blank_to_none="True" name="index" type="string">rm_index</argument>
            <argument name="procedure" parser_action="quote_string" type="string">opus_core.estimate_linear_regression</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <output name="output" type="string">(coefficients, dummy)</output>
          </estimate>
          <prepare_for_estimate type="dictionary">
            <name name="name" type="string">prepare_for_estimate</name>
            <argument convert_blank_to_none="True" name="dataset" type="string">household</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">regression_model_template_specification</argument>
            <argument convert_blank_to_none="True" name="dataset_for_estimation_table" parser_action="quote_string" type="string">households_sipp</argument>
            <argument convert_blank_to_none="True" name="dataset_for_estimation_storage" type="string">base_cache_storage</argument>
            <argument name="join_datasets" type="boolean">True</argument>
            <output name="output" type="string">(specification, rm_index)</output>
          </prepare_for_estimate>
        </structure>
        <specification type="dictionary">
          <submodel hidden="Children" name="Submodel" submodel_id="-2" type="submodel">
            <description type="string">A sample submodel. In order to estimate the model, please add at least one variable.</description>
            <variable_list type="variable_list">
              <variable_spec name="household.age_of_head"/>
              <variable_spec name="household.avg_edu_adults"/>
              <variable_spec name="constant"/>
              <variable_spec name="household.hh_workers"/>
              <variable_spec name="household.lag_income"/>
              <variable_spec name="household.married_family"/>
            </variable_list>
          </submodel>
        </specification>
        <estimation_config name="Estimation Configuration" parser_action="skip">
          <config_override config_name="models" name="Models to run before estimation" type="list">[]</config_override>
        </estimation_config>
      </model>
      <model name="income_regression_model2" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">mag_zone.models.income_regression_model</class_module>
            <class_name type="string">IncomeRegressionModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">IncomeRegressionModel</name>
            <argument name="regression_procedure" parser_action="quote_string" type="string">opus_core.linear_regression</argument>
            <argument convert_blank_to_none="True" name="submodel_string" type="string"/>
            <argument convert_blank_to_none="True" name="run_config" type="string"/>
            <argument convert_blank_to_none="True" name="estimate_config" type="string"/>
            <argument name="debuglevel" type="integer">0</argument>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
          </init>
          <run type="dictionary">
            <argument name="specification" type="string">specification</argument>
            <argument name="coefficients" type="string">coefficients</argument>
            <argument name="dataset" type="string">household</argument>
            <argument convert_blank_to_none="True" hidden="True" name="index" type="string">rm_index</argument>
            <argument name="data_objects" type="string">datasets</argument>
          </run>
          <prepare_for_run type="dictionary">
            <name name="name" type="string">prepare_for_run</name>
            <argument convert_blank_to_none="True" name="dataset" type="string"/>
            <argument convert_blank_to_none="True" name="dataset_filter" parser_action="quote_string" type="string"/>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">income_regression_model2_specification</argument>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_table" parser_action="quote_string" type="string">income_regression_model2_coefficients</argument>
            <argument name="cache_storage" type="string">base_cache_storage</argument>
            <argument name="sample_coefficients" type="boolean">False</argument>
            <argument name="distribution" parser_action="quote_string" type="string">normal</argument>
            <argument name="multiplicator" type="integer">1</argument>
            <output name="output" type="string">(specification, coefficients, rm_index)</output>
          </prepare_for_run>
          <estimate type="dictionary">
            <argument name="specification" type="string">specification</argument>
            <argument name="dataset" type="string">household</argument>
            <argument config_name="outcome_attribute" name="dependent_variable" parser_action="quote_string" type="string">household.income</argument>
            <argument convert_blank_to_none="True" name="index" type="string">rm_index</argument>
            <argument name="procedure" parser_action="quote_string" type="string">opus_core.estimate_linear_regression</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <output name="output" type="string">(coefficients, dummy)</output>
          </estimate>
          <prepare_for_estimate type="dictionary">
            <name name="name" type="string">prepare_for_estimate</name>
            <argument convert_blank_to_none="True" name="dataset" type="string">household</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">regression_model_template_specification</argument>
            <argument convert_blank_to_none="True" name="dataset_for_estimation_table" parser_action="quote_string" type="string">households_sipp</argument>
            <argument convert_blank_to_none="True" name="dataset_for_estimation_storage" type="string">base_cache_storage</argument>
            <argument name="join_datasets" type="boolean">True</argument>
            <output name="output" type="string">(specification, rm_index)</output>
          </prepare_for_estimate>
        </structure>
        <specification type="dictionary">
          <submodel hidden="Children" name="Submodel" submodel_id="-2" type="submodel">
            <description type="string">A sample submodel. In order to estimate the model, please add at least one variable.</description>
            <variable_list type="variable_list">
              <variable_spec name="household.age_of_head"/>
              <variable_spec name="constant"/>
              <variable_spec name="household.hh_children"/>
              <variable_spec name="household.hh_oldhead"/>
              <variable_spec name="household.hh_persons"/>
              <variable_spec name="household.hh_workers"/>
            </variable_list>
          </submodel>
        </specification>
        <estimation_config name="Estimation Configuration" parser_action="skip">
          <config_override config_name="models" name="Models to run before estimation" type="list">[]</config_override>
        </estimation_config>
      </model>
      <model name="marriage_model" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module>mag_zone.models.marriage_model</class_module>
            <class_name>MarriageModel</class_name>
          </import>
          <init type="dictionary">
            <argument name="probabilities" parser_action="quote_string" type="string">opus_core.upc.rate_based_probabilities</argument>
            <argument name="location_id_name" parser_action="quote_string" type="string">person_id</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
            <name name="name" type="string">MarriageModel</name>
          </init>
          <prepare_for_run type="dictionary">
            <output name="output" type="string">mem_resources</output>
            <argument name="rate_storage" type="string">base_cache_storage</argument>
            <argument name="rate_table" parser_action="quote_string" type="string" model_dependency_type="table">annual_marriage_rates</argument>
            <name name="name" type="string">prepare_for_run</name>
            <argument name="probability_attribute" parser_action="quote_string" type="string">marriage_probability</argument>
          </prepare_for_run>
          <run type="dictionary">
            <output name="output" type="string">marriage_index</output>
            <argument name="resources" type="string">mem_resources</argument>
            <argument name="person_set" type="string" model_dependency_type="dataset">person</argument>
            <argument name="household_set" type="string" model_dependency_type="dataset">household</argument>
          </run>
        </structure>
      </model>
      <model name="cohabitation_model" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module>mag_zone.models.cohabitation_model</class_module>
            <class_name>CohabitationModel</class_name>
          </import>
          <init type="dictionary">
            <argument name="probabilities" parser_action="quote_string" type="string">opus_core.upc.rate_based_probabilities</argument>
            <argument name="location_id_name" parser_action="quote_string" type="string">person_id</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
            <name name="name" type="string">CohabitationModel</name>
          </init>
          <prepare_for_run type="dictionary">
            <output name="output" type="string">mem_resources</output>
            <argument name="rate_storage" type="string">base_cache_storage</argument>
            <argument name="rate_table" parser_action="quote_string" type="string" model_dependency_type="table">annual_cohabitation_rates</argument>
            <name name="name" type="string">prepare_for_run</name>
            <argument name="probability_attribute" parser_action="quote_string" type="string">cohabitation_probability</argument>
          </prepare_for_run>
          <run type="dictionary">
            <output name="output" type="string">cohabitation_index</output>
            <argument name="resources" type="string">mem_resources</argument>
            <argument name="person_set" type="string" model_dependency_type="dataset">person</argument>
            <argument name="household_set" type="string" model_dependency_type="dataset">household</argument>
          </run>
        </structure>
      </model>
      <model name="divorce_model" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module>mag_zone.models.divorce_model</class_module>
            <class_name>DivorceModel</class_name>
          </import>
          <init type="dictionary">
            <argument name="probabilities" parser_action="quote_string" type="string">opus_core.upc.rate_based_probabilities</argument>
            <argument name="location_id_name" parser_action="quote_string" type="string">person_id</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
            <name name="name" type="string">DivorceModel</name>
          </init>
          <prepare_for_run type="dictionary">
            <output name="output" type="string">mem_resources</output>
            <argument name="rate_storage" type="string">base_cache_storage</argument>
            <argument name="rate_table" parser_action="quote_string" type="string" model_dependency_type="table">annual_divorce_rates</argument>
            <name name="name" type="string">prepare_for_run</name>
            <argument name="probability_attribute" parser_action="quote_string" type="string">divorce_probability</argument>
          </prepare_for_run>
          <run type="dictionary">
            <output name="output" type="string">divorce_index</output>
            <argument name="resources" type="string">mem_resources</argument>
            <argument name="person_set" type="string" model_dependency_type="dataset">person</argument>
            <argument name="household_set" type="string" model_dependency_type="dataset">household</argument>
          </run>
        </structure>
      </model>
      <model name="breakup_model" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module>mag_zone.models.breakup_model</class_module>
            <class_name>BreakupModel</class_name>
          </import>
          <init type="dictionary">
            <argument name="probabilities" parser_action="quote_string" type="string">opus_core.upc.rate_based_probabilities</argument>
            <argument name="location_id_name" parser_action="quote_string" type="string">person_id</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
            <name name="name" type="string">BreakupModel</name>
          </init>
          <prepare_for_run type="dictionary">
            <output name="output" type="string">mem_resources</output>
            <argument name="rate_storage" type="string">base_cache_storage</argument>
            <argument name="rate_table" parser_action="quote_string" type="string" model_dependency_type="table">annual_breakup_rates</argument>
            <name name="name" type="string">prepare_for_run</name>
            <argument name="probability_attribute" parser_action="quote_string" type="string">breakup_probability</argument>
          </prepare_for_run>
          <run type="dictionary">
            <output name="output" type="string">breakup_index</output>
            <argument name="resources" type="string">mem_resources</argument>
            <argument name="person_set" type="string" model_dependency_type="dataset">person</argument>
            <argument name="household_set" type="string" model_dependency_type="dataset">household</argument>
          </run>
        </structure>
      </model>
      <model name="aging_model" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">opus_core.simple_model</class_module>
            <class_name type="string">SimpleModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">SimpleModel</name>
          </init>
          <run type="dictionary">
            <argument name="dataset" type="string">person</argument>
            <argument name="expression" parser_action="quote_string" type="string">(person.is_seasonal==0)*(person.age+1)</argument>
            <argument convert_blank_to_none="True" name="outcome_attribute" parser_action="quote_string" type="string">age</argument>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
          </run>
        </structure>
        <specification type="dictionary"/>
      </model>
      <model name="fertility_model" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module>urbansim.models.fertility_model</class_module>
            <class_name>FertilityModel</class_name>
          </import>
          <init type="dictionary">
            <argument name="probabilities" parser_action="quote_string" type="string">opus_core.upc.rate_based_probabilities</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
            <name name="name" type="string">FertilityModel</name>
          </init>
          <prepare_for_run type="dictionary">
            <output name="output" type="string">fm_resources</output>
            <argument name="rate_storage" type="string">base_cache_storage</argument>
            <argument name="rate_table" parser_action="quote_string" type="string" model_dependency_type="table">annual_fertility_rates</argument>
            <name name="name" type="string">prepare_for_run</name>
            <argument name="probability_attribute" parser_action="quote_string" type="string">fertility_probability</argument>
          </prepare_for_run>
          <run type="dictionary">
            <output name="output" type="string">fertility_index</output>
            <argument name="resources" type="string">fm_resources</argument>
            <argument name="person_set" type="string" model_dependency_type="dataset">person</argument>
            <argument name="household_set" type="string" model_dependency_type="dataset">household</argument>
          </run>
        </structure>
      </model>
      <model name="mortality_model" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module>urbansim.models.mortality_model</class_module>
            <class_name>MortalityModel</class_name>
          </import>
          <init type="dictionary">
            <argument name="probabilities" parser_action="quote_string" type="string">opus_core.upc.rate_based_probabilities</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
            <name name="name" type="string">MortalityModel</name>
          </init>
          <prepare_for_run type="dictionary">
            <output name="output" type="string">mm_resources</output>
            <argument name="rate_storage" type="string">base_cache_storage</argument>
            <argument name="rate_table" parser_action="quote_string" type="string" model_dependency_type="table">annual_mortality_rates</argument>
            <name name="name" type="string">prepare_for_run</name>
            <argument name="probability_attribute" parser_action="quote_string" type="string">mortality_probability</argument>
          </prepare_for_run>
          <run type="dictionary">
            <output name="output" type="string">mortality_index</output>
            <argument name="resources" type="string">mm_resources</argument>
            <argument name="person_set" type="string" model_dependency_type="dataset">person</argument>
            <argument name="household_set" type="string" model_dependency_type="dataset">household</argument>
          </run>
        </structure>
      </model>
      <model name="active_developments_model" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">mag_zone.models.active_developments_model</class_module>
            <class_name type="string">ActiveDevelopmentsModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">ActiveDevelopmentsModel</name>
			<argument name="debuglevel" type="integer">0</argument>
          </init>
          <run type="dictionary">
          	<argument name="percent_active_development" type="integer">20</argument>
			<argument name="build_minimum_units" type="boolean">False</argument>
          </run>
        </structure>
        <specification type="dictionary"/>
      </model>
    </models>
  </model_manager>	
</opus_project>