<opus_project>
  <xml_version>2.0</xml_version>
  <general>
    <project_name type="string" hidden="True">mag_zone_v5b</project_name>
    <parent type="file">mag_zone/configs/mag_zone_base.xml</parent>
    <expression_library type="dictionary">
      <!-- Variables generated in GUI  -->
      <variable use="both" source="expression" name="mpa.mpa_total_population_srazmodel" type="variable_definition">mpa.aggregate(household.persons, intermediates=[super_raz])</variable>
      <variable use="both" source="expression" name="mpa.mpa_jobs_srazmodel" type="variable_definition">mpa.aggregate(job.job_id&gt;0, intermediates=[super_raz])</variable>
      <variable use="both" source="expression" name="super_raz.sraz_total_employment" type="variable_definition">super_raz.number_of_agents(job)</variable>
      <variable use="both" source="expression" name="super_raz.sraz_total_households" type="variable_definition">super_raz.number_of_agents(household)</variable>
      <variable use="both" source="expression" name="super_raz.sraz_total_population" type="variable_definition">super_raz.aggregate(household.persons)</variable>
      <variable use="both" source="expression" name="super_raz.sraz_num_office_jobs_per_acre" type="variable_definition">mag_zone.super_raz.number_of_office_jobs/super_raz.acres</variable>
      <variable use="both" source="expression" name="super_raz.sraz_num_industrial_jobs_per_acre" type="variable_definition">mag_zone.super_raz.number_of_industrial_jobs/super_raz.acres</variable>
      <variable use="both" source="expression" name="super_raz.sraz_household_density_per_acre" type="variable_definition">mag_zone.super_raz.number_of_households/super_raz.acres</variable>
      <variable use="both" source="expression" name="super_raz.sraz_non_home_based_job_density_per_acre" type="variable_definition">mag_zone.super_raz.number_of_nonhomebased_jobs/super_raz.acres</variable>
      <variable use="both" source="expression" name="super_raz.sraz_home_based_job_density_per_acre" type="variable_definition">mag_zone.super_raz.number_of_homebased_jobs/super_raz.acres</variable>
      <variable use="both" source="primary attribute" name="super_raz.sraz_is_very_rural" type="variable_definition">super_raz.is_very_rural</variable>
      <variable use="both" source="expression" name="super_raz.sraz_seasonal_pop" type="variable_definition">super_raz.aggregate(household.is_seasonal)</variable>
      <variable use="both" source="expression" name="super_raz.sraz_num_jobs_per_acre" type="variable_definition">mag_zone.super_raz.number_of_jobs/super_raz.acres</variable>
      <variable use="both" source="expression" name="super_raz.sraz_num_retail_jobs_per_acre" type="variable_definition">mag_zone.super_raz.number_of_jobs/super_raz.acres</variable>
      <variable use="both" source="primary attribute" name="super_raz.sraz_avg_income_quintile" type="variable_definition">super_raz.avg_income_quintile</variable>
      <variable use="both" source="expression" name="super_raz.sraz_pop_density_per_acre" type="variable_definition">mag_zone.super_raz.population/super_raz.acres</variable>
      <variable use="both" source="expression" name="super_raz.sraz_number_of_children" type="variable_definition">super_raz.aggregate(where(person.age&lt;17,1,0))</variable>
      <variable use="both" source="expression" name="super_raz.sraz_median_household_income" type="variable_definition">super_raz.aggregate(household.income,function=median)</variable>
      <variable use="both" source="primary attribute" name="super_raz.sraz_in_central_valley" type="variable_definition">super_raz.in_central_valley</variable>
      <variable use="both" source="expression" name="super_raz.sraz_avg_adult_education" type="variable_definition">super_raz.aggregate(mag_zone.person.is_adult*person.education,function=mean)</variable>
      <variable use="both" source="expression" name="raz2012.raz2012_num_hh_within_30mins_peak_sov" type="variable_definition">raz2012.aggregate(mag_zone.tazi03.number_of_households_within_30_peak_sov_tt_threshold,function=mean)</variable>
      <variable use="both" source="expression" name="raz2012.raz2012_num_office_jobs_within_30mins_peak_sov" type="variable_definition">raz2012.aggregate(mag_zone.tazi03.number_of_office_jobs_within_30_peak_sov_tt_threshold,function=mean)</variable>
      <variable use="both" source="expression" name="raz2012.raz2012_num_retail_jobs_within_30mins_peak_sov" type="variable_definition">raz2012.aggregate(mag_zone.tazi03.number_of_retail_jobs_within_30_peak_sov_tt_threshold,function=mean)</variable>
      <variable use="both" source="expression" name="raz2012.raz2012_num_industrial_jobs_within_30mins_peak_sov" type="variable_definition">raz2012.aggregate(mag_zone.tazi03.number_of_industrial_jobs_within_30_peak_sov_tt_threshold,function=mean)</variable>
      <variable use="both" source="expression" name="raz2012.raz_num_jobs_within_45mins_transit_combined" type="variable_definition">raz2012.aggregate(mag_zone.tazi03.number_of_jobs_within_45_transit_combined_tt_threshold,function=mean)</variable>
      <variable use="both" source="expression" name="raz2012.raz_num_jobs_within_30mins_hwy24" type="variable_definition">raz2012.aggregate(mag_zone.tazi03.number_of_jobs_within_30_hwytwentyfour_tt_threshold,function=mean)</variable>
      <variable use="both" source="primary attribute" name="raz2012.raz2012_avg_income_quintile" type="variable_definition">raz2012.avg_income_quintile</variable>
      <variable use="both" source="expression" name="raz2012.med_hh_inc_razmodel" type="variable_definition">raz2012.aggregate(household.income, function=median)</variable>
      <variable use="both" source="expression" name="raz2012.avg_hh_inc_razmodel" type="variable_definition">raz2012.aggregate(household.income, function=mean)</variable>
      <variable use="both" source="expression" name="raz2012.raz2012_jobs_razmodel" type="variable_definition">raz2012.aggregate(job.job_id&gt;0, intermediates=[raz2012])</variable>
      <variable use="both" source="expression" name="raz2012.raz2012_population_razmodel" type="variable_definition">raz2012.aggregate(household.persons)</variable>
      <variable use="both" source="expression" name="raz2012.non_home_based_job_density_per_acre" type="variable_definition">mag_zone.raz2012.number_of_nonhomebased_jobs/raz2012.acres</variable>
      <variable use="both" source="expression" name="raz2012.home_based_job_density_per_acre" type="variable_definition">mag_zone.raz2012.number_of_homebased_jobs/raz2012.acres</variable>
      <variable use="both" source="primary attribute" name="raz2012.acres" type="variable_definition">raz2012.acres</variable>
      <variable use="both" source="expression" name="raz2012.job_density_per_acre" type="variable_definition">mag_zone.raz2012.number_of_jobs/raz2012.acres</variable>
      <variable use="both" source="expression" name="raz2012.pop_density_per_acre" type="variable_definition">mag_zone.raz2012.population/raz2012.acres</variable>
      <variable use="both" source="expression" name="raz2012.proportion_hh_income_quint1" type="variable_definition">safe_array_divide((raz2012.aggregate(mag_zone.household.income_quintiles==1)),(mag_zone.raz2012.number_of_households))</variable>
      <variable use="both" source="expression" name="raz2012.proportion_hh_income_quint5" type="variable_definition">safe_array_divide((raz2012.aggregate(mag_zone.household.income_quintiles==5)),(mag_zone.raz2012.number_of_households))</variable>
      <variable use="both" source="primary attribute" name="raz2012.in_gila_bend" type="variable_definition">raz2012.in_gila_bend</variable>
      <variable use="both" source="primary attribute" name="raz2012.is_very_rural" type="variable_definition">raz2012.is_very_rural</variable>
      <variable use="both" source="primary attribute" name="raz2012.is_reservation_land" type="variable_definition">raz2012.is_reservation_land</variable>
      <variable use="both" source="primary attribute" name="raz2012.in_central_valley" type="variable_definition">raz2012.in_central_valley</variable>
      <variable use="both" source="primary attribute" name="raz2012.distance_to_cbd" type="variable_definition">raz2012.distance_to_cbd</variable>
      <variable use="both" source="expression" name="mpa.population_from_hh" type="variable_definition">mpa.aggregate(household.persons)</variable>
      <variable use="both" source="expression" name="raz2012.raz_pk_sov_access" type="variable_definition">raz2012.aggregate(zone.pop_pk_sov_access, function=mean)</variable>
      <variable use="both" source="Python class" name="household.income_quintiles" type="variable_definition">mag_zone.household.income_quintiles</variable>
      <variable use="both" source="expression" name="building.number_of_non_home_based_jobs" type="variable_definition">building.aggregate(job.home_based_status==0)</variable>
      <variable use="both" source="primary attribute" name="mpa.mpa_abbreviation" type="variable_definition">mpa.mpa_abbreviation</variable>
      <variable use="both" source="primary attribute" name="mpa.mpa_name" type="variable_definition">mpa.mpa_name</variable>
      <variable use="both" source="expression" name="mpa.mpa_vacant_residential_units_with_negatives" type="variable_definition">mpa.aggregate(building.residential_units - urbansim_zone.building.number_of_households)</variable>
      <variable use="both" source="Python class" name="mpa.test_6" type="variable_definition">mag_zone.mpa.population_with_at_least_masters_degree</variable>
      <variable use="both" source="Python class" name="taz2012.test_5" type="variable_definition">mag_zone.taz2012.number_of_entertainment_jobs</variable>
      <variable use="both" source="Python class" name="raz2012.test_4" type="variable_definition">mag_zone.raz2012.percent_hh_age_of_head_over_55</variable>
      <variable use="both" source="Python class" name="tazi03.test_3" type="variable_definition">mag_zone.tazi03.percent_hh_age_of_head_over_55</variable>
      <variable use="both" source="Python class" name="tazi03.pp_at_leaast_high_school" type="variable_definition">mag_zone.tazi03.number_of_persons_with_at_least_high_school_diploma</variable>
      <variable use="both" source="Python class" name="tazi03.public_jobs_local" type="variable_definition">mag_zone.tazi03.number_of_publocal_jobs</variable>
      <variable use="both" source="Python class" name="tazi03.public_jobs_fedst" type="variable_definition">mag_zone.tazi03.number_of_pubfedstate_jobs</variable>
      <variable use="both" source="Python class" name="tazi03.public_jobs" type="variable_definition">mag_zone.tazi03.number_of_public_jobs</variable>
      <variable use="both" source="Python class" name="tazi03.test_2" type="variable_definition">mag_zone.tazi03.number_of_retail_jobs_within_10_transit_combined_tt_threshold</variable>
      <variable use="both" source="expression" name="zone.test_1" type="variable_definition">zone.disaggregate(mag_zone.tazi03.number_of_jobs_within_10_transit_combined_tt_threshold)</variable>
      <variable use="both" source="Python class" name="tazi03.test" type="variable_definition">mag_zone.tazi03.number_of_jobs_within_10_transit_combined_tt_threshold</variable>
      <variable use="both" source="expression" name="mpa.med_hh_inc_razmodel" type="variable_definition">mpa.aggregate(household.income, function=median)</variable>
      <variable use="both" source="expression" name="mpa.avg_hh_inc_razmodel" type="variable_definition">mpa.aggregate(household.income, function=mean)</variable>
      <variable use="both" source="expression" name="mpa.mpa_jobs_razmodel" type="variable_definition">mpa.aggregate(job.job_id&gt;0, intermediates=[raz2012])</variable>
      <variable use="both" source="primary attribute" name="building.building_res_units" type="variable_definition">building.residential_units</variable>
      <variable use="both" source="expression" name="raz2012.raz2012_non_res_sqft" type="variable_definition">raz2012.aggregate(building.non_residential_sqft)</variable>
      <variable use="both" source="expression" name="raz2012.raz2012_total_job_space_capacity" type="variable_definition">raz2012.aggregate(numpy.round(safe_array_divide(building.non_residential_sqft_capacity, urbansim_zone.building.building_sqft_per_job)))</variable>
      <variable use="both" source="expression" name="raz2012.raz2012_total_job_spaces" type="variable_definition">raz2012.aggregate(urbansim_zone.building.total_job_spaces)</variable>
      <variable use="both" source="expression" name="raz2012.raz2012_non_residential_sqft_capacity" type="variable_definition">raz2012.aggregate(building.non_residential_sqft_capacity)</variable>
      <variable use="both" source="expression" name="raz2012.raz2012_residential_units_capacity" type="variable_definition">raz2012.aggregate(building.residential_units_capacity)</variable>
      <variable use="both" source="expression" name="raz2012.raz2012_vacant_residential_units_clipped_to_zero" type="variable_definition">raz2012.aggregate(urbansim_zone.building.vacant_residential_units)</variable>
      <variable use="both" source="expression" name="raz2012.raz2012_residential_units" type="variable_definition">raz2012.aggregate(building.residential_units)</variable>
      <variable use="both" source="expression" name="raz2012.raz2012_vacant_residential_units_with_negatives" type="variable_definition">raz2012.aggregate(mag_zone.building.vacant_residential_units_with_negatives)</variable>
      <variable use="both" source="expression" name="raz2012.raz2012_total_hb_job_spaces" type="variable_definition">raz2012.aggregate(mag_zone.building.total_home_based_job_spaces)</variable>
      <variable use="both" source="expression" name="raz2012.raz2012_total_nhb_job_spaces" type="variable_definition">raz2012.aggregate(mag_zone.building.total_non_home_based_job_spaces)</variable>
      <variable use="both" source="expression" name="raz2012.raz2012_vacant_nhb_job_spaces" type="variable_definition">raz2012.aggregate(mag_zone.building.vacant_non_home_based_job_spaces)</variable>
      <variable use="both" source="expression" name="raz2012.raz2012_vacant_hb_job_spaces" type="variable_definition">raz2012.aggregate(mag_zone.building.vacant_home_based_job_spaces)</variable>
      <variable use="both" source="expression" name="None.negative_vacant_non_home_based_job_spaces_plus25pct" type="variable_definition">negative_vacant_non_home_based_job_spaces*0.25</variable>
      <variable use="both" source="expression" name="building.negative_vacant_non_home_based_job_spaces" type="variable_definition">(urbansim_zone.building.total_non_home_based_job_spaces - urbansim_zone.building.number_of_non_home_based_jobs)&lt;0</variable>
      <variable use="both" source="Python class" name="building.zonal_tazi03_num_construction_jobs_within_20mins_transit_combined" type="variable_definition">ln(building.disaggregate(mag_zone.tazi03.number_of_construction_jobs_within_20_transit_combined_tt_threshold, intermediates = [zone]))</variable>
      <variable use="both" source="Python class" name="building.zonal_tazi03_num_construction_jobs_within_20mins_peak_sov" type="variable_definition">ln(building.disaggregate(mag_zone.tazi03.number_of_construction_jobs_within_20_peak_sov_tt_threshold,intermediates=[zone]))</variable>
      <variable use="both" source="Python class" name="building.zonal_tazi03_num_construction_jobs_within_10mins_offpeak_sov" type="variable_definition">ln(building.disaggregate(mag_zone.tazi03.number_of_construction_jobs_within_10_offpeak_sov_tt_threshold,intermediates = [zone]))</variable>
      <variable use="both" source="Python class" name="building.zonal_tazi03_num_construction_jobs_within_10mins_hwy24" type="variable_definition">ln(building.disaggregate(mag_zone.tazi03.number_of_construction_jobs_within_10_hwytwentyfour_tt_threshold,intermediates = [zone]))</variable>
      <variable use="both" source="Python class" name="building.zonal_tazi03_num_industrial_jobs_within_20mins_transit_combined" type="variable_definition">ln(building.disaggregate(mag_zone.tazi03.number_of_industrial_jobs_within_20_transit_combined_tt_threshold, intermediates = [zone]))</variable>
      <variable use="both" source="Python class" name="building.zonal_tazi03_num_industrial_jobs_within_20mins_peak_sov" type="variable_definition">ln(building.disaggregate(mag_zone.tazi03.number_of_industrial_jobs_within_20_peak_sov_tt_threshold,intermediates=[zone]))</variable>
      <variable use="both" source="Python class" name="building.zonal_tazi03_num_industrial_jobs_within_10mins_offpeak_sov" type="variable_definition">ln(building.disaggregate(mag_zone.tazi03.number_of_industrial_jobs_within_10_offpeak_sov_tt_threshold,intermediates = [zone]))</variable>
      <variable use="both" source="Python class" name="building.zonal_tazi03_num_industrial_jobs_within_10mins_hwy24" type="variable_definition">ln(building.disaggregate(mag_zone.tazi03.number_of_industrial_jobs_within_10_hwytwentyfour_tt_threshold,intermediates = [zone]))</variable>
      <variable use="both" source="Python class" name="building.zonal_tazi03_num_office_jobs_within_20mins_transit_combined" type="variable_definition">ln(building.disaggregate(mag_zone.tazi03.number_of_office_jobs_within_20_transit_combined_tt_threshold, intermediates = [zone]))</variable>
      <variable use="both" source="Python class" name="building.zonal_tazi03_num_office_jobs_within_20mins_peak_sov" type="variable_definition">ln(building.disaggregate(mag_zone.tazi03.number_of_office_jobs_within_20_peak_sov_tt_threshold,intermediates=[zone]))</variable>
      <variable use="both" source="Python class" name="building.zonal_tazi03_num_office_jobs_within_10mins_offpeak_sov" type="variable_definition">ln(building.disaggregate(mag_zone.tazi03.number_of_office_jobs_within_10_offpeak_sov_tt_threshold,intermediates = [zone]))</variable>
      <variable use="both" source="Python class" name="building.zonal_tazi03_num_office_jobs_within_10mins_hwy24" type="variable_definition">ln(building.disaggregate(mag_zone.tazi03.number_of_office_jobs_within_10_hwytwentyfour_tt_threshold,intermediates = [zone]))</variable>
      <variable use="both" source="Python class" name="building.zonal_tazi03_num_retail_jobs_within_20mins_hwy24" type="variable_definition">ln(building.disaggregate(mag_zone.tazi03.number_of_retail_jobs_within_20_hwytwentyfour_tt_threshold,intermediates = [zone]))</variable>
      <variable use="both" source="Python class" name="building.zonal_tazi03_num_retail_jobs_within_30mins_offpeak_sov" type="variable_definition">ln(building.disaggregate(mag_zone.tazi03.number_of_retail_jobs_within_30_offpeak_sov_tt_threshold,intermediates = [zone]))</variable>
      <variable use="both" source="Python class" name="building.zonal_tazi03_num_retail_jobs_within_45mins_peak_sov" type="variable_definition">ln(building.disaggregate(mag_zone.tazi03.number_of_retail_jobs_within_45_peak_sov_tt_threshold,intermediates=[zone]))</variable>
      <variable use="both" source="Python class" name="building.zonal_tazi03_num_retail_jobs_within_45mins_transit_combined" type="variable_definition">ln(building.disaggregate(mag_zone.tazi03.number_of_retail_jobs_within_45_transit_combined_tt_threshold, intermediates = [zone]))</variable>
      <variable use="both" source="Python class" name="building.zonal_tazi03_num_jobs_within_30mins_hwy24" type="variable_definition">ln(building.disaggregate(mag_zone.tazi03.number_of_jobs_within_30_hwytwentyfour_tt_threshold,intermediates = [zone]))</variable>
      <variable use="both" source="Python class" name="building.zonal_tazi03_num_kids_within_15mins_hwy24" type="variable_definition">ln(building.disaggregate(mag_zone.tazi03.number_of_children_within_15_hwytwentyfour_tt_threshold,intermediates = [zone]))</variable>
      <variable use="both" source="Python class" name="building.zonal_tazi03_num_pop_within_15mins_hwy24" type="variable_definition">ln(building.disaggregate(mag_zone.tazi03.number_of_pop_within_15_hwytwentyfour_tt_threshold,intermediates = [zone]))</variable>
      <variable use="both" source="Python class" name="building.zonal_tazi03_num_households_within_15mins_hwy24" type="variable_definition">ln(building.disaggregate(mag_zone.tazi03.number_of_households_within_15_hwytwentyfour_tt_threshold,intermediates = [zone]))</variable>
      <variable use="both" source="Python class" name="building.zonal_tazi03_num_jobs_within_45mins_transit_combined" type="variable_definition">ln(building.disaggregate(mag_zone.tazi03.number_of_jobs_within_45_transit_combined_tt_threshold, intermediates = [zone]))</variable>
      <variable use="both" source="Python class" name="building.zonal_tazi03_num_kids_within_30mins_transit_combined" type="variable_definition">ln(building.disaggregate(mag_zone.tazi03.number_of_children_within_30_transit_combined_tt_threshold, intermediates = [zone]))</variable>
      <variable use="both" source="Python class" name="building.zonal_tazi03_num_households_within_30mins_transit_combined" type="variable_definition">ln(building.disaggregate(mag_zone.tazi03.number_of_households_within_30_transit_combined_tt_threshold, intermediates = [zone]))</variable>
      <variable use="both" source="Python class" name="building.zonal_tazi03_num_pop_within_30mins_transit_combined" type="variable_definition">ln(building.disaggregate(mag_zone.tazi03.number_of_pop_within_30_transit_combined_tt_threshold, intermediates = [zone]))</variable>
      <variable use="both" source="Python class" name="building.zonal_tazi03_num_households_within_20mins_peak_sov" type="variable_definition">ln(building.disaggregate(mag_zone.tazi03.number_of_households_within_20_peak_sov_tt_threshold,intermediates=[zone]))</variable>
      <variable use="both" source="Python class" name="building.zonal_tazi03_num_households_within_15mins_offpeak_sov" type="variable_definition">ln(building.disaggregate(mag_zone.tazi03.number_of_households_within_15_offpeak_sov_tt_threshold,intermediates = [zone]))</variable>
      <variable use="both" source="Python class" name="building.zonal_tazi03_num_kids_within_20mins_peak_sov" type="variable_definition">ln(building.disaggregate(mag_zone.tazi03.number_of_children_within_20_peak_sov_tt_threshold,intermediates = [zone]))</variable>
      <variable use="both" source="Python class" name="building.zonal_tazi03_num_kids_within_15mins_offpeak_sov" type="variable_definition">ln(building.disaggregate(mag_zone.tazi03.number_of_children_within_15_offpeak_sov_tt_threshold,intermediates=[zone]))</variable>
      <variable use="both" source="Python class" name="building.zonal_tazi03_num_pop_within_20mins_peak_sov" type="variable_definition">ln(building.disaggregate(mag_zone.tazi03.number_of_pop_within_20_peak_sov_tt_threshold, intermediates = [zone]))</variable>
      <variable use="both" source="Python class" name="building.zonal_tazi03_num_pop_within_15mins_offpeak_sov" type="variable_definition">ln(building.disaggregate(mag_zone.tazi03.number_of_pop_within_15_offpeak_sov_tt_threshold,intermediates=[zone]))</variable>
      <variable use="both" source="Python class" name="building.zonal_tazi03_num_jobs_within_30mins_offpeak_sov" type="variable_definition">ln(building.disaggregate(mag_zone.tazi03.number_of_jobs_within_30_offpeak_sov_tt_threshold,intermediates = [zone]))</variable>
      <variable use="both" source="Python class" name="building.zonal_tazi03_num_jobs_within_45mins_peak_sov" type="variable_definition">ln(building.disaggregate(mag_zone.tazi03.number_of_jobs_within_45_peak_sov_tt_threshold,intermediates=[zone]))</variable>
      <variable use="both" source="expression" name="building.zonal_percent_high_income_hhlds" type="variable_definition">ln(building.disaggregate(mag_zone.zone.percent_high_income_households))</variable>
      <variable use="both" source="expression" name="building.zonal_percent_mid_income_hhlds" type="variable_definition">ln(building.disaggregate(mag_zone.zone.percent_mid_income_households))</variable>
      <variable use="both" source="expression" name="building.zonal_percent_low_income_hhlds" type="variable_definition">ln(building.disaggregate(mag_zone.zone.percent_low_income_households))</variable>
      <variable use="both" source="Python class" name="tazi03.zonal_tazi03_number_of_households" type="variable_definition">mag_zone.tazi03.number_of_households</variable>
      <variable use="both" source="Python class" name="tazi03.zonal_tazi03_number_of_children" type="variable_definition">mag_zone.tazi03.number_of_children</variable>
      <variable use="both" source="Python class" name="tazi03.zonal_tazi03_number_of_pop" type="variable_definition">mag_zone.tazi03.number_of_pop</variable>
      <variable use="both" source="Python class" name="tazi03.zonal_tazi03_number_of_jobs" type="variable_definition">mag_zone.tazi03.number_of_jobs</variable>
      <variable use="both" source="expression" name="building.zonal_num_constr_jobs_per_acre" type="variable_definition">ln(building.disaggregate((zone.aggregate(job.sector_id == 4)/zone.acres)))</variable>
      <variable use="both" source="expression" name="building.zonal_num_jobs_4" type="variable_definition">ln(building.disaggregate(zone.aggregate(numpy.logical_and(job.sector_id == 4, job.home_based_status == 0))))</variable>
      <variable use="both" source="expression" name="building.zonal_raz_ware_avg_unit_price_2" type="variable_definition">ln(building.disaggregate(safe_array_divide(raz2012.aggregate(where(building.building_type_id==6,building.average_value_per_unit,0)), raz2012.aggregate(where(building.building_type_id ==6, 1, 0)))))</variable>
      <variable use="both" source="expression" name="building.zonal_raz_ind_avg_unit_price_2" type="variable_definition">ln(building.disaggregate(safe_array_divide(raz2012.aggregate(where(building.building_type_id==7,building.average_value_per_unit,0)), raz2012.aggregate(where(building.building_type_id == 7, 1, 0)))))</variable>
      <variable use="both" source="expression" name="building.zonal_raz_retl_avg_unit_price_2" type="variable_definition">ln(building.disaggregate(safe_array_divide(raz2012.aggregate(where(building.building_type_id==4,building.average_value_per_unit,0)), raz2012.aggregate(where(building.building_type_id == 4, 1, 0)))))</variable>
      <variable use="both" source="expression" name="building.zonal_raz_off_avg_unit_price_2" type="variable_definition">ln(building.disaggregate(safe_array_divide(raz2012.aggregate(where(building.building_type_id==8,building.average_value_per_unit,0)), raz2012.aggregate(where(building.building_type_id ==8, 1, 0)))))</variable>
      <variable use="both" source="expression" name="building.zonal_raz_mf_avg_unit_price_2" type="variable_definition">ln(building.disaggregate(safe_array_divide(raz2012.aggregate(where(building.building_type_id==2,building.average_value_per_unit,0)), raz2012.aggregate(where(building.building_type_id ==2, 1, 0)))))</variable>
      <variable use="both" source="expression" name="building.zonal_raz_sf_avg_unit_price_2" type="variable_definition">ln(building.disaggregate(safe_array_divide(raz2012.aggregate(where(building.building_type_id==1,building.average_value_per_unit,0)), raz2012.aggregate(where(building.building_type_id ==1, 1, 0))))) </variable>
      <variable use="both" source="expression" name="building.zonal_raz_sf_avg_unit_price_1" type="variable_definition">ln(building.disaggregate(raz2012.aggregate(where(building.building_type_id==1,building.average_value_per_unit,0), intermediates = [zone],function = mean)))</variable>
      <variable use="both" source="expression" name="building.zonal_raz_sf_avg_unit_price" type="variable_definition">ln(building.disaggregate(raz2012.aggregate(where(building.building_type_id==1,building.average_value_per_unit,0), function = mean)))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_hotel_capacity" type="variable_definition">(building.other_space_name=='hotel')*(building.other_spaces)</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_is_public_local" type="variable_definition">building.building_type_id == 16</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_num_jobs_20" type="variable_definition">ln(building.aggregate(job.sector_id==20))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_num_jobs_22" type="variable_definition">ln(building.aggregate(job.sector_id==22))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_num_jobs_21" type="variable_definition">ln(building.aggregate(job.sector_id==21))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_public_local_unit_price" type="variable_definition">ln(where(building.building_type_id==14,building.average_value_per_unit,0))</variable>
      <variable use="both" source="expression" name="building.zonal_num_jobs_22" type="variable_definition">ln(building.disaggregate(zone.aggregate(job.sector_id == 22)))</variable>
      <variable use="both" source="expression" name="building.zonal_num_jobs_21" type="variable_definition">ln(building.disaggregate(zone.aggregate(job.sector_id == 21)))</variable>
      <variable use="both" source="expression" name="building.zonal_public_local_job_space_to_vac_ratio" type="variable_definition">ln(building.disaggregate(safe_array_divide(zone.aggregate(where(building.building_type_id == 16,urbansim_zone.building.total_job_spaces, 0)),zone.aggregate(where(building.building_type_id == 16,urbansim_zone.building.vacant_job_spaces,0)))))</variable>
      <variable use="both" source="expression" name="building.zonal_sector_22_fraction" type="variable_definition">ln(building.disaggregate(safe_array_divide((zone.aggregate(job.sector_id == 22)),zone.number_of_agents(job))))</variable>
      <variable use="both" source="expression" name="building.zonal_sector_21_fraction" type="variable_definition">ln(building.disaggregate(safe_array_divide((zone.aggregate(job.sector_id == 21)),zone.number_of_agents(job))))</variable>
      <variable use="both" source="primary attribute" name="household.hhld_income" type="variable_definition">household.income</variable>
      <variable use="both" source="Python class" name="household.hhld_income_type1" type="variable_definition">urbansim.household.is_income_1</variable>
      <variable use="both" source="expression" name="building.building_num_pub_jobs" type="variable_definition">building.aggregate(job.sector_id == 20)</variable>
      <variable use="both" source="primary attribute" name="building.building_non_res_sqft" type="variable_definition">building.non_residential_sqft</variable>
      <variable use="both" source="expression" name="building.testt1" type="variable_definition">mag_zone.building.num_of_pub_jobs + numpy.logical_and(building.building_type_id == 6, mag_zone.building.num_of_pub_jobs == 0)*(building.non_residential_sqft/50)</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_vacant_res_units_1" type="variable_definition">building.residential_units - building.number_of_agents(household)</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_vacant_res_units" type="variable_definition">urbansim_zone.building.vacant_residential_units</variable>
      <variable use="both" source="primary attribute" name="building.zonal_bldg_residential_units" type="variable_definition">building.residential_units</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_num_hhlds" type="variable_definition">building.number_of_agents(household)</variable>
      <variable use="both" source="expression" name="building.test_jobs_in_building" type="variable_definition">urbansim.building.number_of_jobs_of_sector_20</variable>
      <variable use="both" source="expression" name="building.test" type="variable_definition">building.disaggregate(development_project.non_residential_sqft)</variable>
      <variable use="both" source="expression" name="building.zonal_avg_hh_income_safearray" type="variable_definition">(building.disaggregate(safe_array_divide(zone.aggregate(household.income,intermediates=[building]),zone.number_of_agents(household))))</variable>
      <variable use="both" source="expression" name="building.zonal_is_in_SC" type="variable_definition">building.disaggregate(zone.disaggregate(mpa.mpa_id == 4))</variable>
      <variable use="both" source="expression" name="building.zonal_is_in_PA" type="variable_definition">building.disaggregate(zone.disaggregate(mpa.mpa_id == 5))</variable>
      <variable use="both" source="expression" name="building.zonal_sector_20_fraction" type="variable_definition">ln(building.disaggregate(safe_array_divide((zone.aggregate(job.sector_id == 20)),zone.number_of_agents(job))))</variable>
      <variable use="both" source="expression" name="building.zonal_num_jobs_20" type="variable_definition">ln(building.disaggregate(zone.aggregate(job.sector_id == 20)))</variable>
      <variable use="both" source="Python class" name="household.hhld_income_category" type="variable_definition">urbansim.household.income_category</variable>
      <variable use="both" source="expression" name="building.zonal_avg_hh_income_1" type="variable_definition">(building.disaggregate(zone.aggregate(household.income, intermediates=[building],function = mean)))</variable>
      <variable use="both" source="expression" name="building.zonal_is_value_low" type="variable_definition">building.disaggregate(zone.value_indicator) == 1</variable>
      <variable use="both" source="expression" name="building.zonal_is_value_high" type="variable_definition">building.disaggregate(zone.value_indicator) == 2</variable>
      <variable use="both" source="expression" name="building.network_length_majorrd_zone" type="variable_definition">(building.disaggregate(zone.network_length_majorrd))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_civic_unit_price" type="variable_definition">ln(where(building.building_type_id==11,building.average_value_per_unit,0))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_hotel_unit_price" type="variable_definition">ln(where(building.building_type_id==10,building.average_value_per_unit,0))</variable>
      <variable use="both" source="expression" name="building.zonal_hotel_job_space_to_vac_ratio" type="variable_definition">ln(building.disaggregate(safe_array_divide(zone.aggregate(where(building.building_type_id == 10,urbansim_zone.building.total_job_spaces, 0)),zone.aggregate(where(building.building_type_id == 10,urbansim_zone.building.vacant_job_spaces,0)))))</variable>
      <variable use="both" source="expression" name="building.zonal_civic_job_space_to_vac_ratio" type="variable_definition">ln(building.disaggregate(safe_array_divide(zone.aggregate(where(building.building_type_id == 8,urbansim_zone.building.total_job_spaces, 0)),zone.aggregate(where(building.building_type_id == 8,urbansim_zone.building.vacant_job_spaces,0)))))</variable>
      <variable use="both" source="expression" name="building.zonal_num_children_per_acre" type="variable_definition">ln(building.disaggregate(safe_array_divide(zone.aggregate(household.children), zone.acres)))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_educational_unit_price" type="variable_definition">ln(where(building.building_type_id==12,building.average_value_per_unit,0))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_medical_unit_price" type="variable_definition">ln(where(building.building_type_id==9,building.average_value_per_unit,0))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_public_unit_price" type="variable_definition">ln(where(building.building_type_id==14,building.average_value_per_unit,0))</variable>
      <variable use="both" source="expression" name="building.zonal_medical_job_space_to_vac_ratio" type="variable_definition">ln(building.disaggregate(safe_array_divide(zone.aggregate(where(building.building_type_id == 9,urbansim_zone.building.total_job_spaces, 0)),zone.aggregate(where(building.building_type_id == 9,urbansim_zone.building.vacant_job_spaces,0)))))</variable>
      <variable use="both" source="expression" name="building.zonal_educational_job_space_to_vac_ratio" type="variable_definition">ln(building.disaggregate(safe_array_divide(zone.aggregate(where(building.building_type_id == 9,urbansim_zone.building.total_job_spaces, 0)),zone.aggregate(where(building.building_type_id == 9,urbansim_zone.building.vacant_job_spaces,0)))))</variable>
      <variable use="both" source="expression" name="building.zonal_public_job_space_to_vac_ratio" type="variable_definition">ln(building.disaggregate(safe_array_divide(zone.aggregate(where(building.building_type_id == 14,urbansim_zone.building.total_job_spaces, 0)),zone.aggregate(where(building.building_type_id == 14,urbansim_zone.building.vacant_job_spaces,0)))))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_transportation_unit_price" type="variable_definition">ln(where(building.building_type_id==18,building.average_value_per_unit,0))</variable>
      <variable use="both" source="expression" name="building.zonal_transportation_job_space_to_vac_ratio" type="variable_definition">ln(building.disaggregate(safe_array_divide(zone.aggregate(where(building.building_type_id == 18,urbansim_zone.building.total_job_spaces, 0)),zone.aggregate(where(building.building_type_id == 18,urbansim_zone.building.vacant_job_spaces,0)))))</variable>
      <variable use="both" source="expression" name="building.zonal_sector_19_fraction" type="variable_definition">ln(building.disaggregate(safe_array_divide((zone.aggregate(job.sector_id == 19)),zone.number_of_agents(job))))</variable>
      <variable use="both" source="expression" name="building.zonal_sector_18_fraction" type="variable_definition">ln(building.disaggregate(safe_array_divide((zone.aggregate(job.sector_id == 18)),zone.number_of_agents(job))))</variable>
      <variable use="both" source="expression" name="building.zonal_sector_17_fraction" type="variable_definition">ln(building.disaggregate(safe_array_divide((zone.aggregate(job.sector_id == 17)),zone.number_of_agents(job))))</variable>
      <variable use="both" source="expression" name="building.zonal_sector_16_fraction" type="variable_definition">ln(building.disaggregate(safe_array_divide((zone.aggregate(job.sector_id == 16)),zone.number_of_agents(job))))</variable>
      <variable use="both" source="expression" name="building.zonal_sector_15_fraction" type="variable_definition">ln(building.disaggregate(safe_array_divide((zone.aggregate(job.sector_id == 15)),zone.number_of_agents(job))))</variable>
      <variable use="both" source="expression" name="building.zonal_sector_14_fraction" type="variable_definition">ln(building.disaggregate(safe_array_divide((zone.aggregate(job.sector_id == 14)),zone.number_of_agents(job))))</variable>
      <variable use="both" source="expression" name="building.zonal_sector_13_fraction" type="variable_definition">ln(building.disaggregate(safe_array_divide((zone.aggregate(job.sector_id == 13)),zone.number_of_agents(job))))</variable>
      <variable use="both" source="expression" name="building.zonal_sector_12_fraction" type="variable_definition">ln(building.disaggregate(safe_array_divide((zone.aggregate(job.sector_id == 12)),zone.number_of_agents(job))))</variable>
      <variable use="both" source="expression" name="building.zonal_sector_11_fraction" type="variable_definition">ln(building.disaggregate(safe_array_divide((zone.aggregate(job.sector_id ==11)),zone.number_of_agents(job))))</variable>
      <variable use="both" source="expression" name="building.zonal_sector_10_fraction" type="variable_definition">ln(building.disaggregate(safe_array_divide((zone.aggregate(job.sector_id == 10)),zone.number_of_agents(job))))</variable>
      <variable use="both" source="expression" name="building.zonal_sector_9_fraction" type="variable_definition">ln(building.disaggregate(safe_array_divide((zone.aggregate(job.sector_id == 9)),zone.number_of_agents(job))))</variable>
      <variable use="both" source="expression" name="building.zonal_sector_8_fraction" type="variable_definition">ln(building.disaggregate(safe_array_divide((zone.aggregate(job.sector_id == 8)),zone.number_of_agents(job))))</variable>
      <variable use="both" source="expression" name="building.zonal_sector_7_fraction" type="variable_definition">ln(building.disaggregate(safe_array_divide((zone.aggregate(job.sector_id == 7)),zone.number_of_agents(job))))</variable>
      <variable use="both" source="expression" name="building.zonal_sector_6_fraction" type="variable_definition">ln(building.disaggregate(safe_array_divide((zone.aggregate(job.sector_id == 6)),zone.number_of_agents(job))))</variable>
      <variable use="both" source="expression" name="building.zonal_sector_5_fraction" type="variable_definition">ln(building.disaggregate(safe_array_divide((zone.aggregate(job.sector_id == 5)),zone.number_of_agents(job))))</variable>
      <variable use="both" source="expression" name="building.zonal_sector_3_fraction" type="variable_definition">ln(building.disaggregate(safe_array_divide((zone.aggregate(job.sector_id == 3)),zone.number_of_agents(job))))</variable>
      <variable use="both" source="expression" name="building.zonal_sector_2_fraction" type="variable_definition">ln(building.disaggregate(safe_array_divide((zone.aggregate(job.sector_id == 2)),zone.number_of_agents(job))))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_agriculture_unit_price" type="variable_definition">ln(where(building.building_type_id==17,building.average_value_per_unit,0))</variable>
      <variable use="both" source="expression" name="building.zonal_agriculturel_job_space_to_vac_ratio" type="variable_definition">ln(building.disaggregate(safe_array_divide(zone.aggregate(where(building.building_type_id == 17,urbansim_zone.building.total_job_spaces, 0)),zone.aggregate(where(building.building_type_id == 17,urbansim_zone.building.vacant_job_spaces,0)))))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_is_transportation" type="variable_definition">building.building_type_id == 18</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_is_agriculture" type="variable_definition">building.building_type_id == 17</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_is_hotel" type="variable_definition">building.building_type_id == 10</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_is_public" type="variable_definition">building.building_type_id == 14</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_is_medical" type="variable_definition">building.building_type_id == 9</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_is_gq" type="variable_definition">building.building_type_id == 13</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_is_education" type="variable_definition">building.building_type_id == 12</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_is_civic" type="variable_definition">building.building_type_id == 11</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_is_retail" type="variable_definition">building.building_type_id == 4</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_is_office" type="variable_definition">building.building_type_id == 8</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_is_industrial" type="variable_definition">building.building_type_id == 7</variable>
      <variable use="both" source="expression" name="building.zonal_sector_1_fraction" type="variable_definition">ln(building.disaggregate(safe_array_divide((zone.aggregate(job.sector_id == 1)),zone.number_of_agents(job))))</variable>
      <variable use="both" source="primary attribute" name="building.zonal_bldg_sqft_per_unit_1" type="variable_definition">building.sqft_per_unit</variable>
      <variable use="both" source="expression" name="household_x_building.zonal_hhld_size_x_bldg_sqft_per_unit" type="variable_definition">household.persons*building.sqft_per_unit</variable>
      <variable use="both" source="expression" name="building.zonal_ln_avg_res_sqft_per_person" type="variable_definition">building.disaggregate(ln(zone.aggregate(safe_array_divide(building.sqft_per_unit,building.aggregate(household.persons))+0, function=mean)))</variable>
      <variable use="both" source="expression" name="building.zonal_avg_res_sqft_per_person" type="variable_definition">building.disaggregate(zone.aggregate(safe_array_divide(building.sqft_per_unit,building.aggregate(household.persons))+0, function=mean))</variable>
      <variable use="both" source="expression" name="building.zonal_ln_avg_persons_per_hhld" type="variable_definition">ln(building.disaggregate(zone.aggregate(household.persons+0, intermediates=[building],function=mean)))</variable>
      <variable use="both" source="expression" name="building.zonal_avg_persons_per_hhld" type="variable_definition">building.disaggregate(zone.aggregate(household.persons+0, intermediates=[building],function=mean))</variable>
      <variable use="both" source="expression" name="household_x_building.zonal_bldg_ln_price_hhld_income_ratio" type="variable_definition">ln(safe_array_divide(building.average_value_per_unit, household.income))</variable>
      <variable use="both" source="expression" name="household_x_building.zonal_bldg_price_hhld_income_ratio" type="variable_definition">safe_array_divide(building.average_value_per_unit, household.income)</variable>
      <variable use="both" source="expression" name="household.zonal_ln_hhld_size" type="variable_definition">ln(household.persons)</variable>
      <variable use="both" source="expression" name="household_x_building.zonal_one_pers_x_non_sfr" type="variable_definition">(household.persons&lt;2)*numpy.logical_not(building.building_type_id == 1)</variable>
      <variable use="both" source="expression" name="household_x_building.zonal_ln_hhld_inc_x_is_RMF" type="variable_definition">ln(household.income)*(building.building_type_id == 2)</variable>
      <variable use="both" source="primary attribute" name="household.zonal_hhld_size" type="variable_definition">household.persons</variable>
      <variable use="both" source="expression" name="building.zonal_average_value_per_unit" type="variable_definition">building.average_value_per_unit</variable>
      <variable use="both" source="expression" name="household_x_building.zonal_ln_hhld_size_x_bldg_sqft_per_unit" type="variable_definition">ln(household.persons*building.sqft_per_unit)</variable>
      <variable use="both" source="expression" name="building.zonal_vac_office_job_spaces_per_acre" type="variable_definition">ln(building.disaggregate(zone.aggregate(where(building.building_type_id == 8,urbansim_zone.building.vacant_job_spaces,0))/zone.acres))</variable>
      <variable use="both" source="expression" name="building.zonal_office_job_space_to_vac_ratio" type="variable_definition">ln(building.disaggregate(safe_array_divide(zone.aggregate(where(building.building_type_id == 8,urbansim_zone.building.total_job_spaces, 0)),zone.aggregate(where(building.building_type_id == 8,urbansim_zone.building.vacant_job_spaces,0)))))</variable>
      <variable use="both" source="expression" name="building.zonal_office_sqft_to_capacity_ratio" type="variable_definition">ln(building.disaggregate(safe_array_divide(zone.aggregate(where(building.building_type_id == 8, urbansim_zone.building.non_residential_sqft,0)),zone.aggregate(where(building.building_type_id == 8,urbansim_zone.building.non_residential_sqft_capacity, 0)))))</variable>
      <variable use="both" source="expression" name="building.zonal_total_office_job_space_per_acre" type="variable_definition">ln(building.disaggregate(safe_array_divide(zone.aggregate(where(building.building_type_id == 8,urbansim_zone.building.total_job_spaces, 0)), zone.acres)))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_office_unit_price" type="variable_definition">ln(where(building.building_type_id==8,building.average_value_per_unit,0))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_developable_office_sqft_capacity" type="variable_definition">ln(where(building.building_type_id == 8,urbansim_zone.building.developable_non_residential_sqft_capacity,0))</variable>
      <variable use="both" source="expression" name="building.zonal_num_office_jobs_per_acre" type="variable_definition">ln(building.disaggregate((zone.aggregate(job.sector_id == 9)+ zone.aggregate(job.sector_id == 10) + zone.aggregate(job.sector_id == 11)+ zone.aggregate(job.sector_id == 13))/zone.acres))</variable>
      <variable use="both" source="expression" name="building.zonal_vac_industrial_job_spaces_per_acre" type="variable_definition">ln(building.disaggregate(zone.aggregate(where(building.building_type_id == 7,urbansim_zone.building.vacant_job_spaces,0))/zone.acres))</variable>
      <variable use="both" source="expression" name="building.zonal_industrial_job_space_to_vac_ratio" type="variable_definition">ln(building.disaggregate(safe_array_divide(zone.aggregate(where(building.building_type_id == 7,urbansim_zone.building.total_job_spaces, 0)),zone.aggregate(where(building.building_type_id == 7,urbansim_zone.building.vacant_job_spaces,0)))))</variable>
      <variable use="both" source="expression" name="building.zonal_industrial_sqft_to_capacity_ratio" type="variable_definition">ln(building.disaggregate(safe_array_divide(zone.aggregate(where(building.building_type_id == 7, urbansim_zone.building.non_residential_sqft,0)),zone.aggregate(where(building.building_type_id == 7,urbansim_zone.building.non_residential_sqft_capacity, 0)))))</variable>
      <variable use="both" source="expression" name="building.zonal_total_industrial_job_space_per_acre" type="variable_definition">ln(building.disaggregate(safe_array_divide(zone.aggregate(where(building.building_type_id == 7,urbansim_zone.building.total_job_spaces, 0)), zone.acres)))</variable>
      <variable use="both" source="expression" name="building.zonal_total_retail_job_space_per_acre" type="variable_definition">ln(building.disaggregate(safe_array_divide(zone.aggregate(where(building.building_type_id == 4,urbansim_zone.building.total_job_spaces, 0)), zone.acres)))</variable>
      <variable use="both" source="expression" name="building.zonal_num_industrial_jobs_per_acre" type="variable_definition">ln(building.disaggregate((zone.aggregate(job.sector_id == 8)+ zone.aggregate(job.sector_id == 6) + zone.aggregate(job.sector_id == 5))/zone.acres))</variable>
      <variable use="both" source="expression" name="building.zonal_vac_retail_job_spaces_per_acre" type="variable_definition">ln(building.disaggregate(zone.aggregate(where(building.building_type_id == 4,urbansim_zone.building.vacant_job_spaces,0))/zone.acres))</variable>
      <variable use="both" source="expression" name="building.zonal_retail_sqft_to_capacity_ratio" type="variable_definition">ln(building.disaggregate(safe_array_divide(zone.aggregate(where(building.building_type_id == 4, urbansim_zone.building.non_residential_sqft,0)),zone.aggregate(where(building.building_type_id == 4,urbansim_zone.building.non_residential_sqft_capacity, 0)))))</variable>
      <variable use="both" source="expression" name="building.zonal_retail_job_space_to_vac_ratio" type="variable_definition">ln(building.disaggregate(safe_array_divide(zone.aggregate(where(building.building_type_id == 4,urbansim_zone.building.total_job_spaces, 0)),zone.aggregate(where(building.building_type_id == 4,urbansim_zone.building.vacant_job_spaces,0)))))</variable>
      <variable use="both" source="expression" name="building.zonal_num_retail_jobs_per_acre" type="variable_definition">ln(building.disaggregate(zone.aggregate(job.sector_id == 7)/zone.acres))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_industrial_unit_price" type="variable_definition">ln(where(building.building_type_id==7,building.average_value_per_unit,0))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_developable_industrial_sqft_capacity" type="variable_definition">ln(where(building.building_type_id == 7,urbansim_zone.building.developable_non_residential_sqft_capacity,0))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_retail_unit_price" type="variable_definition">ln(where(building.building_type_id==4,building.average_value_per_unit,0))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_developable_retaill_sqft_capacity" type="variable_definition">ln(where(building.building_type_id == 4,urbansim_zone.building.developable_non_residential_sqft_capacity,0))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_developable_mf_residential_units_capacity" type="variable_definition">ln(where(building.building_type_id == 2,urbansim_zone.building.developable_residential_units_capacity,0))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_developable_sf_residential_units_capacity" type="variable_definition">ln(where(building.building_type_id == 1,urbansim_zone.building.developable_residential_units_capacity,0))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_mf_units" type="variable_definition">ln(where(building.building_type_id==2,building.residential_units,0))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_sf_units" type="variable_definition">ln(where(building.building_type_id==1,building.residential_units,0))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_sf_unit_price" type="variable_definition">ln(where(building.building_type_id==1,building.average_value_per_unit,0))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_mf_unit_price" type="variable_definition">ln(where(building.building_type_id==2,building.average_value_per_unit,0))</variable>
      <variable use="both" source="expression" name="building.zonal_avg_hh_income" type="variable_definition">ln(building.disaggregate(zone.aggregate(household.income, function = mean)))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_avg_year_built" type="variable_definition">ln(building.year_built)</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_res_to_vac_ratio" type="variable_definition">ln(safe_array_divide((building.residential_units),(urbansim_zone.building.vacant_residential_units)))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_res_to_capacity_ratio" type="variable_definition">ln(safe_array_divide((urbansim_zone.building.residential_units),(urbansim_zone.building.residential_units_capacity)))</variable>
      <variable use="both" source="primary attribute" name="building.zonal_bldg_bldg_typeID" type="variable_definition">building.building_type_id</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_land_per_unit" type="variable_definition">ln_bounded(safe_array_divide(building.residential_units, building.land_area))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_far" type="variable_definition">ln_bounded(safe_array_divide(building.non_residential_sqft, building.land_area))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_avg_hh_income" type="variable_definition">ln(building.aggregate(household.income, function = mean))</variable>
      <variable use="both" source="expression" name="building.zonal_network_length_majorrd" type="variable_definition">ln(building.disaggregate(zone.network_length_majorrd))</variable>
      <variable use="both" source="expression" name="building.zonal_network_length_localrd" type="variable_definition">ln(building.disaggregate(zone.network_length_localrd))</variable>
      <variable use="both" source="expression" name="building.zonal_network_length_highway" type="variable_definition">ln(building.disaggregate(zone.network_length_highway))</variable>
      <variable use="both" source="expression" name="building.zonal_network_length_freeway" type="variable_definition">ln(building.disaggregate(zone.network_length_freeway))</variable>
      <variable use="both" source="expression" name="building.zonal_sqft_per_unit" type="variable_definition">ln(building.disaggregate(zone.aggregate(where(building.building_type_id &lt; 4, building.sqft_per_unit, 0),function=mean)))</variable>
      <variable use="both" source="expression" name="building.zonal_num_jobs_6" type="variable_definition">ln(building.disaggregate(zone.aggregate(job.sector_id == 6)))</variable>
      <variable use="both" source="expression" name="building.zonal_num_jobs_5" type="variable_definition">ln(building.disaggregate(zone.aggregate(job.sector_id == 5)))</variable>
      <variable use="both" source="expression" name="building.zonal_num_jobs_3" type="variable_definition">ln(building.disaggregate(zone.aggregate(job.sector_id == 3)))</variable>
      <variable use="both" source="expression" name="building.zonal_num_jobs_2" type="variable_definition">ln(building.disaggregate(zone.aggregate(job.sector_id == 2)))</variable>
      <variable use="both" source="expression" name="building.zonal_num_jobs_19" type="variable_definition">ln(building.disaggregate(zone.aggregate(job.sector_id == 19)))</variable>
      <variable use="both" source="expression" name="building.zonal_num_jobs_18" type="variable_definition">ln(building.disaggregate(zone.aggregate(job.sector_id == 18)))</variable>
      <variable use="both" source="expression" name="building.zonal_num_jobs_17" type="variable_definition">ln(building.disaggregate(zone.aggregate(job.sector_id == 17)))</variable>
      <variable use="both" source="expression" name="building.zonal_num_jobs_16" type="variable_definition">ln(building.disaggregate(zone.aggregate(job.sector_id == 16)))</variable>
      <variable use="both" source="expression" name="building.zonal_num_jobs_15" type="variable_definition">ln(building.disaggregate(zone.aggregate(job.sector_id == 15)))</variable>
      <variable use="both" source="expression" name="building.zonal_num_jobs_14" type="variable_definition">ln(building.disaggregate(zone.aggregate(job.sector_id == 14)))</variable>
      <variable use="both" source="expression" name="building.zonal_num_jobs_13" type="variable_definition">ln(building.disaggregate(zone.aggregate(job.sector_id == 13)))</variable>
      <variable use="both" source="expression" name="building.zonal_num_jobs_12" type="variable_definition">ln(building.disaggregate(zone.aggregate(job.sector_id == 12)))</variable>
      <variable use="both" source="expression" name="building.zonal_num_jobs_11" type="variable_definition">ln(building.disaggregate(zone.aggregate(job.sector_id == 11)))</variable>
      <variable use="both" source="expression" name="building.zonal_num_jobs_10" type="variable_definition">ln(building.disaggregate(zone.aggregate(job.sector_id == 10)))</variable>
      <variable use="both" source="expression" name="building.zonal_num_jobs_1" type="variable_definition">ln(building.disaggregate(zone.aggregate(job.sector_id == 1)))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_vac_res_units" type="variable_definition">ln(urbansim_zone.building.vacant_residential_units)</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_res_units" type="variable_definition">ln(urbansim_zone.building.residential_units)</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_num_jobs_9" type="variable_definition">ln(building.aggregate(job.sector_id==9))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_num_jobs_8" type="variable_definition">ln(building.aggregate(job.sector_id==8))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_num_jobs_7" type="variable_definition">ln(building.aggregate(job.sector_id == 7))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_num_jobs_6" type="variable_definition">ln(building.aggregate(job.sector_id==6))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_num_jobs_5" type="variable_definition">ln(building.aggregate(job.sector_id==5))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_num_jobs_3" type="variable_definition">ln(building.aggregate(job.sector_id==3))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_num_jobs_2" type="variable_definition">ln(building.aggregate(job.sector_id==2))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_num_jobs_19" type="variable_definition">ln(building.aggregate(job.sector_id==19))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_num_jobs_18" type="variable_definition">ln(building.aggregate(job.sector_id==18))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_num_jobs_17" type="variable_definition">ln(building.aggregate(job.sector_id==17))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_num_jobs_16" type="variable_definition">ln(building.aggregate(job.sector_id==16))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_num_jobs_15" type="variable_definition">ln(building.aggregate(job.sector_id==15))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_num_jobs_14" type="variable_definition">ln(building.aggregate(job.sector_id==14))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_num_jobs_13" type="variable_definition">ln(building.aggregate(job.sector_id==13))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_num_jobs_12" type="variable_definition">ln(building.aggregate(job.sector_id==12))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_num_jobs_11" type="variable_definition">ln(building.aggregate(job.sector_id==11))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_num_jobs_10" type="variable_definition">ln(building.aggregate(job.sector_id==10))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_num_jobs_1" type="variable_definition">ln(building.aggregate(job.sector_id==1))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_num_jobs" type="variable_definition">ln(urbansim_zone.building.number_of_non_home_based_jobs)</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_num_hh" type="variable_definition">ln(urbansim_zone.building.number_of_households)</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_nonres_to_capacity_ratio" type="variable_definition">ln(safe_array_divide((urbansim_zone.building.non_residential_sqft),(urbansim_zone.building.non_residential_sqft_capacity)))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_job_space_to_vac_ratio" type="variable_definition">ln(safe_array_divide((urbansim_zone.building.total_job_spaces),(urbansim_zone.building.vacant_job_spaces)))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_developable_residential_units_capacity" type="variable_definition">ln(urbansim_zone.building.developable_residential_units_capacity)</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_developable_non_residential_sqft_capacity" type="variable_definition">ln(urbansim_zone.building.developable_non_residential_sqft_capacity)</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_vac_job_spaces_per_acre" type="variable_definition">ln(building.disaggregate(zone.aggregate(urbansim_zone.building.vacant_job_spaces)/zone.acres))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_toal_job_spaces_per_acre" type="variable_definition">ln(building.disaggregate(zone.aggregate(urbansim_zone.building.total_job_spaces)/zone.acres))</variable>
      <variable use="both" source="expression" name="building.zonal_job_space_to_vac_ratio" type="variable_definition">ln(building.disaggregate(safe_array_divide(zone.aggregate(urbansim_zone.building.total_job_spaces),zone.aggregate(urbansim_zone.building.vacant_job_spaces))))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_vacant_job_spaces" type="variable_definition">ln(urbansim_zone.building.vacant_job_spaces)</variable>
      <variable use="both" source="expression" name="building.zonal_ln_average_value_per_unit" type="variable_definition">ln(building.average_value_per_unit)</variable>
      <variable use="both" source="expression" name="building.zonal_num_jobs_8" type="variable_definition">ln(building.disaggregate(zone.aggregate(job.sector_id == 8)))</variable>
      <variable use="both" source="expression" name="zone.zonal_vac_job_spaces_per_acre" type="variable_definition">zone.aggregate(urbansim_zone.building.vacant_job_spaces)/zone.acres</variable>
      <variable use="both" source="expression" name="zone.zonal_toal_job_spaces_per_acre" type="variable_definition">zone.aggregate(urbansim_zone.building.total_job_spaces)/zone.acres</variable>
      <variable use="both" source="expression" name="building.zonal_num_hhlds_per_acre" type="variable_definition">ln(building.disaggregate(zone.number_of_agents(household)/zone.acres))</variable>
      <variable use="both" source="expression" name="building.zonal_nonres_to_capacity_ratio" type="variable_definition">ln(building.disaggregate(safe_array_divide(zone.aggregate(urbansim_zone.building.non_residential_sqft),zone.aggregate(urbansim_zone.building.non_residential_sqft_capacity))))</variable>
      <variable use="both" source="expression" name="building.zonal_res_to_capacity_ratio" type="variable_definition">ln(building.disaggregate(safe_array_divide(zone.aggregate(building.residential_units),zone.aggregate(building.residential_units_capacity))))</variable>
      <variable use="both" source="expression" name="building.zonal_res_to_vac_ratio" type="variable_definition">ln(building.disaggregate(safe_array_divide(zone.aggregate(building.residential_units),zone.aggregate(urbansim_zone.building.vacant_residential_units))))</variable>
      <variable use="both" source="expression" name="building.zonal_vac_res_units_per_acre" type="variable_definition">ln(building.disaggregate(zone.aggregate(urbansim_zone.building.vacant_residential_units)/zone.acres))</variable>
      <variable use="both" source="expression" name="building.zonal_res_units_per_acre" type="variable_definition">ln(building.disaggregate(zone.aggregate(urbansim_zone.building.residential_units)/zone.acres))</variable>
      <variable use="both" source="expression" name="building.zonal_num_pops_per_acre" type="variable_definition">ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))</variable>
      <variable use="both" source="expression" name="building.zonal_num_jobs_per_acre" type="variable_definition">ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))</variable>
      <variable use="both" source="expression" name="building.zonal_pop_ofp_sov_access" type="variable_definition">ln(building.disaggregate(zone.pop_ofp_sov_access))</variable>
      <variable use="both" source="expression" name="building.zonal_pop_pk_sov_access" type="variable_definition">ln(building.disaggregate(zone.pop_pk_sov_access))</variable>
      <variable use="both" source="expression" name="building.zonal_emp_ofp_sov_access" type="variable_definition">ln(building.disaggregate(zone.emp_ofp_sov_access))</variable>
      <variable use="both" source="expression" name="building.zonal_emp_pk_sov_access" type="variable_definition">ln(building.disaggregate(zone.emp_pk_sov_access))</variable>
      <variable use="both" source="expression" name="building.zonal_freeway_within_qtr_mile" type="variable_definition">ln(building.disaggregate(zone.freeway_within_qtr_mile))</variable>
      <variable use="both" source="expression" name="building.zonal_bldg_sqft_per_unit" type="variable_definition">ln(building.sqft_per_unit)</variable>
      <variable use="both" source="expression" name="building.zonal_num_jobs_9" type="variable_definition">ln(building.disaggregate(zone.aggregate(job.sector_id == 9)))</variable>
      <variable use="both" source="expression" name="building.zonal_num_jobs_7" type="variable_definition">ln(building.disaggregate(zone.aggregate(job.sector_id == 7)))</variable>
      <variable use="both" source="expression" name="building.zonal_num_jobs" type="variable_definition">ln(building.disaggregate(zone.number_of_agents(job)))</variable>
      <variable use="both" source="expression" name="building.zonal_num_hh" type="variable_definition">ln(building.disaggregate(zone.number_of_agents(household)))</variable>
      <variable use="both" source="expression" name="building.zonal_phoenix_cbd_distance" type="variable_definition">ln(building.disaggregate(zone.dist_to_phx_cbd))</variable>
      <!-- Variables generated from script  -->
      <variable use="both" source="expression" name="building.skyharbor_enplanement_capacity" type="variable_definition">(building.other_space_name=='skyharbor')*(building.other_spaces)</variable>
      <variable use="both" source="expression" name="building.williamsgateway_enplanement_capacity" type="variable_definition">(building.other_space_name=='williamsgateway')*(building.other_spaces)</variable>
      <variable use="both" source="expression" name="building.hotel_motel_rooms" type="variable_definition">(building.other_space_name=='hotel_motel_rooms')*(building.other_spaces)</variable>
      <variable use="both" source="expression" name="building.is_developing_type" type="variable_definition">(building.building_type_id==1)+(building.building_type_id==2)+(building.building_type_id==3)+(building.building_type_id==4)+(building.building_type_id==6)+(building.building_type_id==7)+(building.building_type_id==8)+(building.building_type_id==9)+(building.building_type_id==10)</variable>
      <variable use="both" source="expression" name="building.bldg_sqft_constructed_this_year" type="variable_definition">(building.non_residential_sqft - building.non_residential_sqft_lag1)+((building.residential_units*building.sqft_per_unit)-(building.residential_units_lag1*building.sqft_per_unit))</variable>
      <variable use="both" source="expression" name="building.mpa_id" type="variable_definition">building.disaggregate(zone.mpa_id)</variable>
      <variable use="both" source="expression" name="building.is_residential" type="variable_definition">building.disaggregate(building_type.is_residential)</variable>
      <variable use="both" source="expression" name="building.tazi03_id" type="variable_definition">building.disaggregate(zone.tazi03_id)</variable>
      <variable use="both" source="expression" name="building.raz2012_id" type="variable_definition">building.disaggregate(zone.raz2012_id)</variable>
      <variable use="both" source="expression" name="building.taz2012_id" type="variable_definition">building.disaggregate(zone.taz2012_id)</variable>
      <variable use="both" source="expression" name="building.super_raz_id" type="variable_definition">building.disaggregate(zone.super_raz_id)</variable>
      <variable use="both" source="expression" name="building.is_building_type_rsf" type="variable_definition">urbansim_zone.building.is_building_type_rsf</variable>
      <variable use="both" source="expression" name="building.is_building_type_rmf" type="variable_definition">urbansim_zone.building.is_building_type_rmf</variable>
      <variable use="both" source="expression" name="building.is_building_type_retl" type="variable_definition">urbansim_zone.building.is_building_type_retl</variable>
      <variable use="both" source="expression" name="building.is_building_type_ind" type="variable_definition">urbansim_zone.building.is_building_type_ind</variable>
      <variable use="both" source="expression" name="building.is_building_type_off" type="variable_definition">urbansim_zone.building.is_building_type_off</variable>
      <variable use="both" source="expression" name="building.is_building_type_hot" type="variable_definition">urbansim_zone.building.is_building_type_hot</variable>
      <variable use="both" source="expression" name="building.occupied_hot_units_col" type="variable_definition">urbansim_zone.building.is_building_type_hot * (urbansim_zone.building.number_of_non_home_based_jobs * urbansim_zone.building.building_sqft_per_job)</variable>
      <variable use="both" source="expression" name="building.total_hot_units_col" type="variable_definition">urbansim_zone.building.is_building_type_hot * building.non_residential_sqft</variable>
      <variable use="both" source="expression" name="building.occupied_off_units_col" type="variable_definition">urbansim_zone.building.is_building_type_off * (urbansim_zone.building.number_of_non_home_based_jobs * urbansim_zone.building.building_sqft_per_job)</variable>
      <variable use="both" source="expression" name="building.total_off_units_col" type="variable_definition">urbansim_zone.building.is_building_type_off * building.non_residential_sqft</variable>
      <variable use="both" source="expression" name="building.occupied_ind_units_col" type="variable_definition">urbansim_zone.building.is_building_type_ind * (urbansim_zone.building.number_of_non_home_based_jobs * urbansim_zone.building.building_sqft_per_job)</variable>
      <variable use="both" source="expression" name="building.total_ind_units_col" type="variable_definition">urbansim_zone.building.is_building_type_ind * building.non_residential_sqft</variable>
      <variable use="both" source="expression" name="building.occupied_retl_units_col" type="variable_definition">urbansim_zone.building.is_building_type_retl * (urbansim_zone.building.number_of_non_home_based_jobs * urbansim_zone.building.building_sqft_per_job)</variable>
      <variable use="both" source="expression" name="building.total_retl_units_col" type="variable_definition">urbansim_zone.building.is_building_type_retl * building.non_residential_sqft</variable>
      <variable use="both" source="expression" name="building.occupied_rsf_units_col" type="variable_definition">urbansim_zone.building.is_building_type_rsf * urbansim_zone.building.number_of_households</variable>
      <variable use="both" source="expression" name="building.total_rsf_units_col" type="variable_definition">urbansim_zone.building.is_building_type_rsf * building.residential_units</variable>
      <variable use="both" source="expression" name="building.occupied_rmf_units_col" type="variable_definition">urbansim_zone.building.is_building_type_rmf * urbansim_zone.building.number_of_households</variable>
      <variable use="both" source="expression" name="building.total_rmf_units_col" type="variable_definition">urbansim_zone.building.is_building_type_rmf * building.residential_units</variable>
      <variable use="both" source="expression" name="building.num_of_pub_jobs" type="variable_definition">building.aggregate(job.sector_id == 21)</variable>
      <variable use="both" source="expression" name="building.num_of_pub_local_jobs" type="variable_definition">building.aggregate(job.sector_id == 22)</variable>
      <variable use="both" source="expression" name="building.is_building_type_pub" type="variable_definition">(building.building_type_id == 14)</variable>
      <variable use="both" source="expression" name="building.is_building_type_pub_local" type="variable_definition">(building.building_type_id == 16)</variable>
      <variable use="both" source="expression" name="building.weight_for_pub_local_jobs" type="variable_definition">mag_zone.building.num_of_pub_local_jobs + (numpy.logical_and(building.building_type_id == 16, mag_zone.building.num_of_pub_local_jobs == 0)*(building.non_residential_sqft/50)).astype(int32)</variable>
      <variable use="both" source="expression" name="building.wah_capacity" type="variable_definition">numpy.minimum(building.aggregate(household.workers), 3*building.number_of_agents(household)) - building.aggregate(job.home_based_status == 1)</variable>
      <variable use="both" source="expression" name="building.mpa_population" type="variable_definition">building.disaggregate(zone.disaggregate(mpa.aggregate(household.persons)))</variable>
      <variable use="both" source="expression" name="building.mpa_city_jobs" type="variable_definition">building.disaggregate(mpa.aggregate(mag_zone.building.num_of_pub_jobs))</variable>
      <variable use="both" source="expression" name="building.vacant_residential_units_with_negatives" type="variable_definition">building.residential_units - urbansim_zone.building.number_of_households</variable>
      <variable use="both" source="expression" name="building.vacant_non_home_based_job_spaces_with_negatives" type="variable_definition">urbansim_zone.building.total_non_home_based_job_spaces - urbansim_zone.building.number_of_non_home_based_jobs</variable>
      <variable use="both" source="expression" name="building.vacant_home_based_job_spaces_with_negatives" type="variable_definition">urbansim_zone.building.total_home_based_job_spaces - urbansim_zone.building.number_of_home_based_jobs</variable>
      <variable use="both" source="expression" name="building.number_of_non_seasonal_household" type="variable_definition">building.aggregate(household.is_seasonal == 0)</variable>
      <variable use="both" source="expression" name="building.total_non_home_based_job_spaces" type="variable_definition">numpy.round(safe_array_divide(building.non_residential_sqft, urbansim_zone.building.building_sqft_per_job))</variable>
      <variable use="both" source="expression" name="building.total_home_based_job_spaces" type="variable_definition">numpy.minimum(building.aggregate(household.workers), 3)</variable>
      <variable use="both" source="expression" name="building.vacant_non_home_based_job_spaces" type="variable_definition">clip_to_zero(mag_zone.building.total_non_home_based_job_spaces - urbansim_zone.building.number_of_non_home_based_jobs)</variable>
      <variable use="both" source="expression" name="building.vacant_home_based_job_spaces" type="variable_definition">clip_to_zero(mag_zone.building.wah_capacity)</variable>
      <variable use="both" source="expression" name="building.number_sfr_dus" type="variable_definition">building.building_type_id==1*building.residential_units</variable>
      <variable use="both" source="expression" name="building.number_mfr_dus" type="variable_definition">building.building_type_id==2*building.residential_units</variable>
      <variable use="both" source="expression" name="building.number_mh_dus" type="variable_definition">building.building_type_id==3*building.residential_units</variable>
      <variable use="both" source="expression" name="building.number_sfr_du_inclmh" type="variable_definition">mag_zone.building.number_sfr_du + mag_zone.building.number_mh_du</variable>
      <variable use="both" source="expression" name="building.occupied_ware_units_col" type="variable_definition">urbansim_zone.building.is_building_type_ware * (urbansim_zone.building.number_of_non_home_based_jobs * urbansim_zone.building.building_sqft_per_job)</variable>
      <variable use="both" source="expression" name="building.total_ware_units_col" type="variable_definition">urbansim_zone.building.is_building_type_ware * building.non_residential_sqft</variable>
      <variable use="both" source="expression" name="building.occupied_med_units_col" type="variable_definition">urbansim_zone.building.is_building_type_med * (urbansim_zone.building.number_of_non_home_based_jobs * urbansim_zone.building.building_sqft_per_job)</variable>
      <variable use="both" source="expression" name="building.total_med_units_col" type="variable_definition">urbansim_zone.building.is_building_type_med * building.non_residential_sqft</variable>
      <variable use="both" source="expression" name="building.is_building_type_ware" type="variable_definition">urbansim_zone.building.is_building_type_ware</variable>
      <variable use="both" source="expression" name="building.num_of_pub_federal_state_jobs" type="variable_definition">building.aggregate(job.sector_id == 21)</variable>
      <variable use="both" source="expression" name="building.is_building_type_pub_fs" type="variable_definition">(building.building_type_id == 14)</variable>
      <variable use="both" source="expression" name="building.weight_for_pub_federal_state_jobs" type="variable_definition">mag_zone.building.num_of_pub_federal_state_jobs</variable>
      <variable use="both" source="expression" name="building.weight_for_gq_other_non_institutional" type="variable_definition">building.gq_pop_in_other_noninst</variable>
      <variable use="both" source="expression" name="building.weight_for_gq_other_institutional" type="variable_definition">building.gq_pop_in_other_inst</variable>
      <variable use="both" source="expression" name="building.weight_for_gq_nursing_homes" type="variable_definition">building.gq_pop_in_nursing_homes</variable>
      <variable use="both" source="expression" name="building.weight_for_gq_juvenile_prisons" type="variable_definition">building.gq_pop_in_juvenile_prisons</variable>
      <variable use="both" source="expression" name="building.weight_for_gq_prisons" type="variable_definition">building.gq_pop_in_prisons</variable>
      <variable use="both" source="expression" name="building.weight_for_gq_dorms" type="variable_definition">building.gq_pop_in_dorms</variable>
      <variable use="both" source="expression" name="building.total_job_space_capacity" type="variable_definition">numpy.round(safe_array_divide(building.non_residential_sqft_capacity, urbansim_zone.building.building_sqft_per_job))</variable>
      <variable use="both" source="expression" name="business.mpa_id" type="variable_definition">business.disaggregate(building.disaggregate(zone.mpa_id))</variable>
      <variable use="both" source="expression" name="business.raz_id" type="variable_definition">business.disaggregate(building.disaggregate(zone.raz_id))</variable>
      <variable use="both" source="expression" name="business.county_id" type="variable_definition">business.disaggregate(building.disaggregate(zone.county_id))</variable>
      <variable use="both" source="expression" name="county.county_jobs_5" type="variable_definition">county.aggregate(job.sector_id==5)</variable>
      <variable use="both" source="expression" name="county.total_jobs" type="variable_definition">county.number_of_agents(job)</variable>
      <variable use="both" source="expression" name="county.total_households" type="variable_definition">county.number_of_agents(household)</variable>
      <variable use="both" source="expression" name="county.total_population" type="variable_definition">county.number_of_agents(person)</variable>
      <variable use="both" source="expression" name="household.persons" type="variable_definition">household.number_of_agents(person)</variable>
      <variable use="both" source="expression" name="household.age_of_the_youngest" type="variable_definition">household.aggregate(person.age, function=minimum)</variable>
      <variable use="both" source="expression" name="household.age_of_head" type="variable_definition">household.aggregate(person.age * mag_zone.person.head_of_hh)</variable>
      <variable use="both" source="expression" name="household.age_of_head_under_25" type="variable_definition">household.age_of_head&lt;26</variable>
      <variable use="both" source="expression" name="household.age_of_head_26_35" type="variable_definition">numpy.logical_and(household.age_of_head&gt;25, household.age_of_head&lt;36)</variable>
      <variable use="both" source="expression" name="household.age_of_head_36_45" type="variable_definition">numpy.logical_and(household.age_of_head&gt;35, household.age_of_head&lt;46)</variable>
      <variable use="both" source="expression" name="household.age_of_head_46_55" type="variable_definition">numpy.logical_and(household.age_of_head&gt;45, household.age_of_head&lt;56)</variable>
      <variable use="both" source="expression" name="household.age_of_head_56_65" type="variable_definition">numpy.logical_and(household.age_of_head&gt;55, household.age_of_head&lt;66)</variable>
      <variable use="both" source="expression" name="household.age_of_head_66_up" type="variable_definition">household.age_of_head&gt;65</variable>
      <variable use="both" source="expression" name="household.in_income_quintile01" type="variable_definition">mag_zone.household.income_quintiles==1</variable>
      <variable use="both" source="expression" name="household.in_income_quintile02" type="variable_definition">mag_zone.household.income_quintiles==2</variable>
      <variable use="both" source="expression" name="household.in_income_quintile03" type="variable_definition">mag_zone.household.income_quintiles==3</variable>
      <variable use="both" source="expression" name="household.in_income_quintile04" type="variable_definition">mag_zone.household.income_quintiles==4</variable>
      <variable use="both" source="expression" name="household.in_income_quintile05" type="variable_definition">mag_zone.household.income_quintiles==5</variable>
      <variable use="both" source="expression" name="household.children" type="variable_definition">household.aggregate(mag_zone.person.is_child)</variable>
      <variable use="both" source="expression" name="household.income_greater_than_100k" type="variable_definition">household.income&gt;99999</variable>
      <variable use="both" source="expression" name="household.income_greater_than_200k" type="variable_definition">household.income&gt;199999</variable>
      <variable use="both" source="expression" name="household.income_greater_than_500k" type="variable_definition">household.income&gt;499999</variable>
      <variable use="both" source="expression" name="household.number_of_vehicles0" type="variable_definition">household.number_of_vehicles==0</variable>
      <variable use="both" source="expression" name="household.number_of_vehicles1" type="variable_definition">household.number_of_vehicles==1</variable>
      <variable use="both" source="expression" name="household.number_of_vehicles2" type="variable_definition">household.number_of_vehicles==2</variable>
      <variable use="both" source="expression" name="household.number_of_vehicles3" type="variable_definition">household.number_of_vehicles==3</variable>
      <variable use="both" source="expression" name="household.number_of_vehicles4up" type="variable_definition">household.number_of_vehicles&gt;3</variable>
      <variable use="both" source="expression" name="household.is_seasonal" type="variable_definition">household.is_seasonal==1</variable>
      <variable use="both" source="expression" name="household.is_seasonal_and_all_pp_over_55" type="variable_definition">numpy.logical_and(mag_zone.household.is_seasonal, mag_zone.household.age_of_the_youngest&gt;54)</variable>
      <variable use="both" source="expression" name="household.is_seasonal_and_hh_head_over_55" type="variable_definition">numpy.logical_and(mag_zone.household.is_seasonal, mag_zone.household.age_of_head&gt;54)</variable>
      <variable use="both" source="expression" name="household.all_pp_over_55" type="variable_definition">mag_zone.household.age_of_the_youngest&gt;54</variable>
      <variable use="both" source="expression" name="household.hh_head_over_55" type="variable_definition">mag_zone.household.age_of_head&gt;54</variable>
      <variable use="both" source="expression" name="household.tazi03_id" type="variable_definition">household.disaggregate(building.disaggregate(zone.tazi03_id))</variable>
      <variable use="both" source="expression" name="household.razi03_id" type="variable_definition">household.disaggregate(building.disaggregate(zone.razi03_id))</variable>
      <variable use="both" source="expression" name="household.mpa_id" type="variable_definition">household.disaggregate(raz2012.mpa_id)</variable>
      <variable use="both" source="expression" name="household.taz2012_id" type="variable_definition">household.disaggregate(building.disaggregate(zone.taz2012_id))</variable>
      <variable use="both" source="expression" name="household.raz2012_id" type="variable_definition">household.disaggregate(building.disaggregate(zone.raz2012_id))</variable>
      <variable use="both" source="expression" name="household.super_raz_id" type="variable_definition">household.disaggregate(building.disaggregate(zone.super_raz_id))</variable>
      <variable use="both" source="expression" name="household.zone_id" type="variable_definition">household.disaggregate(building.disaggregate(zone.zone_id))</variable>
      <variable use="both" source="expression" name="household.pseudo_blockgroup_id" type="variable_definition">household.disaggregate(building.disaggregate(zone.pseudo_blockgroup_id))</variable>
      <variable use="both" source="expression" name="household.census_place_id" type="variable_definition">household.disaggregate(building.disaggregate(zone.census_place_id))</variable>
      <variable use="both" source="expression" name="household.raz_id" type="variable_definition">household.disaggregate(building.disaggregate(zone.raz2012_id))</variable>
      <variable use="both" source="expression" name="household.county_id" type="variable_definition">household.disaggregate(building.disaggregate(zone.county_id))</variable>
      <variable use="both" source="expression" name="household.synthetic_household_id" type="variable_definition">household.household_id</variable>
      <variable use="both" source="expression" name="household.year_built" type="variable_definition">household.disaggregate(building.year_built)</variable>
      <variable use="both" source="expression" name="job.is_srazretail_job" type="variable_definition">numpy.in1d(job.sector_id, (17,18,19))</variable>
      <variable use="both" source="expression" name="job.is_srazindustrial_job" type="variable_definition">numpy.in1d(job.sector_id, (2,3,5,6,7,8))</variable>
      <variable use="both" source="expression" name="job.is_srazoffice_job" type="variable_definition">numpy.in1d(job.sector_id, (9,10,11,12,13,14))</variable>
      <variable use="both" source="expression" name="job.is_srazother_job" type="variable_definition">numpy.in1d(job.sector_id, (1,4,16,20))</variable>
      <variable use="both" source="expression" name="job.is_srazpublic_job" type="variable_definition">numpy.in1d(job.sector_id, (15,21,22))</variable>
      <variable use="both" source="expression" name="job.building_id" type="variable_definition">job.building_id</variable>
      <variable use="both" source="expression" name="job.zone_id" type="variable_definition">job.disaggregate(building.disaggregate(zone.zone_id))</variable>
      <variable use="both" source="expression" name="job.taz2012_id" type="variable_definition">job.disaggregate(building.disaggregate(zone.taz2012_id))</variable>
      <variable use="both" source="expression" name="job.mpa_id" type="variable_definition">job.disaggregate(building.disaggregate(zone.mpa_id))</variable>
      <variable use="both" source="expression" name="job.raz_id" type="variable_definition">job.disaggregate(building.disaggregate(zone.raz_id))</variable>
      <variable use="both" source="expression" name="job.raz2012_id" type="variable_definition">job.disaggregate(building.disaggregate(zone.raz2012_id))</variable>
      <variable use="both" source="expression" name="job.super_raz_id" type="variable_definition">job.disaggregate(building.disaggregate(zone.super_raz_id))</variable>
      <variable use="both" source="expression" name="job.county_id" type="variable_definition">job.disaggregate(building.disaggregate(zone.county_id))</variable>
      <variable use="both" source="expression" name="job.tazi03_id" type="variable_definition">job.disaggregate(building.disaggregate(zone.tazi03_id))</variable>
      <variable use="both" source="expression" name="job.pseudo_blockgroup_id" type="variable_definition">job.disaggregate(building.disaggregate(zone.pseudo_blockgroup_id))</variable>
      <variable use="both" source="expression" name="job.census_place_id" type="variable_definition">job.disaggregate(building.disaggregate(zone.census_place_id))</variable>
      <variable use="both" source="expression" name="job.is_public_job" type="variable_definition">numpy.in1d(job.sector_id, (21,22))</variable>
      <variable use="both" source="expression" name="job.is_industrial_job" type="variable_definition">numpy.in1d(job.sector_id, (2,5,6,8))</variable>
      <variable use="both" source="expression" name="job.is_entertainment_job" type="variable_definition">numpy.in1d(job.sector_id, (7,18,19))</variable>
      <variable use="both" source="expression" name="job.is_office_job" type="variable_definition">numpy.in1d(job.sector_id, (9,10,11,12,13))</variable>
      <variable use="both" source="expression" name="job.is_homebased_job" type="variable_definition">job.home_based_status==1</variable>
      <variable use="both" source="expression" name="job.is_nonhomebased_job" type="variable_definition">job.home_based_status==0</variable>
      <variable use="both" source="expression" name="job.is_agricultural_job" type="variable_definition">job.sector_id==1</variable>
      <variable use="both" source="expression" name="job.is_mining_job" type="variable_definition">job.sector_id==2</variable>
      <variable use="both" source="expression" name="job.is_utilities_job" type="variable_definition">job.sector_id==3</variable>
      <variable use="both" source="expression" name="job.is_construction_job" type="variable_definition">job.sector_id==4</variable>
      <variable use="both" source="expression" name="job.is_manufacturing_job" type="variable_definition">job.sector_id==5</variable>
      <variable use="both" source="expression" name="job.is_wholesale_job" type="variable_definition">job.sector_id==6</variable>
      <variable use="both" source="expression" name="job.is_retail_job" type="variable_definition">job.sector_id==7</variable>
      <variable use="both" source="expression" name="job.is_transportation_job" type="variable_definition">job.sector_id==8</variable>
      <variable use="both" source="expression" name="job.is_information_job" type="variable_definition">job.sector_id==9</variable>
      <variable use="both" source="expression" name="job.is_finance_job" type="variable_definition">job.sector_id==10</variable>
      <variable use="both" source="expression" name="job.is_realestate_job" type="variable_definition">job.sector_id==11</variable>
      <variable use="both" source="expression" name="job.is_professional_job" type="variable_definition">job.sector_id==12</variable>
      <variable use="both" source="expression" name="job.is_management_job" type="variable_definition">job.sector_id==13</variable>
      <variable use="both" source="expression" name="job.is_admin_support_job" type="variable_definition">job.sector_id==14</variable>
      <variable use="both" source="expression" name="job.is_educ_svcs_job" type="variable_definition">job.sector_id==15</variable>
      <variable use="both" source="expression" name="job.is_healthcare_job" type="variable_definition">job.sector_id==16</variable>
      <variable use="both" source="expression" name="job.is_arts_ent_rec_job" type="variable_definition">job.sector_id==17</variable>
      <variable use="both" source="expression" name="job.is_accomodation_job" type="variable_definition">job.sector_id==18</variable>
      <variable use="both" source="expression" name="job.is_foodservice_job" type="variable_definition">job.sector_id==19</variable>
      <variable use="both" source="expression" name="job.is_other_svcs_job" type="variable_definition">job.sector_id==20</variable>
      <variable use="both" source="expression" name="job.is_pubfedstate_job" type="variable_definition">job.sector_id==21</variable>
      <variable use="both" source="expression" name="job.is_publocal_job" type="variable_definition">job.sector_id==22</variable>
      <variable use="both" source="expression" name="job.is_pub_employment" type="variable_definition">(job.sector_id == 20)</variable>
      <variable use="both" source="expression" name="job.sector_group" type="variable_definition">job.disaggregate(sector.sector_group)</variable>
      <variable use="both" source="expression" name="mpa.number_of_jobs" type="variable_definition">mpa.number_of_agents(job)</variable>
      <variable use="both" source="expression" name="mpa.number_of_public_jobs" type="variable_definition">mpa.aggregate(mag_zone.job.is_public_job)</variable>
      <variable use="both" source="expression" name="mpa.number_of_industrial_jobs" type="variable_definition">mpa.aggregate(mag_zone.job.is_industrial_job)</variable>
      <variable use="both" source="expression" name="mpa.number_of_entertainment_jobs" type="variable_definition">mpa.aggregate(mag_zone.job.is_entertainment_job)</variable>
      <variable use="both" source="expression" name="mpa.number_of_homebased_jobs" type="variable_definition">mpa.aggregate(mag_zone.job.is_homebased_job)</variable>
      <variable use="both" source="expression" name="mpa.number_of_office_jobs" type="variable_definition">mpa.aggregate(mag_zone.job.is_office_job)</variable>
      <variable use="both" source="expression" name="mpa.number_of_agricultural_jobs" type="variable_definition">mpa.aggregate(mag_zone.job.is_agricultural_job)</variable>
      <variable use="both" source="expression" name="mpa.number_of_mining_jobs" type="variable_definition">mpa.aggregate(mag_zone.job.is_mining_job)</variable>
      <variable use="both" source="expression" name="mpa.number_of_utilities_jobs" type="variable_definition">mpa.aggregate(mag_zone.job.is_utilities_job)</variable>
      <variable use="both" source="expression" name="mpa.number_of_construction_jobs" type="variable_definition">mpa.aggregate(mag_zone.job.is_construction_job)</variable>
      <variable use="both" source="expression" name="mpa.number_of_manufacturing_jobs" type="variable_definition">mpa.aggregate(mag_zone.job.is_manufacturing_job)</variable>
      <variable use="both" source="expression" name="mpa.number_of_wholesale_jobs" type="variable_definition">mpa.aggregate(mag_zone.job.is_wholesale_job)</variable>
      <variable use="both" source="expression" name="mpa.number_of_retail_jobs" type="variable_definition">mpa.aggregate(mag_zone.job.is_retail_job)</variable>
      <variable use="both" source="expression" name="mpa.number_of_transportation_jobs" type="variable_definition">mpa.aggregate(mag_zone.job.is_transportation_job)</variable>
      <variable use="both" source="expression" name="mpa.number_of_information_jobs" type="variable_definition">mpa.aggregate(mag_zone.job.is_information_job)</variable>
      <variable use="both" source="expression" name="mpa.number_of_finance_jobs" type="variable_definition">mpa.aggregate(mag_zone.job.is_finance_job)</variable>
      <variable use="both" source="expression" name="mpa.number_of_realestate_jobs" type="variable_definition">mpa.aggregate(mag_zone.job.is_realestate_job)</variable>
      <variable use="both" source="expression" name="mpa.number_of_professional_jobs" type="variable_definition">mpa.aggregate(mag_zone.job.is_professional_job)</variable>
      <variable use="both" source="expression" name="mpa.number_of_healthcare_jobs" type="variable_definition">mpa.aggregate(mag_zone.job.is_healthcare_job)</variable>
      <variable use="both" source="expression" name="mpa.number_of_accomodation_jobs" type="variable_definition">mpa.aggregate(mag_zone.job.is_accomodation_job)</variable>
      <variable use="both" source="expression" name="mpa.number_of_foodservice_jobs" type="variable_definition">mpa.aggregate(mag_zone.job.is_foodservice_job)</variable>
      <variable use="both" source="expression" name="mpa.number_of_pubfedstate_jobs" type="variable_definition">mpa.aggregate(mag_zone.job.is_pubfedstate_job)</variable>
      <variable use="both" source="expression" name="mpa.number_of_publocal_jobs" type="variable_definition">mpa.aggregate(mag_zone.job.is_publocal_job)</variable>
      <variable use="both" source="expression" name="mpa.population" type="variable_definition">mpa.number_of_agents(person)</variable>
      <variable use="both" source="expression" name="mpa.average_population_age" type="variable_definition">mpa.aggregate(person.age, function=mean)</variable>
      <variable use="both" source="expression" name="mpa.median_population_age" type="variable_definition">mpa.aggregate(person.age, function=median)</variable>
      <variable use="both" source="expression" name="mpa.number_of_children" type="variable_definition">mpa.aggregate(where(person.age &lt; 17, 1,0))</variable>
      <variable use="both" source="expression" name="mpa.population_with_less_than_high_school_diploma" type="variable_definition">mpa.aggregate(mag_zone.person.less_than_high_school_diploma)</variable>
      <variable use="both" source="expression" name="mpa.population_with_at_least_high_school_diploma" type="variable_definition">mpa.aggregate(mag_zone.person.at_least_high_school_diploma)</variable>
      <variable use="both" source="expression" name="mpa.population_with_at_least_associates_degree" type="variable_definition">mpa.aggregate(mag_zone.person.at_least_associates_degree)</variable>
      <variable use="both" source="expression" name="mpa.population_with_at_least_bachelors_degree" type="variable_definition">mpa.aggregate(mag_zone.person.at_least_bachelors_degree)</variable>
      <variable use="both" source="expression" name="mpa.population_with_at_least_masters_degree" type="variable_definition">mpa.aggregate(mag_zone.person.at_least_masters_degree)</variable>
      <variable use="both" source="expression" name="mpa.average_adult_education" type="variable_definition">mpa.aggregate(mag_zone.person.is_adult*person.education, function=mean)</variable>
      <variable use="both" source="expression" name="mpa.number_of_hh_age_of_head_over_55" type="variable_definition">mpa.aggregate(mag_zone.household.hh_head_over_55)</variable>
      <variable use="both" source="expression" name="mpa.number_of_households" type="variable_definition">mpa.number_of_agents(household)</variable>
      <variable use="both" source="expression" name="mpa.percent_hh_age_of_head_over_55" type="variable_definition">mpa.aggregate(safe_array_divide(mag_zone.mpa.number_of_hh_age_of_head_over_55, mag_zone.mpa.number_of_households))</variable>
      <variable use="both" source="expression" name="mpa.number_of_hh_size_1" type="variable_definition">mpa.aggregate(household.persons==1)</variable>
      <variable use="both" source="expression" name="mpa.number_of_hh_size_2" type="variable_definition">mpa.aggregate(household.persons==2)</variable>
      <variable use="both" source="expression" name="mpa.number_of_hh_size_3" type="variable_definition">mpa.aggregate(household.persons==3)</variable>
      <variable use="both" source="expression" name="mpa.number_of_hh_size_4" type="variable_definition">mpa.aggregate(household.persons==4)</variable>
      <variable use="both" source="expression" name="mpa.number_of_hh_size_5" type="variable_definition">mpa.aggregate(household.persons==5)</variable>
      <variable use="both" source="expression" name="mpa.number_of_hh_size_6" type="variable_definition">mpa.aggregate(household.persons==6)</variable>
      <variable use="both" source="expression" name="mpa.number_of_hh_size_7up" type="variable_definition">mpa.aggregate(household.persons&gt;6)</variable>
      <variable use="both" source="expression" name="mpa.number_of_hh_1_child" type="variable_definition">mpa.aggregate(household.children==1)</variable>
      <variable use="both" source="expression" name="mpa.number_of_hh_2_children" type="variable_definition">mpa.aggregate(household.children==2)</variable>
      <variable use="both" source="expression" name="mpa.number_of_hh_3_children" type="variable_definition">mpa.aggregate(household.children==3)</variable>
      <variable use="both" source="expression" name="mpa.number_of_hh_4up_children" type="variable_definition">mpa.aggregate(household.children&gt;3)</variable>
      <variable use="both" source="expression" name="mpa.persons_per_hh" type="variable_definition">mpa.aggregate(household.persons, function=mean)</variable>
      <variable use="both" source="expression" name="mpa.number_of_hh_0_workers" type="variable_definition">mpa.aggregate(household.workers==0)</variable>
      <variable use="both" source="expression" name="mpa.number_of_hh_1_workers" type="variable_definition">mpa.aggregate(household.workers==1)</variable>
      <variable use="both" source="expression" name="mpa.number_of_hh_2_workers" type="variable_definition">mpa.aggregate(household.workers==2)</variable>
      <variable use="both" source="expression" name="mpa.number_of_hh_3up_workers" type="variable_definition">mpa.aggregate(household.workers&gt;2)</variable>
      <variable use="both" source="expression" name="mpa.number_of_hh_0_vehicles" type="variable_definition">mpa.aggregate(mag_zone.household.number_of_vehicles0)</variable>
      <variable use="both" source="expression" name="mpa.number_of_hh_1_vehicles" type="variable_definition">mpa.aggregate(mag_zone.household.number_of_vehicles1)</variable>
      <variable use="both" source="expression" name="mpa.number_of_hh_2_vehicles" type="variable_definition">mpa.aggregate(mag_zone.household.number_of_vehicles2)</variable>
      <variable use="both" source="expression" name="mpa.number_of_hh_3_vehicles" type="variable_definition">mpa.aggregate(mag_zone.household.number_of_vehicles3)</variable>
      <variable use="both" source="expression" name="mpa.number_of_hh_4up_vehicles" type="variable_definition">mpa.aggregate(mag_zone.household.number_of_vehicles4up)</variable>
      <variable use="both" source="expression" name="mpa.average_household_income" type="variable_definition">mpa.aggregate(household.income, function=mean)</variable>
      <variable use="both" source="expression" name="mpa.median_household_income" type="variable_definition">mpa.aggregate(household.income, function=median)</variable>
      <variable use="both" source="expression" name="mpa.mpa_hh_inc_quint01" type="variable_definition">mpa.aggregate(mag_zone.household.income_quintiles==1)</variable>
      <variable use="both" source="expression" name="mpa.mpa_hh_inc_quint02" type="variable_definition">mpa.aggregate(mag_zone.household.income_quintiles==2)</variable>
      <variable use="both" source="expression" name="mpa.mpa_hh_inc_quint03" type="variable_definition">mpa.aggregate(mag_zone.household.income_quintiles==3)</variable>
      <variable use="both" source="expression" name="mpa.mpa_hh_inc_quint04" type="variable_definition">mpa.aggregate(mag_zone.household.income_quintiles==4)</variable>
      <variable use="both" source="expression" name="mpa.mpa_hh_inc_quint05" type="variable_definition">mpa.aggregate(mag_zone.household.income_quintiles==5)</variable>
      <variable use="both" source="expression" name="mpa.mpa_hh_age_of_head_under_25" type="variable_definition">raz2012.aggregate(mag_zone.household.age_of_head_under_25)</variable>
      <variable use="both" source="expression" name="mpa.mpa_hh_age_of_head_26_35" type="variable_definition">mpa.aggregate(mag_zone.household.age_of_head_26_35)</variable>
      <variable use="both" source="expression" name="mpa.mpa_hh_age_of_head_36_45" type="variable_definition">mpa.aggregate(mag_zone.household.age_of_head_36_45)</variable>
      <variable use="both" source="expression" name="mpa.mpa_hh_age_of_head_46_55" type="variable_definition">mpa.aggregate(mag_zone.household.age_of_head_46_55)</variable>
      <variable use="both" source="expression" name="mpa.mpa_hh_age_of_head_56_65" type="variable_definition">mpa.aggregate(mag_zone.household.age_of_head_56_65)</variable>
      <variable use="both" source="expression" name="mpa.mpa_hh_age_of_head_66_up" type="variable_definition">mpa.aggregate(mag_zone.household.age_of_head_66_up)</variable>
      <variable use="both" source="expression" name="mpa.total_dus" type="variable_definition">mpa.aggregate(building.residential_units)</variable>
      <variable use="both" source="expression" name="mpa.total_sfr_dus" type="variable_definition">mpa.aggregate(mag_zone.building.number_sfr_dus)</variable>
      <variable use="both" source="expression" name="mpa.total_mfr_dus" type="variable_definition">mpa.aggregate(mag_zone.building.number_mfr_dus)</variable>
      <variable use="both" source="expression" name="mpa.total_mh_dus" type="variable_definition">mpa.aggregate(mag_zone.building.number_mh_dus)</variable>
      <variable use="both" source="expression" name="mpa.percent_dus_built" type="variable_definition">safe_array_divide(mag_zone.mpa.total_dus, mpa.aggregate(building.residential_units_capacity))</variable>
      <variable use="both" source="expression" name="mpa.percent_sfr_dus" type="variable_definition">safe_array_divide(mag_zone.mpa.total_sfr_dus, mag_zone.mpa.total_dus)</variable>
      <variable use="both" source="expression" name="mpa.percent_sfr_mh_dus" type="variable_definition">safe_array_divide((mag_zone.mpa.total_sfr_dus+mag_zone.mpa.total_mh_dus), mag_zone.mpa.total_dus)</variable>
      <variable use="both" source="expression" name="mpa.percent_mfr_dus" type="variable_definition">safe_array_divide(mag_zone.mpa.total_mfr_dus, mag_zone.mpa.total_dus)</variable>
      <variable use="both" source="expression" name="mpa.percent_mh_dus" type="variable_definition">safe_array_divide(mag_zone.mpa.total_mh_dus, mag_zone.mpa.total_dus)</variable>
      <variable use="both" source="expression" name="mpa.jobs_housing_ratio" type="variable_definition">safe_array_divide(mag_zone.mpa.number_of_jobs, mag_zone.mpa.total_dus)</variable>
      <variable use="both" source="expression" name="mpa.occupancy_rate" type="variable_definition">safe_array_divide(mag_zone.mpa.number_of_households, mag_zone.mpa.total_dus)</variable>
      <variable use="both" source="expression" name="mpa.mpa_residential_units" type="variable_definition">mpa.aggregate(building.residential_units)</variable>
      <variable use="both" source="expression" name="mpa.mpa_jobs_5" type="variable_definition">mpa.aggregate(job.sector_id==5)</variable>
      <variable use="both" source="expression" name="mpa.mpa_total_jobs" type="variable_definition">mpa.number_of_agents(job)</variable>
      <variable use="both" source="expression" name="mpa.mpa_county_jobs_5" type="variable_definition">mpa.disaggregate(county.county_jobs_5)</variable>
      <variable use="both" source="expression" name="mpa.mpa_county_total_jobs" type="variable_definition">mpa.disaggregate(county.total_jobs)</variable>
      <variable use="both" source="expression" name="mpa.lq5" type="variable_definition">safe_array_divide((safe_array_divide(mag_zone.mpa.mpa_jobs_5,mag_zone.mpa.mpa_total_jobs)),                                  (safe_array_divide(mag_zone.mpa.mpa_county_jobs_5,mag_zone.mpa.mpa_county_total_jobs)))</variable>
      <variable use="both" source="expression" name="person.is_employed" type="variable_definition">numpy.in1d(person.work_status, (1,2,4,5))</variable>
      <variable use="both" source="expression" name="person.is_child" type="variable_definition">person.age&lt;18</variable>
      <variable use="both" source="expression" name="person.is_driving_age" type="variable_definition">person.age&gt;15</variable>
      <variable use="both" source="expression" name="person.is_young_adult" type="variable_definition">numpy.logical_and(person.age&gt;17, person.age&lt;36)</variable>
      <variable use="both" source="expression" name="person.is_adult" type="variable_definition">person.age&gt;17</variable>
      <variable use="both" source="expression" name="person.is_senior_citizen" type="variable_definition">person.age&gt;64</variable>
      <variable use="both" source="expression" name="person.is_over_55" type="variable_definition">person.age&gt;54</variable>
      <variable use="both" source="expression" name="person.is_student" type="variable_definition">person.student_status&gt;1</variable>
      <variable use="both" source="expression" name="person.is_college_student" type="variable_definition">numpy.logical_and(mag_zone.person.is_student, person.education&gt;8)</variable>
      <variable use="both" source="expression" name="person.less_than_high_school_diploma" type="variable_definition">person.education&lt;9</variable>
      <variable use="both" source="expression" name="person.at_least_high_school_diploma" type="variable_definition">person.education&gt;8</variable>
      <variable use="both" source="expression" name="person.at_least_associates_degree" type="variable_definition">person.education&gt;11</variable>
      <variable use="both" source="expression" name="person.at_least_bachelors_degree" type="variable_definition">person.education&gt;12</variable>
      <variable use="both" source="expression" name="person.at_least_masters_degree" type="variable_definition">person.education&gt;13</variable>
      <variable use="both" source="expression" name="person.tazi03_id" type="variable_definition">person.disaggregate(household.disaggregate(building.disaggregate(zone.tazi03_id)))</variable>
      <variable use="both" source="expression" name="person.taz2012_id" type="variable_definition">person.disaggregate(household.disaggregate(building.disaggregate(zone.taz2012_id)))</variable>
      <variable use="both" source="expression" name="person.razi03_id" type="variable_definition">person.disaggregate(household.disaggregate(building.disaggregate(zone.razi03_id)))</variable>
      <variable use="both" source="expression" name="person.raz2012_id" type="variable_definition">person.disaggregate(household.disaggregate(building.disaggregate(zone.raz2012_id)))</variable>
      <variable use="both" source="expression" name="person.mpa_id" type="variable_definition">person.disaggregate(household.disaggregate(building.disaggregate(zone.mpa_id)))</variable>
      <variable use="both" source="expression" name="person.zone_id" type="variable_definition">person.disaggregate(household.disaggregate(building.disaggregate(zone.zone_id)))</variable>
      <variable use="both" source="expression" name="person.pseudo_blockgroup_id" type="variable_definition">person.disaggregate(household.disaggregate(building.disaggregate(zone.pseudo_blockgroup_id)))</variable>
      <variable use="both" source="expression" name="person.census_place_id" type="variable_definition">person.disaggregate(household.disaggregate(building.disaggregate(zone.census_place_id)))</variable>
      <variable use="both" source="expression" name="person.super_raz_id" type="variable_definition">person.disaggregate(household.super_raz_id)</variable>
      <variable use="both" source="expression" name="person.gender" type="variable_definition">person.sex</variable>
      <variable use="both" source="expression" name="person.head_of_hh" type="variable_definition">person.relate==1</variable>
      <variable use="both" source="expression" name="person.is_hispanic" type="variable_definition">numpy.in1d(person.race_id, (6,7,8,9,10))</variable>
      <variable use="both" source="expression" name="person.is_not_hispanic" type="variable_definition">numpy.in1d(person.race_id, (1,2,3,4,5))</variable>
      <variable use="both" source="expression" name="person.is_married" type="variable_definition">numpy.in1d(person.marriage_status, (1,2))</variable>
      <variable use="both" source="expression" name="person.wtaz" type="variable_definition">(person.work_outside_region==0)*person.disaggregate(mag_zone.job.zone_id) + (person.work_outside_region==1)*(person.wtaz0)</variable>
      <variable use="both" source="expression" name="person.synthetic_person_id" type="variable_definition">person.person_id</variable>
      <variable use="both" source="expression" name="person.tmtowrk" type="variable_definition">(person.work_outside_region==0)*(mag_zone.person.travel_time_from_home_to_work) + (person.work_outside_region==1)*person.disaggregate(synthetic_person.tmtowrk)</variable>
      <variable use="both" source="expression" name="person.part_time" type="variable_definition">~ (person.full_time == 1)</variable>
      <variable use="both" source="expression" name="person.county_id" type="variable_definition">person.disaggregate(zone.county_id, intermediates=[building, household])</variable>
      <variable use="both" source="expression" name="raz2012.number_of_jobs" type="variable_definition">raz2012.number_of_agents(job)</variable>
      <variable use="both" source="expression" name="raz2012.number_of_public_jobs" type="variable_definition">raz2012.aggregate(mag_zone.job.is_public_job)</variable>
      <variable use="both" source="expression" name="raz2012.number_of_industrial_jobs" type="variable_definition">raz2012.aggregate(mag_zone.job.is_industrial_job)</variable>
      <variable use="both" source="expression" name="raz2012.number_of_entertainment_jobs" type="variable_definition">raz2012.aggregate(mag_zone.job.is_entertainment_job)</variable>
      <variable use="both" source="expression" name="raz2012.number_of_homebased_jobs" type="variable_definition">raz2012.aggregate(mag_zone.job.is_homebased_job)</variable>
      <variable use="both" source="expression" name="raz2012.number_of_nonhomebased_jobs" type="variable_definition">raz2012.aggregate(mag_zone.job.is_nonhomebased_job)</variable>
      <variable use="both" source="expression" name="raz2012.number_of_office_jobs" type="variable_definition">raz2012.aggregate(mag_zone.job.is_office_job)</variable>
      <variable use="both" source="expression" name="raz2012.number_of_agricultural_jobs" type="variable_definition">raz2012.aggregate(mag_zone.job.is_agricultural_job)</variable>
      <variable use="both" source="expression" name="raz2012.number_of_mining_jobs" type="variable_definition">raz2012.aggregate(mag_zone.job.is_mining_job)</variable>
      <variable use="both" source="expression" name="raz2012.number_of_utilities_jobs" type="variable_definition">raz2012.aggregate(mag_zone.job.is_utilities_job)</variable>
      <variable use="both" source="expression" name="raz2012.number_of_construction_jobs" type="variable_definition">raz2012.aggregate(mag_zone.job.is_construction_job)</variable>
      <variable use="both" source="expression" name="raz2012.number_of_manufacturing_jobs" type="variable_definition">raz2012.aggregate(mag_zone.job.is_manufacturing_job)</variable>
      <variable use="both" source="expression" name="raz2012.number_of_wholesale_jobs" type="variable_definition">raz2012.aggregate(mag_zone.job.is_wholesale_job)</variable>
      <variable use="both" source="expression" name="raz2012.number_of_retail_jobs" type="variable_definition">raz2012.aggregate(mag_zone.job.is_retail_job)</variable>
      <variable use="both" source="expression" name="raz2012.number_of_transportation_jobs" type="variable_definition">raz2012.aggregate(mag_zone.job.is_transportation_job)</variable>
      <variable use="both" source="expression" name="raz2012.number_of_information_jobs" type="variable_definition">raz2012.aggregate(mag_zone.job.is_information_job)</variable>
      <variable use="both" source="expression" name="raz2012.number_of_finance_jobs" type="variable_definition">raz2012.aggregate(mag_zone.job.is_finance_job)</variable>
      <variable use="both" source="expression" name="raz2012.number_of_realestate_jobs" type="variable_definition">raz2012.aggregate(mag_zone.job.is_realestate_job)</variable>
      <variable use="both" source="expression" name="raz2012.number_of_professional_jobs" type="variable_definition">raz2012.aggregate(mag_zone.job.is_professional_job)</variable>
      <variable use="both" source="expression" name="raz2012.number_of_healthcare_jobs" type="variable_definition">raz2012.aggregate(mag_zone.job.is_healthcare_job)</variable>
      <variable use="both" source="expression" name="raz2012.number_of_accomodation_jobs" type="variable_definition">raz2012.aggregate(mag_zone.job.is_accomodation_job)</variable>
      <variable use="both" source="expression" name="raz2012.number_of_foodservice_jobs" type="variable_definition">raz2012.aggregate(mag_zone.job.is_foodservice_job)</variable>
      <variable use="both" source="expression" name="raz2012.number_of_pubfedstate_jobs" type="variable_definition">raz2012.aggregate(mag_zone.job.is_pubfedstate_job)</variable>
      <variable use="both" source="expression" name="raz2012.number_of_publocal_jobs" type="variable_definition">raz2012.aggregate(mag_zone.job.is_publocal_job)</variable>
      <variable use="both" source="expression" name="raz2012.population" type="variable_definition">raz2012.number_of_agents(person)</variable>
      <variable use="both" source="expression" name="raz2012.average_population_age" type="variable_definition">raz2012.aggregate(person.age, function=mean)</variable>
      <variable use="both" source="expression" name="raz2012.median_population_age" type="variable_definition">raz2012.aggregate(person.age, function=median)</variable>
      <variable use="both" source="expression" name="raz2012.number_of_children" type="variable_definition">raz2012.aggregate(where(person.age &lt; 17, 1,0))</variable>
      <variable use="both" source="expression" name="raz2012.population_with_less_than_high_school_diploma" type="variable_definition">raz2012.aggregate(mag_zone.person.less_than_high_school_diploma)</variable>
      <variable use="both" source="expression" name="raz2012.population_with_at_least_high_school_diploma" type="variable_definition">raz2012.aggregate(mag_zone.person.at_least_high_school_diploma)</variable>
      <variable use="both" source="expression" name="raz2012.population_with_at_least_associates_degree" type="variable_definition">raz2012.aggregate(mag_zone.person.at_least_associates_degree)</variable>
      <variable use="both" source="expression" name="raz2012.population_with_at_least_bachelors_degree" type="variable_definition">raz2012.aggregate(mag_zone.person.at_least_bachelors_degree)</variable>
      <variable use="both" source="expression" name="raz2012.population_with_at_least_masters_degree" type="variable_definition">raz2012.aggregate(mag_zone.person.at_least_masters_degree)</variable>
      <variable use="both" source="expression" name="raz2012.average_adult_education" type="variable_definition">raz2012.aggregate(mag_zone.person.is_adult*person.education, function=mean)</variable>
      <variable use="both" source="expression" name="raz2012.seasonal_pop" type="variable_definition">raz2012.aggregate(household.is_seasonal)</variable>
      <variable use="both" source="expression" name="raz2012.number_of_hh_age_of_head_over_55" type="variable_definition">raz2012.aggregate(mag_zone.household.hh_head_over_55)</variable>
      <variable use="both" source="expression" name="raz2012.average_household_income" type="variable_definition">raz2012.aggregate(household.income, function=mean)</variable>
      <variable use="both" source="expression" name="raz2012.median_household_income" type="variable_definition">raz2012.aggregate(household.income, function=median)</variable>
      <variable use="both" source="expression" name="raz2012.number_of_households" type="variable_definition">raz2012.number_of_agents(household)</variable>
      <variable use="both" source="expression" name="raz2012.percent_hh_age_of_head_over_55" type="variable_definition">raz2012.aggregate(safe_array_divide(mag_zone.raz2012.number_of_hh_age_of_head_over_55, mag_zone.raz2012.number_of_households))</variable>
      <variable use="both" source="expression" name="raz2012.raz2012_hh_inc_quint01" type="variable_definition">raz2012.aggregate(mag_zone.household.income_quintiles==1)</variable>
      <variable use="both" source="expression" name="raz2012.raz2012_hh_inc_quint02" type="variable_definition">raz2012.aggregate(mag_zone.household.income_quintiles==2)</variable>
      <variable use="both" source="expression" name="raz2012.raz2012_hh_inc_quint03" type="variable_definition">raz2012.aggregate(mag_zone.household.income_quintiles==3)</variable>
      <variable use="both" source="expression" name="raz2012.raz2012_hh_inc_quint04" type="variable_definition">raz2012.aggregate(mag_zone.household.income_quintiles==4)</variable>
      <variable use="both" source="expression" name="raz2012.raz2012_hh_inc_quint05" type="variable_definition">raz2012.aggregate(mag_zone.household.income_quintiles==5)</variable>
      <variable use="both" source="expression" name="raz2012.raz2012_hh_age_of_head_under_25" type="variable_definition">raz2012.aggregate(mag_zone.household.age_of_head_under_25)</variable>
      <variable use="both" source="expression" name="raz2012.raz2012_hh_age_of_head_26_35" type="variable_definition">raz2012.aggregate(mag_zone.household.age_of_head_26_35)</variable>
      <variable use="both" source="expression" name="raz2012.raz2012_hh_age_of_head_36_45" type="variable_definition">raz2012.aggregate(mag_zone.household.age_of_head_36_45)</variable>
      <variable use="both" source="expression" name="raz2012.raz2012_hh_age_of_head_46_55" type="variable_definition">raz2012.aggregate(mag_zone.household.age_of_head_46_55)</variable>
      <variable use="both" source="expression" name="raz2012.raz2012_hh_age_of_head_56_65" type="variable_definition">raz2012.aggregate(mag_zone.household.age_of_head_56_65)</variable>
      <variable use="both" source="expression" name="raz2012.raz2012_hh_age_of_head_66_up" type="variable_definition">raz2012.aggregate(mag_zone.household.age_of_head_66_up)</variable>
      <variable use="both" source="expression" name="taz2012.number_of_jobs" type="variable_definition">taz2012.number_of_agents(job)</variable>
      <variable use="both" source="expression" name="taz2012.number_of_public_jobs" type="variable_definition">taz2012.aggregate(mag_zone.job.is_public_job)</variable>
      <variable use="both" source="expression" name="taz2012.number_of_industrial_jobs" type="variable_definition">taz2012.aggregate(mag_zone.job.is_industrial_job)</variable>
      <variable use="both" source="expression" name="taz2012.number_of_entertainment_jobs" type="variable_definition">taz2012.aggregate(mag_zone.job.is_entertainment_job)</variable>
      <variable use="both" source="expression" name="taz2012.number_of_homebased_jobs" type="variable_definition">taz2012.aggregate(mag_zone.job.is_homebased_job)</variable>
      <variable use="both" source="expression" name="taz2012.number_of_office_jobs" type="variable_definition">taz2012.aggregate(mag_zone.job.is_office_job)</variable>
      <variable use="both" source="expression" name="taz2012.number_of_agricultural_jobs" type="variable_definition">taz2012.aggregate(mag_zone.job.is_agricultural_job)</variable>
      <variable use="both" source="expression" name="taz2012.number_of_mining_jobs" type="variable_definition">taz2012.aggregate(mag_zone.job.is_mining_job)</variable>
      <variable use="both" source="expression" name="taz2012.number_of_utilities_jobs" type="variable_definition">taz2012.aggregate(mag_zone.job.is_utilities_job)</variable>
      <variable use="both" source="expression" name="taz2012.number_of_construction_jobs" type="variable_definition">taz2012.aggregate(mag_zone.job.is_construction_job)</variable>
      <variable use="both" source="expression" name="taz2012.number_of_manufacturing_jobs" type="variable_definition">taz2012.aggregate(mag_zone.job.is_manufacturing_job)</variable>
      <variable use="both" source="expression" name="taz2012.number_of_wholesale_jobs" type="variable_definition">taz2012.aggregate(mag_zone.job.is_wholesale_job)</variable>
      <variable use="both" source="expression" name="taz2012.number_of_retail_jobs" type="variable_definition">taz2012.aggregate(mag_zone.job.is_retail_job)</variable>
      <variable use="both" source="expression" name="taz2012.number_of_transportation_jobs" type="variable_definition">taz2012.aggregate(mag_zone.job.is_transportation_job)</variable>
      <variable use="both" source="expression" name="taz2012.number_of_information_jobs" type="variable_definition">taz2012.aggregate(mag_zone.job.is_information_job)</variable>
      <variable use="both" source="expression" name="taz2012.number_of_finance_jobs" type="variable_definition">taz2012.aggregate(mag_zone.job.is_finance_job)</variable>
      <variable use="both" source="expression" name="taz2012.number_of_realestate_jobs" type="variable_definition">taz2012.aggregate(mag_zone.job.is_realestate_job)</variable>
      <variable use="both" source="expression" name="taz2012.number_of_professional_jobs" type="variable_definition">taz2012.aggregate(mag_zone.job.is_professional_job)</variable>
      <variable use="both" source="expression" name="taz2012.number_of_healthcare_jobs" type="variable_definition">taz2012.aggregate(mag_zone.job.is_healthcare_job)</variable>
      <variable use="both" source="expression" name="taz2012.number_of_accomodation_jobs" type="variable_definition">taz2012.aggregate(mag_zone.job.is_accomodation_job)</variable>
      <variable use="both" source="expression" name="taz2012.number_of_foodservice_jobs" type="variable_definition">taz2012.aggregate(mag_zone.job.is_foodservice_job)</variable>
      <variable use="both" source="expression" name="taz2012.number_of_pubfedstate_jobs" type="variable_definition">taz2012.aggregate(mag_zone.job.is_pubfedstate_job)</variable>
      <variable use="both" source="expression" name="taz2012.number_of_publocal_jobs" type="variable_definition">taz2012.aggregate(mag_zone.job.is_publocal_job)</variable>
      <variable use="both" source="expression" name="taz2012.population" type="variable_definition">taz2012.number_of_agents(person)</variable>
      <variable use="both" source="expression" name="taz2012.average_population_age" type="variable_definition">taz2012.aggregate(person.age, function=mean)</variable>
      <variable use="both" source="expression" name="taz2012.median_population_age" type="variable_definition">taz2012.aggregate(person.age, function=median)</variable>
      <variable use="both" source="expression" name="taz2012.number_of_children" type="variable_definition">taz2012.aggregate(where(person.age &lt; 17, 1,0))</variable>
      <variable use="both" source="expression" name="taz2012.population_with_less_than_high_school_diploma" type="variable_definition">taz2012.aggregate(mag_zone.person.less_than_high_school_diploma)</variable>
      <variable use="both" source="expression" name="taz2012.population_with_at_least_high_school_diploma" type="variable_definition">taz2012.aggregate(mag_zone.person.at_least_high_school_diploma)</variable>
      <variable use="both" source="expression" name="taz2012.population_with_at_least_associates_degree" type="variable_definition">taz2012.aggregate(mag_zone.person.at_least_associates_degree)</variable>
      <variable use="both" source="expression" name="taz2012.population_with_at_least_bachelors_degree" type="variable_definition">taz2012.aggregate(mag_zone.person.at_least_bachelors_degree)</variable>
      <variable use="both" source="expression" name="taz2012.population_with_at_least_masters_degree" type="variable_definition">taz2012.aggregate(mag_zone.person.at_least_masters_degree)</variable>
      <variable use="both" source="expression" name="taz2012.average_adult_education" type="variable_definition">taz2012.aggregate(mag_zone.person.is_adult*person.education, function=mean)</variable>
      <variable use="both" source="expression" name="taz2012.number_of_hh_age_of_head_over_55" type="variable_definition">taz2012.aggregate(mag_zone.household.hh_head_over_55)</variable>
      <variable use="both" source="expression" name="taz2012.average_household_income" type="variable_definition">taz2012.aggregate(household.income, function=mean)</variable>
      <variable use="both" source="expression" name="taz2012.median_household_income" type="variable_definition">taz2012.aggregate(household.income, function=median)</variable>
      <variable use="both" source="expression" name="taz2012.number_of_households" type="variable_definition">taz2012.number_of_agents(household)</variable>
      <variable use="both" source="expression" name="taz2012.percent_hh_age_of_head_over_55" type="variable_definition">taz2012.aggregate(safe_array_divide(mag_zone.taz2012.number_of_hh_age_of_head_over_55, mag_zone.taz2012.number_of_households))</variable>
      <variable use="both" source="expression" name="tazi03.number_of_jobs" type="variable_definition">tazi03.number_of_agents(job)</variable>
      <variable use="both" source="expression" name="tazi03.number_of_public_jobs" type="variable_definition">tazi03.aggregate(job.sector_id==21)+tazi03.aggregate(job.sector_id==22)</variable>
      <variable use="both" source="expression" name="tazi03.number_of_industrial_jobs" type="variable_definition">tazi03.aggregate(job.sector_id==2)+tazi03.aggregate(job.sector_id==5)+tazi03.aggregate(job.sector_id==6)+tazi03.aggregate(job.sector_id==8)</variable>
      <variable use="both" source="expression" name="tazi03.number_of_entertainment_jobs" type="variable_definition">tazi03.aggregate(job.sector_id==7)+tazi03.aggregate(job.sector_id==18)+tazi03.aggregate(job.sector_id==19)</variable>
      <variable use="both" source="expression" name="tazi03.number_of_homebased_jobs" type="variable_definition">tazi03.aggregate(job.home_based==1)</variable>
      <variable use="both" source="expression" name="tazi03.number_of_office_jobs" type="variable_definition">tazi03.aggregate(mag_zone.job.is_office_job)</variable>
      <variable use="both" source="expression" name="tazi03.number_of_agricultural_jobs" type="variable_definition">tazi03.aggregate(mag_zone.job.is_agricultural_job)</variable>
      <variable use="both" source="expression" name="tazi03.number_of_mining_jobs" type="variable_definition">tazi03.aggregate(mag_zone.job.is_mining_job)</variable>
      <variable use="both" source="expression" name="tazi03.number_of_utilities_jobs" type="variable_definition">tazi03.aggregate(mag_zone.job.is_utilities_job)</variable>
      <variable use="both" source="expression" name="tazi03.number_of_construction_jobs" type="variable_definition">tazi03.aggregate(mag_zone.job.is_construction_job)</variable>
      <variable use="both" source="expression" name="tazi03.number_of_manufacturing_jobs" type="variable_definition">tazi03.aggregate(mag_zone.job.is_manufacturing_job)</variable>
      <variable use="both" source="expression" name="tazi03.number_of_wholesale_jobs" type="variable_definition">tazi03.aggregate(mag_zone.job.is_wholesale_job)</variable>
      <variable use="both" source="expression" name="tazi03.number_of_retail_jobs" type="variable_definition">tazi03.aggregate(mag_zone.job.is_retail_job)</variable>
      <variable use="both" source="expression" name="tazi03.number_of_transportation_jobs" type="variable_definition">tazi03.aggregate(mag_zone.job.is_transportation_job)</variable>
      <variable use="both" source="expression" name="tazi03.number_of_information_jobs" type="variable_definition">tazi03.aggregate(mag_zone.job.is_information_job)</variable>
      <variable use="both" source="expression" name="tazi03.number_of_finance_jobs" type="variable_definition">tazi03.aggregate(mag_zone.job.is_finance_job)</variable>
      <variable use="both" source="expression" name="tazi03.number_of_realestate_jobs" type="variable_definition">tazi03.aggregate(mag_zone.job.is_realestate_job)</variable>
      <variable use="both" source="expression" name="tazi03.number_of_professional_jobs" type="variable_definition">tazi03.aggregate(mag_zone.job.is_professional_job)</variable>
      <variable use="both" source="expression" name="tazi03.number_of_healthcare_jobs" type="variable_definition">tazi03.aggregate(mag_zone.job.is_healthcare_job)</variable>
      <variable use="both" source="expression" name="tazi03.number_of_accomodation_jobs" type="variable_definition">tazi03.aggregate(mag_zone.job.is_accomodation_job)</variable>
      <variable use="both" source="expression" name="tazi03.number_of_foodservice_jobs" type="variable_definition">tazi03.aggregate(mag_zone.job.is_foodservice_job)</variable>
      <variable use="both" source="expression" name="tazi03.number_of_pubfedstate_jobs" type="variable_definition">tazi03.aggregate(mag_zone.job.is_pubfedstate_job)</variable>
      <variable use="both" source="expression" name="tazi03.number_of_publocal_jobs" type="variable_definition">tazi03.aggregate(mag_zone.job.is_publocal_job)</variable>
      <variable use="both" source="expression" name="tazi03.number_of_pop" type="variable_definition">tazi03.number_of_agents(person)</variable>
      <variable use="both" source="expression" name="tazi03.average_population_age" type="variable_definition">tazi03.aggregate(person.age, function=mean)</variable>
      <variable use="both" source="expression" name="tazi03.median_population_age" type="variable_definition">tazi03.aggregate(person.age, function=median)</variable>
      <variable use="both" source="expression" name="tazi03.number_of_children" type="variable_definition">tazi03.aggregate(where(person.age &lt; 17, 1,0))</variable>
      <variable use="both" source="expression" name="tazi03.population_with_less_than_high_school_diploma" type="variable_definition">tazi03.aggregate(mag_zone.person.less_than_high_school_diploma)</variable>
      <variable use="both" source="expression" name="tazi03.population_with_at_least_high_school_diploma" type="variable_definition">tazi03.aggregate(mag_zone.person.at_least_high_school_diploma)</variable>
      <variable use="both" source="expression" name="tazi03.population_with_at_least_associates_degree" type="variable_definition">tazi03.aggregate(mag_zone.person.at_least_associates_degree)</variable>
      <variable use="both" source="expression" name="tazi03.population_with_at_least_bachelors_degree" type="variable_definition">tazi03.aggregate(mag_zone.person.at_least_bachelors_degree)</variable>
      <variable use="both" source="expression" name="tazi03.population_with_at_least_masters_degree" type="variable_definition">tazi03.aggregate(mag_zone.person.at_least_masters_degree)</variable>
      <variable use="both" source="expression" name="tazi03.average_adult_education" type="variable_definition">tazi03.aggregate(mag_zone.person.is_adult*person.education, function=mean)</variable>
      <variable use="both" source="expression" name="tazi03.number_of_hh_age_of_head_over_55" type="variable_definition">tazi03.aggregate(mag_zone.household.hh_head_over_55)</variable>
      <variable use="both" source="expression" name="tazi03.average_household_income" type="variable_definition">tazi03.aggregate(household.income, function=mean)</variable>
      <variable use="both" source="expression" name="tazi03.median_household_income" type="variable_definition">tazi03.aggregate(household.income, function=median)</variable>
      <variable use="both" source="expression" name="tazi03.number_of_households" type="variable_definition">tazi03.number_of_agents(household)</variable>
      <variable use="both" source="expression" name="tazi03.percent_hh_age_of_head_over_55" type="variable_definition">tazi03.aggregate(safe_array_divide(mag_zone.tazi03.number_of_hh_age_of_head_over_55,mag_zone.tazi03.number_of_households))</variable>
      <variable use="both" source="expression" name="tazi03.developable_sf_units_capacity" type="variable_definition">tazi03.aggregate(where(building.building_type_id == 1,urbansim_zone.building.developable_residential_units_capacity,0))</variable>
      <variable use="both" source="expression" name="tazi03.developable_mf_units_capacity" type="variable_definition">tazi03.aggregate(where(building.building_type_id == 2,urbansim_zone.building.developable_residential_units_capacity,0))</variable>
      <variable use="both" source="expression" name="tazi03.developable_non_res_capacity" type="variable_definition">tazi03.aggregate(where(building.building_type_id &gt; 3,urbansim_zone.building.developable_non_residential_sqft_capacity,0))</variable>
      <variable use="both" source="expression" name="tazi03.vacant_res_units" type="variable_definition">tazi03.aggregate(urbansim_zone.building.vacant_residential_units)</variable>
      <variable use="both" source="expression" name="tazi03.vacant_job_spaces" type="variable_definition">tazi03.aggregate(urbansim_zone.building.vacant_job_spaces)</variable>
      <variable use="both" source="expression" name="zone.number_of_households" type="variable_definition">zone.number_of_agents(household)</variable>
      <variable use="both" source="expression" name="zone.number_of_jobs" type="variable_definition">zone.number_of_agents(job)</variable>
      <variable use="both" source="expression" name="zone.total_households_and_jobs" type="variable_definition">mag_zone.zone.number_of_households + mag_zone.zone.number_of_jobs</variable>
      <variable use="both" source="expression" name="zone.bldg_sqft_constructed_this_year" type="variable_definition">clip_to_zero(zone.aggregate(mag_zone.building.bldg_sqft_constructed_this_year))</variable>
      <variable use="both" source="expression" name="zone.locationid" type="variable_definition">zone.zone_id - 100</variable>
      <!-- Variables generated in GUI  -->
      <!-- Variables generated from script  -->
      <!-- Variables generated in GUI  -->
      <!-- Variables generated from script  -->
      <!-- Variables generated in GUI  -->
      <!-- Variables generated from script  -->
      <!-- Variables generated in GUI  -->
      <!-- Variables generated from script  -->
      <!-- Variables generated in GUI  -->
      <!-- Variables generated from script  -->
      <!-- Variables generated in GUI  -->
      <!-- Variables generated from script  -->
      <!-- Variables generated in GUI  -->
      <!-- Variables generated from script  -->
      <!-- Variables generated in GUI  -->
      <!-- Variables generated from script  -->
      <variable use="both" source="expression" name="super_raz.number_of_education_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_educ_svcs_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_other_services_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_other_svcs_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_medical_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_healthcare_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_administrative_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_admin_support_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_management_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_management_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_arts_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_arts_ent_rec_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_srazpublic_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_srazpublic_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_jobs" type="variable_definition">super_raz.number_of_agents(job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_public_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_public_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_industrial_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_industrial_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_entertainment_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_entertainment_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_homebased_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_homebased_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_nonhomebased_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_nonhomebased_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_01agricultural_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_agricultural_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_02mining_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_mining_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_03utilities_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_utilities_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_04construction_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_construction_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_05manufacturing_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_manufacturing_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_06wholesale_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_wholesale_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_07retail_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_retail_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_08transportation_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_transportation_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_09information_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_information_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_10finance_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_finance_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_11realestate_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_realestate_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_12professional_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_professional_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_13management_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_management_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_14administrative_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_admin_support_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_15education_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_educ_svcs_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_16healthcare_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_healthcare_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_16medical_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_healthcare_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_17arts_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_arts_ent_rec_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_18accomodation_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_accomodation_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_19foodservice_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_foodservice_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_20other_services_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_other_svcs_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_21pubfedstate_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_pubfedstate_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_22publocal_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_publocal_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_nhb_01agricultural_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_agricultural_job * mag_zone.job.is_nonhomebased_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_nhb_02mining_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_mining_job * mag_zone.job.is_nonhomebased_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_nhb_03utilities_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_utilities_job * mag_zone.job.is_nonhomebased_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_nhb_04construction_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_construction_job * mag_zone.job.is_nonhomebased_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_nhb_05manufacturing_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_manufacturing_job * mag_zone.job.is_nonhomebased_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_nhb_06wholesale_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_wholesale_job * mag_zone.job.is_nonhomebased_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_nhb_07retail_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_retail_job * mag_zone.job.is_nonhomebased_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_nhb_08transportation_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_transportation_job * mag_zone.job.is_nonhomebased_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_nhb_09information_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_information_job * mag_zone.job.is_nonhomebased_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_nhb_10finance_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_finance_job * mag_zone.job.is_nonhomebased_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_nhb_11realestate_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_realestate_job * mag_zone.job.is_nonhomebased_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_nhb_12professional_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_professional_job * mag_zone.job.is_nonhomebased_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_nhb_13management_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_management_job * mag_zone.job.is_nonhomebased_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_nhb_14administrative_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_admin_support_job * mag_zone.job.is_nonhomebased_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_nhb_15education_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_educ_svcs_job * mag_zone.job.is_nonhomebased_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_nhb_16healthcare_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_healthcare_job * mag_zone.job.is_nonhomebased_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_nhb_16medical_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_healthcare_job * mag_zone.job.is_nonhomebased_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_nhb_17arts_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_arts_ent_rec_job * mag_zone.job.is_nonhomebased_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_nhb_18accomodation_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_accomodation_job * mag_zone.job.is_nonhomebased_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_nhb_19foodservice_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_foodservice_job * mag_zone.job.is_nonhomebased_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_nhb_20other_services_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_other_svcs_job * mag_zone.job.is_nonhomebased_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_nhb_21pubfedstate_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_pubfedstate_job * mag_zone.job.is_nonhomebased_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_nhb_22publocal_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_publocal_job * mag_zone.job.is_nonhomebased_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_hb_01agricultural_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_agricultural_job * mag_zone.job.is_homebased_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_hb_02mining_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_mining_job * mag_zone.job.is_homebased_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_hb_03utilities_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_utilities_job * mag_zone.job.is_homebased_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_hb_04construction_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_construction_job * mag_zone.job.is_homebased_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_hb_05manufacturing_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_manufacturing_job * mag_zone.job.is_homebased_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_hb_06wholesale_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_wholesale_job * mag_zone.job.is_homebased_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_hb_07retail_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_retail_job * mag_zone.job.is_homebased_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_hb_08transportation_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_transportation_job * mag_zone.job.is_homebased_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_hb_09information_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_information_job * mag_zone.job.is_homebased_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_hb_10finance_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_finance_job * mag_zone.job.is_homebased_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_hb_11realestate_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_realestate_job * mag_zone.job.is_homebased_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_hb_12professional_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_professional_job * mag_zone.job.is_homebased_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_hb_13management_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_management_job * mag_zone.job.is_homebased_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_hb_14administrative_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_admin_support_job * mag_zone.job.is_homebased_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_hb_15education_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_educ_svcs_job * mag_zone.job.is_homebased_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_hb_16healthcare_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_healthcare_job * mag_zone.job.is_homebased_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_hb_16medical_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_healthcare_job * mag_zone.job.is_homebased_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_hb_17arts_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_arts_ent_rec_job * mag_zone.job.is_homebased_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_hb_18accomodation_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_accomodation_job * mag_zone.job.is_homebased_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_hb_19foodservice_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_foodservice_job * mag_zone.job.is_homebased_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_hb_20other_services_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_other_svcs_job * mag_zone.job.is_homebased_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_hb_21pubfedstate_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_pubfedstate_job * mag_zone.job.is_homebased_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_hb_22publocal_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_publocal_job * mag_zone.job.is_homebased_job)</variable>
      <variable use="both" source="expression" name="super_raz.population" type="variable_definition">super_raz.number_of_agents(person)</variable>
      <variable use="both" source="expression" name="super_raz.average_population_age" type="variable_definition">super_raz.aggregate(person.age, function=mean)</variable>
      <variable use="both" source="expression" name="super_raz.median_population_age" type="variable_definition">super_raz.aggregate(person.age, function=median)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_children" type="variable_definition">super_raz.aggregate(where(person.age &lt; 17, 1,0))</variable>
      <variable use="both" source="expression" name="super_raz.population_with_less_than_high_school_diploma" type="variable_definition">super_raz.aggregate(mag_zone.person.less_than_high_school_diploma)</variable>
      <variable use="both" source="expression" name="super_raz.population_with_at_least_high_school_diploma" type="variable_definition">super_raz.aggregate(mag_zone.person.at_least_high_school_diploma)</variable>
      <variable use="both" source="expression" name="super_raz.population_with_at_least_associates_degree" type="variable_definition">super_raz.aggregate(mag_zone.person.at_least_associates_degree)</variable>
      <variable use="both" source="expression" name="super_raz.population_with_at_least_bachelors_degree" type="variable_definition">super_raz.aggregate(mag_zone.person.at_least_bachelors_degree)</variable>
      <variable use="both" source="expression" name="super_raz.population_with_at_least_masters_degree" type="variable_definition">super_raz.aggregate(mag_zone.person.at_least_masters_degree)</variable>
      <variable use="both" source="expression" name="super_raz.average_adult_education" type="variable_definition">super_raz.aggregate(mag_zone.person.is_adult*person.education, function=mean)</variable>
      <variable use="both" source="expression" name="super_raz.seasonal_pop" type="variable_definition">super_raz.aggregate(household.is_seasonal)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_hh_age_of_head_over_55" type="variable_definition">super_raz.aggregate(mag_zone.household.hh_head_over_55)</variable>
      <variable use="both" source="expression" name="super_raz.average_household_income" type="variable_definition">super_raz.aggregate(household.income, function=mean)</variable>
      <variable use="both" source="expression" name="super_raz.median_household_income" type="variable_definition">super_raz.aggregate(household.income, function=median)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_households" type="variable_definition">super_raz.number_of_agents(household)</variable>
      <variable use="both" source="expression" name="super_raz.percent_hh_age_of_head_over_55" type="variable_definition">super_raz.aggregate(safe_array_divide(mag_zone.super_raz.number_of_hh_age_of_head_over_55, mag_zone.super_raz.number_of_households))</variable>
      <variable use="both" source="expression" name="super_raz.super_raz_hh_inc_quint01" type="variable_definition">super_raz.aggregate(mag_zone.household.income_quintiles==1)</variable>
      <variable use="both" source="expression" name="super_raz.super_raz_hh_inc_quint02" type="variable_definition">super_raz.aggregate(mag_zone.household.income_quintiles==2)</variable>
      <variable use="both" source="expression" name="super_raz.super_raz_hh_inc_quint03" type="variable_definition">super_raz.aggregate(mag_zone.household.income_quintiles==3)</variable>
      <variable use="both" source="expression" name="super_raz.super_raz_hh_inc_quint04" type="variable_definition">super_raz.aggregate(mag_zone.household.income_quintiles==4)</variable>
      <variable use="both" source="expression" name="super_raz.super_raz_hh_inc_quint05" type="variable_definition">super_raz.aggregate(mag_zone.household.income_quintiles==5)</variable>
      <variable use="both" source="expression" name="super_raz.super_raz_hh_age_of_head_under_25" type="variable_definition">super_raz.aggregate(mag_zone.household.age_of_head_under_25)</variable>
      <variable use="both" source="expression" name="super_raz.super_raz_hh_age_of_head_26_35" type="variable_definition">super_raz.aggregate(mag_zone.household.age_of_head_26_35)</variable>
      <variable use="both" source="expression" name="super_raz.super_raz_hh_age_of_head_36_45" type="variable_definition">super_raz.aggregate(mag_zone.household.age_of_head_36_45)</variable>
      <variable use="both" source="expression" name="super_raz.super_raz_hh_age_of_head_46_55" type="variable_definition">super_raz.aggregate(mag_zone.household.age_of_head_46_55)</variable>
      <variable use="both" source="expression" name="super_raz.super_raz_hh_age_of_head_56_65" type="variable_definition">super_raz.aggregate(mag_zone.household.age_of_head_56_65)</variable>
      <variable use="both" source="expression" name="super_raz.super_raz_hh_age_of_head_66_up" type="variable_definition">super_raz.aggregate(mag_zone.household.age_of_head_66_up)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_srazother_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_srazother_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_srazoffice_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_srazoffice_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_srazindustrial_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_srazindustrial_job)</variable>
      <variable use="both" source="expression" name="super_raz.number_of_srazretail_jobs" type="variable_definition">super_raz.aggregate(mag_zone.job.is_srazretail_job)</variable>
    </expression_library>
  </general>
  <model_manager>
    <templates name="Model Templates" parser_action="skip" hidden="True"/>
    <models config_name="model_system" hidden="False" name="Models" setexpanded="True" type="dictionary">
      <model name="household_transition_model" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module>urbansim.models.transition_model</class_module>
            <class_name>TransitionModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">TransitionModel</name>
            <argument name="dataset" type="string">household</argument>
            <argument name="model_name" parser_action="quote_string" type="string">Household Transition Model</argument>
            <argument name="model_short_name" parser_action="quote_string" type="string">HTM</argument>
            <argument name="target_attribute_name" parser_action="quote_string" type="string">total_population</argument>
            <argument name="dataset_accounting_attribute" parser_action="quote_string" type="string">persons</argument>
          </init>
          <prepare_for_run type="dictionary">
            <name name="name" type="string">prepare_for_run</name>
            <argument name="control_total_table" parser_action="quote_string" type="string">annual_household_control_totals</argument>
            <argument name="control_total_storage" type="string">base_cache_storage</argument>
          </prepare_for_run>
          <run type="dictionary">
            <argument name="year" type="string">year</argument>
            <argument name="sampling_hierarchy" convert_blank_to_none="True" type="string"/>
            <argument name="sampling_threshold" convert_blank_to_none="True" type="string"/>
            <argument name="target_attribute_name" parser_action="quote_string" type="string">total_population</argument>
            <argument name="reset_dataset_attribute_value" type="string">{'super_raz_id':-1}</argument>
            <argument name="sync_dataset" convert_blank_to_none="True" type="string">person</argument>
          </run>
        </structure>
      </model>
      <model name="employment_transition_model" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module>urbansim.models.transition_model</class_module>
            <class_name>TransitionModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">TransitionModel</name>
            <argument name="dataset" type="string">job</argument>
            <argument name="model_name" parser_action="quote_string" type="string">Employment Transition Model</argument>
            <argument name="model_short_name" parser_action="quote_string" type="string">ETM</argument>
          </init>
          <prepare_for_run type="dictionary">
            <name name="name" type="string">prepare_for_run</name>
            <argument name="control_total_table" parser_action="quote_string" type="string">annual_employment_control_totals</argument>
            <argument name="control_total_storage" type="string">base_cache_storage</argument>
          </prepare_for_run>
          <run type="dictionary">
            <argument name="year" type="string">year</argument>
            <argument name="target_attribute_name" parser_action="quote_string" type="string">total_number_of_jobs</argument>
            <argument name="reset_dataset_attribute_value" type="string">{'super_raz_id':-1}</argument>
          </run>
        </structure>
      </model>
      <model name="employment_location_choice_model" type="model">
        <dependencies type="list">['employment_relocation_model']</dependencies>
        <estimation_config name="Estimation Configuration" parser_action="skip">
          <config_override config_name="models" name="Models to run before estimation" type="list">[]</config_override>
        </estimation_config>
        <structure type="dictionary">
          <group_by_attribute type="list">('home_based_status', 'name')</group_by_attribute>
          <import name="import" type="dictionary">
            <class_module>urbansim.models.employment_location_choice_model</class_module>
            <class_name>EmploymentLocationChoiceModel</class_name>
          </import>
          <init type="dictionary">
            <argument convert_blank_to_none="True" name="location_id_string" type="string">"super_raz_id"</argument>
            <argument convert_blank_to_none="True" name="submodel_string" type="string"/>
            <argument name="agents_grouping_attribute" parser_action="quote_string" type="string">job.home_based_status</argument>
            <argument convert_blank_to_none="True" name="number_of_units_string" type="string"/>
            <argument name="compute_capacity_flag" type="boolean">True</argument>
            <argument convert_blank_to_none="True" name="capacity_string" parser_action="quote_string" type="string">clip_to_zero(mag_zone.super_raz.number_of_households - mag_zone.super_raz.number_of_homebased_jobs)</argument>
            <argument convert_blank_to_none="True" parser_action="quote_string" name="estimation_weight_string" type="string"/>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
            <argument name="choices" parser_action="quote_string" type="string">urbansim.lottery_choices</argument>
            <argument convert_blank_to_none="True" parser_action="quote_string" name="filter" type="string">super_raz_id&gt;0</argument>
            <argument name="variable_package" parser_action="quote_string" type="string">urbansim_zone</argument>
            <argument name="run_config" type="dictionary">
              <key name="lottery_max_iterations" type="integer">3</key>
              <key convert_blank_to_none="True" name="agent_units_string" type="string"/>
            </argument>
            <argument name="location_set" type="string">super_raz</argument>
            <argument name="estimation_size_agents" type="float">1.0</argument>
            <argument name="sampler" parser_action="quote_string" type="string">opus_core.samplers.weighted_sampler</argument>
            <argument convert_blank_to_none="True" parser_action="quote_string" name="simulation_weight_string" type="string"/>
            <argument name="estimation" parser_action="quote_string" type="string">opus_core.bhhh_mnl_estimation_with_diagnose</argument>
            <argument name="sample_size_locations" type="integer">10</argument>
            <name name="name" type="string">EmploymentLocationChoiceModel</name>
          </init>
          <prepare_for_run type="dictionary">
            <output name="output" type="string">(specification, coefficients)</output>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_table" parser_action="quote_string" type="string">employment_location_choice_model_coefficients</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">employment_location_choice_model_specification</argument>
            <name name="name" type="string">prepare_for_run</name>
          </prepare_for_run>
          <run type="dictionary">
            <argument name="chunk_specification" type="string">{'records_per_chunk':50000}</argument>
            <argument name="agent_set" type="string">job</argument>
            <argument name="specification" type="string">specification</argument>
            <argument name="maximum_runs" type="integer">3</argument>
            <argument name="agents_index" type="string">erm_index</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
            <argument name="coefficients" type="string">coefficients</argument>
          </run>
          <prepare_for_estimate type="dictionary">
            <output name="output" type="string">(specification, index)</output>
            <argument name="portion_to_unplace" type="float">0.0833333333</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">employment_location_choice_model_specification</argument>
            <argument name="agent_set" type="string">job</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument convert_blank_to_none="True" name="filter" type="string" parser_action="quote_string"/>
            <argument name="data_objects" type="string">datasets</argument>
            <argument convert_blank_to_none="True" name="agents_for_estimation_table" parser_action="quote_string" type="string">jobs_for_estimation</argument>
            <argument convert_blank_to_none="True" name="agents_for_estimation_storage" type="string">base_cache_storage</argument>
            <argument name="join_datasets" type="boolean">False</argument>
            <name name="name" type="string">prepare_for_estimate</name>
          </prepare_for_estimate>
          <estimate type="dictionary">
            <output name="output" type="string">(coefficients, _)</output>
            <argument name="specification" type="string">specification</argument>
            <argument name="agent_set" type="string">job</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument name="agents_index" type="string">index</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
          </estimate>
        </structure>
        <specification type="dictionary" inherit_parent_values="False">
          <submodel_group name="home_based" type="submodel_group">
            <submodel hidden="Children" name="submodel" submodel_id="-2" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list">
                <variable_spec name="super_raz.sraz_avg_adult_education"/>
                <variable_spec name="super_raz.sraz_home_based_job_density_per_acre"/>
                <variable_spec name="super_raz.sraz_household_density_per_acre"/>
                <variable_spec name="super_raz.sraz_in_central_valley"/>
              </variable_list>
            </submodel>
          </submodel_group>
        </specification>
      </model>
      <model name="residential_development_project_location_choice_model" type="model">
        <dependencies type="list">['development_project_transition_model']</dependencies>
        <estimation_config name="Estimation Configuration" parser_action="skip">
          <config_override config_name="models" name="Models to run before estimation" type="list">[]</config_override>
        </estimation_config>
        <structure type="dictionary">
          <run type="dictionary">
            <argument name="chunk_specification" type="string">{'nchunks':3}</argument>
            <argument name="agent_set" type="string">projects</argument>
            <argument name="agents_filter" parser_action="quote_string" type="string">urbansim_zone.development_project.is_residential</argument>
            <argument name="specification" type="string">specification</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
            <argument name="coefficients" type="string">coefficients</argument>
          </run>
          <init type="dictionary">
            <argument name="sampler" parser_action="quote_string" type="string">opus_core.samplers.weighted_sampler</argument>
            <argument convert_blank_to_none="True" name="submodel_string" parser_action="quote_string" type="string">building_type_id</argument>
            <argument name="location_set" type="string">building</argument>
            <argument name="model_name" parser_action="quote_string" type="string">Residential Development Project Location Choice Model</argument>
            <argument name="variable_package" parser_action="quote_string" type="string">urbansim_zone</argument>
            <argument name="choices" parser_action="quote_string" type="string">urbansim.lottery_choices</argument>
            <argument name="filter" parser_action="quote_string" type="string">(building.building_type_id==SUBMODEL)*(urbansim_zone.building.developable_residential_units_capacity&gt;0)</argument>
            <argument name="run_config" type="dictionary">
              <key name="lottery_max_iterations" type="integer">3</key>
              <key convert_blank_to_none="True" name="agent_units_string" type="string">residential_units</key>
              <key name="compute_capacity_flag" type="string">True</key>
              <key name="capacity_string" type="string">urbansim_zone.building.developable_residential_units_capacity</key>
              <key name="sample_alternatives_by_submodel" type="string">True</key>
              <key convert_blank_to_none="True" name="weights_for_simulation_string" type="string"/>
              <key name="sample_size_locations" type="integer">30</key>
            </argument>
            <argument name="estimate_config" type="dictionary">
              <key name="estimation" type="string">opus_core.bhhh_mnl_estimation</key>
              <key convert_blank_to_none="True" name="agent_units_string" type="string">residential_units</key>
              <key name="capacity_string" type="string">urbansim_zone.building.residential_units_capacity</key>
              <key name="compute_capacity_flag" type="string">True</key>
              <key name="sample_alternatives_by_submodel" type="string">True</key>
              <key convert_blank_to_none="True" name="weights_for_estimation_string" type="string"/>
              <key name="sample_size_locations" type="integer">30</key>
            </argument>
            <name name="name" type="string">DevelopmentProjectLocationChoiceModel</name>
          </init>
          <import name="import" type="dictionary">
            <class_module>urbansim_zone.models.development_project_location_choice_model</class_module>
            <class_name>DevelopmentProjectLocationChoiceModel</class_name>
          </import>
          <estimate type="dictionary">
            <output name="output" type="string">(coefficients, _)</output>
            <argument name="specification" type="string">specification</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument name="agent_set" type="string">projects</argument>
          </estimate>
          <prepare_for_run type="dictionary">
            <output name="output" type="string">(specification, coefficients)</output>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_table" parser_action="quote_string" type="string">residential_development_location_choice_model_coefficients</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">residential_development_location_choice_model_specification</argument>
            <name name="name" type="string">prepare_for_run</name>
          </prepare_for_run>
          <prepare_for_estimate type="dictionary">
            <output name="output" type="string">(specification, projects)</output>
            <argument name="specification_table" parser_action="quote_string" type="string">residential_development_location_choice_model_specification</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="events_for_estimation_storage" type="string">base_cache_storage</argument>
            <argument name="events_for_estimation_table" parser_action="quote_string" type="string">development_event_history</argument>
            <argument name="agents_filter" parser_action="quote_string" type="string">numpy.logical_and(development_project.disaggregate(building_type.is_residential), development_project.scheduled_year&gt;=2000)</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <name name="name" type="string">prepare_for_estimate</name>
          </prepare_for_estimate>
        </structure>
        <specification type="dictionary">
          <submodel hidden="Children" name="submodel" submodel_id="-2" type="submodel">
            <description type="string">No submodel</description>
            <variable_list type="variable_list"/>
          </submodel>
        </specification>
      </model>
      <model name="non_residential_development_project_location_choice_model" type="model">
        <dependencies type="list">['development_project_transition_model']</dependencies>
        <estimation_config name="Estimation Configuration" parser_action="skip">
          <config_override config_name="models" name="Models to run before estimation" type="list">[]</config_override>
        </estimation_config>
        <structure type="dictionary">
          <run type="dictionary">
            <argument name="chunk_specification" type="string">{'nchunks':3}</argument>
            <argument name="agent_set" type="string">projects</argument>
            <argument name="agents_filter" parser_action="quote_string" type="string">urbansim_zone.development_project.is_non_residential</argument>
            <argument name="specification" type="string">specification</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
            <argument name="coefficients" type="string">coefficients</argument>
          </run>
          <init type="dictionary">
            <argument name="sampler" parser_action="quote_string" type="string">opus_core.samplers.weighted_sampler</argument>
            <argument convert_blank_to_none="True" name="submodel_string" parser_action="quote_string" type="string">building_type_id</argument>
            <argument name="location_set" type="string">building</argument>
            <argument name="model_name" parser_action="quote_string" type="string">Non-Residential Development Project Location Choice Model</argument>
            <argument name="variable_package" parser_action="quote_string" type="string">urbansim_zone</argument>
            <argument name="choices" parser_action="quote_string" type="string">urbansim.lottery_choices</argument>
            <argument name="filter" parser_action="quote_string" type="string">(building.building_type_id==SUBMODEL)*(urbansim_zone.building.developable_non_residential_sqft_capacity&gt;0)</argument>
            <argument name="run_config" type="dictionary">
              <key name="lottery_max_iterations" type="integer">3</key>
              <key convert_blank_to_none="True" name="agent_units_string" type="string">residential_units</key>
              <key name="capacity_string" type="string">urbansim_zone.building.developable_non_residential_sqft_capacity</key>
              <key convert_blank_to_none="True" name="weights_for_simulation_string" type="string"/>
              <key name="compute_capacity_flag" type="string">True</key>
              <key name="sample_alternatives_by_submodel" type="string">True</key>
              <key name="sample_size_locations" type="integer">30</key>
            </argument>
            <argument name="estimate_config" type="dictionary">
              <key name="estimation" type="string">opus_core.bhhh_mnl_estimation</key>
              <key convert_blank_to_none="True" name="agent_units_string" type="string">non_residential_sqft</key>
              <key name="capacity_string" type="string">urbansim_zone.building.non_residential_sqft_capacity</key>
              <key convert_blank_to_none="True" name="weights_for_estimation_string" type="string"/>
              <key name="compute_capacity_flag" type="string">True</key>
              <key name="sample_alternatives_by_submodel" type="string">True</key>
              <key name="sample_size_locations" type="integer">30</key>
            </argument>
            <name name="name" type="string">DevelopmentProjectLocationChoiceModel</name>
          </init>
          <import name="import" type="dictionary">
            <class_module>urbansim_zone.models.development_project_location_choice_model</class_module>
            <class_name>DevelopmentProjectLocationChoiceModel</class_name>
          </import>
          <estimate type="dictionary">
            <output name="output" type="string">(coefficients, _)</output>
            <argument name="specification" type="string">specification</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument name="agent_set" type="string">projects</argument>
          </estimate>
          <prepare_for_run type="dictionary">
            <output name="output" type="string">(specification, coefficients)</output>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_table" parser_action="quote_string" type="string">non_residential_development_location_choice_model_coefficients</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">non_residential_development_location_choice_model_specification</argument>
            <name name="name" type="string">prepare_for_run</name>
          </prepare_for_run>
          <prepare_for_estimate type="dictionary">
            <output name="output" type="string">(specification, projects)</output>
            <argument name="specification_table" parser_action="quote_string" type="string">non_residential_development_location_choice_model_specification</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="events_for_estimation_storage" type="string">base_cache_storage</argument>
            <argument name="events_for_estimation_table" parser_action="quote_string" type="string">development_event_history</argument>
            <argument name="agents_filter" parser_action="quote_string" type="string">numpy.logical_and(development_project.disaggregate(building_type.is_residential==0), development_project.scheduled_year&gt;=2000)</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <name name="name" type="string">prepare_for_estimate</name>
          </prepare_for_estimate>
        </structure>
        <specification type="dictionary">
          <submodel hidden="Children" name="submodel" submodel_id="-2" type="submodel">
            <description type="string">No submodel</description>
            <variable_list type="variable_list"/>
          </submodel>
        </specification>
      </model>
      <model name="household_location_choice_model" type="model">
        <dependencies type="list">['household_relocation_model']</dependencies>
        <estimation_config name="Estimation Configuration" parser_action="skip">
          <config_override config_name="models" name="Models to run before estimation" type="list">[]</config_override>
        </estimation_config>
        <structure type="dictionary">
          <run type="dictionary">
            <argument name="chunk_specification" type="string">{'nchunks':1}</argument>
            <argument name="agent_set" type="string">household</argument>
            <argument name="specification" type="string">specification</argument>
            <argument name="maximum_runs" type="integer">10</argument>
            <argument name="agents_index" type="string">hrm_index</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
            <argument name="coefficients" type="string">coefficients</argument>
          </run>
          <init type="dictionary">
            <argument name="variable_package" parser_action="quote_string" type="string">urbansim_zone</argument>
            <argument convert_blank_to_none="True" name="location_id_string" type="string">"super_raz_id"</argument>
            <argument convert_blank_to_none="True" name="submodel_string" type="string">-2</argument>
            <argument name="capacity_string" parser_action="quote_string" type="string">clip_to_zero(super_raz.residential_capacity - (numpy.ceil(mag_zone.super_raz.number_of_households*1.09).astype('int')))</argument>
            <argument name="filter" parser_action="quote_string" type="string">super_raz_id&gt;0</argument>
            <argument convert_blank_to_none="True" name="estimation_weight_string" parser_action="quote_string" type="string"/>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
            <argument name="choices" parser_action="quote_string" type="string">urbansim.lottery_choices</argument>
            <argument name="number_of_agents_string" parser_action="quote_string" type="string">number_of_households</argument>
            <argument convert_blank_to_none="True" name="number_of_units_string" type="string"/>
            <argument name="run_config" type="string">Resources({'lottery_max_iterations': 10, })</argument>
            <argument name="location_set" type="string">super_raz</argument>
            <argument convert_blank_to_none="True" name="estimation_size_agents" type="string"/>
            <argument name="sampler" parser_action="quote_string" type="string">opus_core.samplers.weighted_sampler</argument>
            <argument convert_blank_to_none="True" parser_action="quote_string" name="simulation_weight_string" type="string"/>
            <argument name="estimation" parser_action="quote_string" type="string">opus_core.bhhh_mnl_estimation_with_diagnose</argument>
            <argument name="sample_size_locations" type="integer">10</argument>
            <argument name="estimate_config" type="string">Resources({})</argument>
            <name name="name" type="string">HouseholdLocationChoiceModel</name>
          </init>
          <import name="import" type="dictionary">
            <class_module>urbansim.models.household_location_choice_model</class_module>
            <class_name>HouseholdLocationChoiceModel</class_name>
          </import>
          <estimate type="dictionary">
            <output name="output" type="string">(coefficients, _)</output>
            <argument name="specification" type="string">specification</argument>
            <argument name="agent_set" type="string">household</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument name="agents_index" type="string">index</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
          </estimate>
          <prepare_for_run type="dictionary">
            <output name="output" type="string">(specification, coefficients)</output>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_table" parser_action="quote_string" type="string">household_location_choice_model_coefficients</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">household_location_choice_model_specification</argument>
            <name name="name" type="string">prepare_for_run</name>
          </prepare_for_run>
          <prepare_for_estimate type="dictionary">
            <output name="output" type="string">(specification, index)</output>
            <argument name="portion_to_unplace" type="float">0.333333333333</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">household_location_choice_model_specification</argument>
            <argument name="agent_set" type="string">household</argument>
            <argument name="index_to_unplace" type="string">None</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument convert_blank_to_none="True" name="filter" type="string"/>
            <argument name="join_datasets" type="boolean">False</argument>
            <argument convert_blank_to_none="True" name="agents_for_estimation_table" parser_action="quote_string" type="string">households_for_estimation</argument>
            <argument convert_blank_to_none="True" name="agents_for_estimation_storage" type="string">base_cache_storage</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <name name="name" type="string">prepare_for_estimate</name>
          </prepare_for_estimate>
        </structure>
        <specification type="dictionary" inherit_parent_values="False">
          <submodel hidden="Children" name="submodel" submodel_id="-2" type="submodel">
            <description type="string">No submodel</description>
            <variable_list type="variable_list">
              <variable_spec name="super_raz.sraz_avg_adult_education"/>
              <variable_spec name="super_raz.sraz_in_central_valley"/>
              <variable_spec name="super_raz.sraz_is_very_rural"/>
              <variable_spec name="super_raz.sraz_median_household_income"/>
              <variable_spec name="super_raz.sraz_num_retail_jobs_per_acre"/>
              <variable_spec name="super_raz.sraz_number_of_children"/>
              <variable_spec name="super_raz.sraz_population_weight"/>
            </variable_list>
          </submodel>
        </specification>
      </model>
      <model name="compute_household_income_adjustment" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">opus_core.simple_model</class_module>
            <class_name type="string">SimpleModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">SimpleModel</name>
          </init>
          <run type="dictionary">
            <argument name="dataset" type="string" model_dependency_type="dataset">household</argument>
            <argument name="expression" parser_action="quote_string" type="string" model_dependency_type="variable">mag_zone.household.income_adjustment</argument>
            <argument convert_blank_to_none="True" name="outcome_attribute" parser_action="quote_string" type="string">income</argument>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
          </run>
        </structure>
        <specification type="dictionary"/>
      </model>
      <model name="household_relocation_model" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module>urbansim.models.agent_relocation_model</class_module>
            <class_name>AgentRelocationModel</class_name>
          </import>
          <init type="dictionary">
            <argument name="probabilities" parser_action="quote_string" type="string">opus_core.upc.rate_based_probabilities</argument>
            <argument name="location_id_name" parser_action="quote_string" type="string">super_raz_id</argument>
            <argument name="model_name" parser_action="quote_string" type="string">Household Relocation Model</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
            <name name="name" type="string">AgentRelocationModel</name>
          </init>
          <prepare_for_run type="dictionary">
            <output name="output" type="string">hrm_resources</output>
            <argument name="rate_storage" type="string">base_cache_storage</argument>
            <argument name="rate_table" parser_action="quote_string" type="string">annual_household_relocation_rates</argument>
            <name name="name" type="string">prepare_for_run</name>
          </prepare_for_run>
          <run type="dictionary">
            <output name="output" type="string">hrm_index</output>
            <argument name="resources" type="string">hrm_resources</argument>
            <argument name="agent_set" type="string">household</argument>
          </run>
        </structure>
      </model>
      <model name="employment_relocation_model" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module>urbansim.models.agent_relocation_model</class_module>
            <class_name>AgentRelocationModel</class_name>
          </import>
          <init type="dictionary">
            <argument name="probabilities" parser_action="quote_string" type="string">opus_core.upc.rate_based_probabilities</argument>
            <argument name="location_id_name" parser_action="quote_string" type="string">super_raz_id</argument>
            <argument name="model_name" parser_action="quote_string" type="string">Employment Relocation Model</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
            <name name="name" type="string">AgentRelocationModel</name>
          </init>
          <prepare_for_run type="dictionary">
            <output name="output" type="string">erm_resources</output>
            <argument name="rate_storage" type="string">base_cache_storage</argument>
            <argument name="rate_table" parser_action="quote_string" type="string">annual_job_relocation_rates</argument>
            <name name="name" type="string">prepare_for_run</name>
          </prepare_for_run>
          <run type="dictionary">
            <output name="output" type="string">erm_index</output>
            <argument name="resources" type="string">erm_resources</argument>
            <argument name="agent_set" type="string">job</argument>
          </run>
        </structure>
      </model>
      <model name="scheduled_development_events_model" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module>urbansim.models.scheduled_events_model</class_module>
            <class_name>ScheduledEventsModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">ScheduledEventsModel</name>
            <argument name="dataset" type="string">super_raz</argument>
            <argument name="model_name" parser_action="quote_string" type="string">Scheduled Development Events Model</argument>
            <argument name="model_short_name" parser_action="quote_string" type="string">SDEM</argument>
          </init>
          <prepare_for_run type="dictionary">
            <name name="name" type="string">prepare_for_run</name>
            <argument name="scheduled_events_table" parser_action="quote_string" type="string">scheduled_development_events</argument>
            <argument name="scheduled_events_storage" type="string">base_cache_storage</argument>
          </prepare_for_run>
          <run type="dictionary">
            <argument name="year" type="string">year</argument>
          </run>
        </structure>
      </model>
      <model name="public_employment_location_choice_model" type="model">
        <dependencies type="list">['employment_relocation_model']</dependencies>
        <estimation_config name="Estimation Configuration" parser_action="skip">
          <config_override config_name="models" name="Models to run before estimation" type="list">[]</config_override>
        </estimation_config>
        <structure type="dictionary">
          <group_by_attribute type="list">('home_based_status', 'name')</group_by_attribute>
          <import name="import" type="dictionary">
            <class_module>urbansim.models.employment_location_choice_model</class_module>
            <class_name>EmploymentLocationChoiceModel</class_name>
          </import>
          <init type="dictionary">
            <argument convert_blank_to_none="True" name="location_id_string" type="string">"super_raz_id"</argument>
            <argument convert_blank_to_none="True" name="submodel_string" type="string">'sector_id'</argument>
            <argument name="agents_grouping_attribute" parser_action="quote_string" type="string">job.home_based_status</argument>
            <argument convert_blank_to_none="True" name="number_of_units_string" type="string"/>
            <argument name="compute_capacity_flag" type="boolean">True</argument>
            <argument convert_blank_to_none="True" name="capacity_string" parser_action="quote_string" type="string">clip_to_zero(super_raz.public_job_capacity - (numpy.ceil(mag_zone.super_raz.number_of_srazpublic_jobs*1.09).astype('int32')))</argument>
            <argument convert_blank_to_none="True" parser_action="quote_string" name="estimation_weight_string" type="string"/>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
            <argument name="choices" parser_action="quote_string" type="string">urbansim.lottery_choices</argument>
            <argument convert_blank_to_none="True" parser_action="quote_string" name="filter" type="string">super_raz_id&gt;0</argument>
            <argument name="variable_package" parser_action="quote_string" type="string">urbansim_zone</argument>
            <argument name="run_config" type="dictionary">
              <key name="lottery_max_iterations" type="integer">3</key>
              <key convert_blank_to_none="True" name="agent_units_string" type="string"/>
            </argument>
            <argument name="location_set" type="string">super_raz</argument>
            <argument name="estimation_size_agents" type="float">1.0</argument>
            <argument name="sampler" parser_action="quote_string" type="string">opus_core.samplers.weighted_sampler</argument>
            <argument convert_blank_to_none="True" parser_action="quote_string" name="simulation_weight_string" type="string"/>
            <argument name="estimation" parser_action="quote_string" type="string">opus_core.bhhh_mnl_estimation_with_diagnose</argument>
            <argument name="sample_size_locations" type="integer">10</argument>
            <name name="name" type="string">EmploymentLocationChoiceModel</name>
          </init>
          <prepare_for_run type="dictionary">
            <output name="output" type="string">(specification, coefficients)</output>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_table" parser_action="quote_string" type="string">public_employment_location_choice_model_coefficients</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">public_employment_location_choice_model_specification</argument>
            <name name="name" type="string">prepare_for_run</name>
          </prepare_for_run>
          <run type="dictionary">
            <argument name="chunk_specification" type="string">{'records_per_chunk':50000}</argument>
            <argument name="agent_set" type="string">job</argument>
            <argument name="specification" type="string">specification</argument>
            <argument name="maximum_runs" type="integer">3</argument>
            <argument name="agents_index" type="string">erm_index</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
            <argument name="coefficients" type="string">coefficients</argument>
          </run>
          <prepare_for_estimate type="dictionary">
            <output name="output" type="string">(specification, index)</output>
            <argument name="portion_to_unplace" type="float">0.0833333333</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">public_employment_location_choice_model_specification</argument>
            <argument name="agent_set" type="string">job</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument convert_blank_to_none="True" name="filter" type="string" parser_action="quote_string"/>
            <argument name="data_objects" type="string">datasets</argument>
            <argument convert_blank_to_none="True" name="agents_for_estimation_table" parser_action="quote_string" type="string">jobs_for_estimation</argument>
            <argument convert_blank_to_none="True" name="agents_for_estimation_storage" type="string">base_cache_storage</argument>
            <argument name="join_datasets" type="boolean">False</argument>
            <name name="name" type="string">prepare_for_estimate</name>
          </prepare_for_estimate>
          <estimate type="dictionary">
            <output name="output" type="string">(coefficients, _)</output>
            <argument name="specification" type="string">specification</argument>
            <argument name="agent_set" type="string">job</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument name="agents_index" type="string">index</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
          </estimate>
        </structure>
        <specification type="dictionary" inherit_parent_values="False">
          <submodel_group name="non_home_based" type="submodel_group">
            <submodel hidden="Children" name="Education" submodel_id="15" type="submodel" inherit_parent_values="False">
              <description type="string">Education</description>
              <variable_list type="variable_list">
                <variable_spec name="super_raz.number_of_education_jobs"/>
                <variable_spec name="super_raz.number_of_srazpublic_jobs"/>
                <variable_spec name="super_raz.sraz_public_weight"/>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="Public Federal State" submodel_id="21" type="submodel" inherit_parent_values="False">
              <description type="string">Public Federal State</description>
              <variable_list type="variable_list">
                <variable_spec name="super_raz.number_of_pubfedstate_jobs"/>
                <variable_spec name="super_raz.number_of_srazpublic_jobs"/>
                <variable_spec name="super_raz.sraz_public_weight"/>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="Public Local" submodel_id="22" type="submodel" inherit_parent_values="False">
              <description type="string">Public Local</description>
              <variable_list type="variable_list">
                <variable_spec name="super_raz.number_of_publocal_jobs"/>
                <variable_spec name="super_raz.sraz_public_weight"/>
              </variable_list>
            </submodel>
          </submodel_group>
        </specification>
      </model>
      <model name="other_employment_location_choice_model" type="model">
        <dependencies type="list">['employment_relocation_model']</dependencies>
        <estimation_config name="Estimation Configuration" parser_action="skip">
          <config_override config_name="models" name="Models to run before estimation" type="list">[]</config_override>
        </estimation_config>
        <structure type="dictionary">
          <group_by_attribute type="list">('home_based_status', 'name')</group_by_attribute>
          <import name="import" type="dictionary">
            <class_module>urbansim.models.employment_location_choice_model</class_module>
            <class_name>EmploymentLocationChoiceModel</class_name>
          </import>
          <init type="dictionary">
            <argument convert_blank_to_none="True" name="location_id_string" type="string">"super_raz_id"</argument>
            <argument convert_blank_to_none="True" name="submodel_string" type="string">'sector_id'</argument>
            <argument name="agents_grouping_attribute" parser_action="quote_string" type="string">job.home_based_status</argument>
            <argument convert_blank_to_none="True" name="number_of_units_string" type="string"/>
            <argument name="compute_capacity_flag" type="boolean">True</argument>
            <argument convert_blank_to_none="True" name="capacity_string" parser_action="quote_string" type="string">clip_to_zero((super_raz.other_job_capacity+(super_raz.office_job_capacity*0.25).astype('int32')) - (numpy.ceil(mag_zone.super_raz.number_of_srazother_jobs*1.09).astype('int32')))</argument>
            <argument convert_blank_to_none="True" parser_action="quote_string" name="estimation_weight_string" type="string"/>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
            <argument name="choices" parser_action="quote_string" type="string">urbansim.lottery_choices</argument>
            <argument convert_blank_to_none="True" parser_action="quote_string" name="filter" type="string">super_raz_id&gt;0</argument>
            <argument name="variable_package" parser_action="quote_string" type="string">urbansim_zone</argument>
            <argument name="run_config" type="dictionary">
              <key name="lottery_max_iterations" type="integer">3</key>
              <key convert_blank_to_none="True" name="agent_units_string" type="string"/>
            </argument>
            <argument name="location_set" type="string">super_raz</argument>
            <argument name="estimation_size_agents" type="float">1.0</argument>
            <argument name="sampler" parser_action="quote_string" type="string">opus_core.samplers.weighted_sampler</argument>
            <argument convert_blank_to_none="True" parser_action="quote_string" name="simulation_weight_string" type="string"/>
            <argument name="estimation" parser_action="quote_string" type="string">opus_core.bhhh_mnl_estimation_with_diagnose</argument>
            <argument name="sample_size_locations" type="integer">10</argument>
            <name name="name" type="string">EmploymentLocationChoiceModel</name>
          </init>
          <prepare_for_run type="dictionary">
            <output name="output" type="string">(specification, coefficients)</output>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_table" parser_action="quote_string" type="string">other_employment_location_choice_model_coefficients</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">other_employment_location_choice_model_specification</argument>
            <name name="name" type="string">prepare_for_run</name>
          </prepare_for_run>
          <run type="dictionary">
            <argument name="chunk_specification" type="string">{'records_per_chunk':50000}</argument>
            <argument name="agent_set" type="string">job</argument>
            <argument name="specification" type="string">specification</argument>
            <argument name="maximum_runs" type="integer">3</argument>
            <argument name="agents_index" type="string">erm_index</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
            <argument name="coefficients" type="string">coefficients</argument>
          </run>
          <prepare_for_estimate type="dictionary">
            <output name="output" type="string">(specification, index)</output>
            <argument name="portion_to_unplace" type="float">0.0833333333</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">other_employment_location_choice_model_specification</argument>
            <argument name="agent_set" type="string">job</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument convert_blank_to_none="True" name="filter" type="string" parser_action="quote_string"/>
            <argument name="data_objects" type="string">datasets</argument>
            <argument convert_blank_to_none="True" name="agents_for_estimation_table" parser_action="quote_string" type="string">jobs_for_estimation</argument>
            <argument convert_blank_to_none="True" name="agents_for_estimation_storage" type="string">base_cache_storage</argument>
            <argument name="join_datasets" type="boolean">False</argument>
            <name name="name" type="string">prepare_for_estimate</name>
          </prepare_for_estimate>
          <estimate type="dictionary">
            <output name="output" type="string">(coefficients, _)</output>
            <argument name="specification" type="string">specification</argument>
            <argument name="agent_set" type="string">job</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument name="agents_index" type="string">index</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
          </estimate>
        </structure>
        <specification type="dictionary" inherit_parent_values="False">
          <submodel_group name="non_home_based" type="submodel_group">
            <submodel hidden="Children" name="Agriculture" submodel_id="1" type="submodel" inherit_parent_values="False">
              <description type="string">Agriculture</description>
              <variable_list type="variable_list">
                <variable_spec name="super_raz.number_of_agricultural_jobs"/>
                <variable_spec name="super_raz.sraz_other_weight"/>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="Construction" submodel_id="4" type="submodel" inherit_parent_values="False">
              <description type="string">Construction</description>
              <variable_list type="variable_list">
                <variable_spec name="super_raz.number_of_construction_jobs"/>
                <variable_spec name="super_raz.number_of_srazother_jobs"/>
                <variable_spec name="super_raz.sraz_other_weight"/>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="Medical" submodel_id="16" type="submodel" inherit_parent_values="False">
              <description type="string">Medical</description>
              <variable_list type="variable_list">
                <variable_spec name="super_raz.number_of_medical_jobs"/>
                <variable_spec name="super_raz.number_of_srazother_jobs"/>
                <variable_spec name="super_raz.sraz_other_weight"/>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="Other Services" submodel_id="20" type="submodel" inherit_parent_values="False">
              <description type="string">Other Services</description>
              <variable_list type="variable_list">
                <variable_spec name="super_raz.number_of_other_services_jobs"/>
                <variable_spec name="super_raz.sraz_other_weight"/>
              </variable_list>
            </submodel>
          </submodel_group>
        </specification>
      </model>
      <model name="office_employment_location_choice_model" type="model">
        <dependencies type="list">['employment_relocation_model']</dependencies>
        <estimation_config name="Estimation Configuration" parser_action="skip">
          <config_override config_name="models" name="Models to run before estimation" type="list">[]</config_override>
        </estimation_config>
        <structure type="dictionary">
          <group_by_attribute type="list">('home_based_status', 'name')</group_by_attribute>
          <import name="import" type="dictionary">
            <class_module>urbansim.models.employment_location_choice_model</class_module>
            <class_name>EmploymentLocationChoiceModel</class_name>
          </import>
          <init type="dictionary">
            <argument convert_blank_to_none="True" name="location_id_string" type="string">"super_raz_id"</argument>
            <argument convert_blank_to_none="True" name="submodel_string" type="string">'sector_id'</argument>
            <argument name="agents_grouping_attribute" parser_action="quote_string" type="string">job.home_based_status</argument>
            <argument convert_blank_to_none="True" name="number_of_units_string" type="string"/>
            <argument name="compute_capacity_flag" type="boolean">True</argument>
            <argument convert_blank_to_none="True" name="capacity_string" parser_action="quote_string" type="string">clip_to_zero(super_raz.office_job_capacity - (numpy.ceil(mag_zone.super_raz.number_of_srazoffice_jobs*1.09).astype('int32')))</argument>
            <argument convert_blank_to_none="True" parser_action="quote_string" name="estimation_weight_string" type="string"/>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
            <argument name="choices" parser_action="quote_string" type="string">urbansim.lottery_choices</argument>
            <argument convert_blank_to_none="True" parser_action="quote_string" name="filter" type="string">super_raz_id&gt;0</argument>
            <argument name="variable_package" parser_action="quote_string" type="string">urbansim_zone</argument>
            <argument name="run_config" type="dictionary">
              <key name="lottery_max_iterations" type="integer">3</key>
              <key convert_blank_to_none="True" name="agent_units_string" type="string"/>
            </argument>
            <argument name="location_set" type="string">super_raz</argument>
            <argument name="estimation_size_agents" type="float">1.0</argument>
            <argument name="sampler" parser_action="quote_string" type="string">opus_core.samplers.weighted_sampler</argument>
            <argument convert_blank_to_none="True" parser_action="quote_string" name="simulation_weight_string" type="string"/>
            <argument name="estimation" parser_action="quote_string" type="string">opus_core.bhhh_mnl_estimation_with_diagnose</argument>
            <argument name="sample_size_locations" type="integer">10</argument>
            <name name="name" type="string">EmploymentLocationChoiceModel</name>
          </init>
          <prepare_for_run type="dictionary">
            <output name="output" type="string">(specification, coefficients)</output>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_table" parser_action="quote_string" type="string">office_employment_location_choice_model_coefficients</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">office_employment_location_choice_model_specification</argument>
            <name name="name" type="string">prepare_for_run</name>
          </prepare_for_run>
          <run type="dictionary">
            <argument name="chunk_specification" type="string">{'records_per_chunk':50000}</argument>
            <argument name="agent_set" type="string">job</argument>
            <argument name="specification" type="string">specification</argument>
            <argument name="maximum_runs" type="integer">3</argument>
            <argument name="agents_index" type="string">erm_index</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
            <argument name="coefficients" type="string">coefficients</argument>
          </run>
          <prepare_for_estimate type="dictionary">
            <output name="output" type="string">(specification, index)</output>
            <argument name="portion_to_unplace" type="float">0.0833333333</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">office_employment_location_choice_model_specification</argument>
            <argument name="agent_set" type="string">job</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument convert_blank_to_none="True" name="filter" type="string" parser_action="quote_string"/>
            <argument name="data_objects" type="string">datasets</argument>
            <argument convert_blank_to_none="True" name="agents_for_estimation_table" parser_action="quote_string" type="string">jobs_for_estimation</argument>
            <argument convert_blank_to_none="True" name="agents_for_estimation_storage" type="string">base_cache_storage</argument>
            <argument name="join_datasets" type="boolean">False</argument>
            <name name="name" type="string">prepare_for_estimate</name>
          </prepare_for_estimate>
          <estimate type="dictionary">
            <output name="output" type="string">(coefficients, _)</output>
            <argument name="specification" type="string">specification</argument>
            <argument name="agent_set" type="string">job</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument name="agents_index" type="string">index</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
          </estimate>
        </structure>
        <specification type="dictionary" inherit_parent_values="False">
          <submodel_group name="non_home_based" type="submodel_group">
            <submodel hidden="Children" name="Information" submodel_id="9" type="submodel" inherit_parent_values="False">
              <description type="string">Information</description>
              <variable_list type="variable_list">
                <variable_spec name="super_raz.number_of_information_jobs"/>
                <variable_spec name="super_raz.number_of_srazoffice_jobs"/>
                <variable_spec name="super_raz.sraz_office_weight"/>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="Finance" submodel_id="10" type="submodel" inherit_parent_values="False">
              <description type="string">Finance</description>
              <variable_list type="variable_list">
                <variable_spec name="super_raz.number_of_finance_jobs"/>
                <variable_spec name="super_raz.number_of_srazoffice_jobs"/>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="Real Estate" submodel_id="11" type="submodel" inherit_parent_values="False">
              <description type="string">Real Estate</description>
              <variable_list type="variable_list">
                <variable_spec name="super_raz.number_of_realestate_jobs"/>
                <variable_spec name="super_raz.number_of_srazoffice_jobs"/>
                <variable_spec name="super_raz.sraz_office_weight"/>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="Professional" submodel_id="12" type="submodel" inherit_parent_values="False">
              <description type="string">Professional</description>
              <variable_list type="variable_list">
                <variable_spec name="super_raz.number_of_professional_jobs"/>
                <variable_spec name="super_raz.number_of_srazoffice_jobs"/>
                <variable_spec name="super_raz.sraz_office_weight"/>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="Management" submodel_id="13" type="submodel" inherit_parent_values="False">
              <description type="string">Management</description>
              <variable_list type="variable_list">
                <variable_spec name="super_raz.number_of_management_jobs"/>
                <variable_spec name="super_raz.number_of_srazoffice_jobs"/>
                <variable_spec name="super_raz.sraz_office_weight"/>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="Administration" submodel_id="14" type="submodel">
              <description type="string">Administration</description>
              <variable_list type="variable_list">
                <variable_spec name="super_raz.number_of_administrative_jobs"/>
                <variable_spec name="super_raz.number_of_srazoffice_jobs"/>
              </variable_list>
            </submodel>
          </submodel_group>
        </specification>
      </model>
      <model name="industrial_employment_location_choice_model" type="model">
        <dependencies type="list">['employment_relocation_model']</dependencies>
        <estimation_config name="Estimation Configuration" parser_action="skip">
          <config_override config_name="models" name="Models to run before estimation" type="list">[]</config_override>
        </estimation_config>
        <structure type="dictionary">
          <group_by_attribute type="list">('home_based_status', 'name')</group_by_attribute>
          <import name="import" type="dictionary">
            <class_module>urbansim.models.employment_location_choice_model</class_module>
            <class_name>EmploymentLocationChoiceModel</class_name>
          </import>
          <init type="dictionary">
            <argument convert_blank_to_none="True" name="location_id_string" type="string">"super_raz_id"</argument>
            <argument convert_blank_to_none="True" name="submodel_string" type="string">'sector_id'</argument>
            <argument name="agents_grouping_attribute" parser_action="quote_string" type="string">job.home_based_status</argument>
            <argument convert_blank_to_none="True" name="number_of_units_string" type="string"/>
            <argument name="compute_capacity_flag" type="boolean">True</argument>
            <argument convert_blank_to_none="True" name="capacity_string" parser_action="quote_string" type="string">clip_to_zero(super_raz.industrial_job_capacity - (numpy.ceil(mag_zone.super_raz.number_of_srazindustrial_jobs*1.09).astype('int32')))</argument>
            <argument convert_blank_to_none="True" parser_action="quote_string" name="estimation_weight_string" type="string"/>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
            <argument name="choices" parser_action="quote_string" type="string">urbansim.lottery_choices</argument>
            <argument convert_blank_to_none="True" parser_action="quote_string" name="filter" type="string">super_raz_id&gt;0</argument>
            <argument name="variable_package" parser_action="quote_string" type="string">urbansim_zone</argument>
            <argument name="run_config" type="dictionary">
              <key name="lottery_max_iterations" type="integer">3</key>
              <key convert_blank_to_none="True" name="agent_units_string" type="string"/>
            </argument>
            <argument name="location_set" type="string">super_raz</argument>
            <argument name="estimation_size_agents" type="float">1.0</argument>
            <argument name="sampler" parser_action="quote_string" type="string">opus_core.samplers.weighted_sampler</argument>
            <argument convert_blank_to_none="True" parser_action="quote_string" name="simulation_weight_string" type="string"/>
            <argument name="estimation" parser_action="quote_string" type="string">opus_core.bhhh_mnl_estimation_with_diagnose</argument>
            <argument name="sample_size_locations" type="integer">10</argument>
            <name name="name" type="string">EmploymentLocationChoiceModel</name>
          </init>
          <prepare_for_run type="dictionary">
            <output name="output" type="string">(specification, coefficients)</output>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_table" parser_action="quote_string" type="string">industrial_employment_location_choice_model_coefficients</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">industrial_employment_location_choice_model_specification</argument>
            <name name="name" type="string">prepare_for_run</name>
          </prepare_for_run>
          <run type="dictionary">
            <argument name="chunk_specification" type="string">{'records_per_chunk':50000}</argument>
            <argument name="agent_set" type="string">job</argument>
            <argument name="specification" type="string">specification</argument>
            <argument name="maximum_runs" type="integer">3</argument>
            <argument name="agents_index" type="string">erm_index</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
            <argument name="coefficients" type="string">coefficients</argument>
          </run>
          <prepare_for_estimate type="dictionary">
            <output name="output" type="string">(specification, index)</output>
            <argument name="portion_to_unplace" type="float">0.0833333333</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">industrial_employment_location_choice_model_specification</argument>
            <argument name="agent_set" type="string">job</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument convert_blank_to_none="True" name="filter" type="string" parser_action="quote_string"/>
            <argument name="data_objects" type="string">datasets</argument>
            <argument convert_blank_to_none="True" name="agents_for_estimation_table" parser_action="quote_string" type="string">jobs_for_estimation</argument>
            <argument convert_blank_to_none="True" name="agents_for_estimation_storage" type="string">base_cache_storage</argument>
            <argument name="join_datasets" type="boolean">False</argument>
            <name name="name" type="string">prepare_for_estimate</name>
          </prepare_for_estimate>
          <estimate type="dictionary">
            <output name="output" type="string">(coefficients, _)</output>
            <argument name="specification" type="string">specification</argument>
            <argument name="agent_set" type="string">job</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument name="agents_index" type="string">index</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
          </estimate>
        </structure>
        <specification type="dictionary" inherit_parent_values="False">
          <submodel_group name="non_home_based" type="submodel_group">
            <submodel hidden="Children" name="Mining" submodel_id="2" type="submodel" inherit_parent_values="False">
              <description type="string">Mining</description>
              <variable_list type="variable_list">
                <variable_spec name="super_raz.number_of_mining_jobs"/>
                <variable_spec name="super_raz.number_of_srazindustrial_jobs"/>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="Utilities" submodel_id="3" type="submodel" inherit_parent_values="False">
              <description type="string">Utilities</description>
              <variable_list type="variable_list">
                <variable_spec name="super_raz.number_of_utilities_jobs"/>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="Manufacturing" submodel_id="5" type="submodel" inherit_parent_values="False">
              <description type="string">Manufacturing</description>
              <variable_list type="variable_list">
                <variable_spec name="super_raz.number_of_manufacturing_jobs"/>
                <variable_spec name="super_raz.number_of_srazindustrial_jobs"/>
                <variable_spec name="super_raz.sraz_industrial_weight"/>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="Wholesale Trade" submodel_id="6" type="submodel" inherit_parent_values="False">
              <description type="string">Wholesale</description>
              <variable_list type="variable_list">
                <variable_spec name="super_raz.number_of_srazindustrial_jobs"/>
                <variable_spec name="super_raz.number_of_wholesale_jobs"/>
                <variable_spec name="super_raz.sraz_industrial_weight"/>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="Transportation" submodel_id="8" type="submodel">
              <description type="string">Transportation</description>
              <variable_list type="variable_list">
                <variable_spec name="super_raz.number_of_srazindustrial_jobs"/>
                <variable_spec name="super_raz.number_of_transportation_jobs"/>
                <variable_spec name="super_raz.sraz_industrial_weight"/>
              </variable_list>
            </submodel>
          </submodel_group>
        </specification>
      </model>
      <model name="retail_employment_location_choice_model" type="model">
        <dependencies type="list">['employment_relocation_model']</dependencies>
        <estimation_config name="Estimation Configuration" parser_action="skip">
          <config_override config_name="models" name="Models to run before estimation" type="list">[]</config_override>
        </estimation_config>
        <structure type="dictionary">
          <group_by_attribute type="list">('home_based_status', 'name')</group_by_attribute>
          <import name="import" type="dictionary">
            <class_module>urbansim.models.employment_location_choice_model</class_module>
            <class_name>EmploymentLocationChoiceModel</class_name>
          </import>
          <init type="dictionary">
            <argument convert_blank_to_none="True" name="location_id_string" type="string">"super_raz_id"</argument>
            <argument convert_blank_to_none="True" name="submodel_string" type="string">'sector_id'</argument>
            <argument name="agents_grouping_attribute" parser_action="quote_string" type="string">job.home_based_status</argument>
            <argument convert_blank_to_none="True" name="number_of_units_string" type="string"/>
            <argument name="compute_capacity_flag" type="boolean">True</argument>
            <argument convert_blank_to_none="True" name="capacity_string" parser_action="quote_string" type="string">clip_to_zero(super_raz.retail_job_capacity - (numpy.ceil(mag_zone.super_raz.number_of_srazretail_jobs*1.09).astype('int32')))</argument>
            <argument convert_blank_to_none="True" parser_action="quote_string" name="estimation_weight_string" type="string"/>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
            <argument name="choices" parser_action="quote_string" type="string">urbansim.lottery_choices</argument>
            <argument convert_blank_to_none="True" parser_action="quote_string" name="filter" type="string">super_raz_id&gt;0</argument>
            <argument name="variable_package" parser_action="quote_string" type="string">urbansim_zone</argument>
            <argument name="run_config" type="dictionary">
              <key name="lottery_max_iterations" type="integer">3</key>
              <key convert_blank_to_none="True" name="agent_units_string" type="string"/>
            </argument>
            <argument name="location_set" type="string">super_raz</argument>
            <argument name="estimation_size_agents" type="float">1.0</argument>
            <argument name="sampler" parser_action="quote_string" type="string">opus_core.samplers.weighted_sampler</argument>
            <argument convert_blank_to_none="True" parser_action="quote_string" name="simulation_weight_string" type="string"/>
            <argument name="estimation" parser_action="quote_string" type="string">opus_core.bhhh_mnl_estimation_with_diagnose</argument>
            <argument name="sample_size_locations" type="integer">10</argument>
            <name name="name" type="string">EmploymentLocationChoiceModel</name>
          </init>
          <prepare_for_run type="dictionary">
            <output name="output" type="string">(specification, coefficients)</output>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_table" parser_action="quote_string" type="string">retail_employment_location_choice_model_coefficients</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">retail_employment_location_choice_model_specification</argument>
            <name name="name" type="string">prepare_for_run</name>
          </prepare_for_run>
          <run type="dictionary">
            <argument name="chunk_specification" type="string">{'records_per_chunk':50000}</argument>
            <argument name="agent_set" type="string">job</argument>
            <argument name="specification" type="string">specification</argument>
            <argument name="maximum_runs" type="integer">3</argument>
            <argument name="agents_index" type="string">erm_index</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
            <argument name="coefficients" type="string">coefficients</argument>
          </run>
          <prepare_for_estimate type="dictionary">
            <output name="output" type="string">(specification, index)</output>
            <argument name="portion_to_unplace" type="float">0.0833333333</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">retail_employment_location_choice_model_specification</argument>
            <argument name="agent_set" type="string">job</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument convert_blank_to_none="True" name="filter" type="string" parser_action="quote_string"/>
            <argument name="data_objects" type="string">datasets</argument>
            <argument convert_blank_to_none="True" name="agents_for_estimation_table" parser_action="quote_string" type="string">jobs_for_estimation</argument>
            <argument convert_blank_to_none="True" name="agents_for_estimation_storage" type="string">base_cache_storage</argument>
            <argument name="join_datasets" type="boolean">False</argument>
            <name name="name" type="string">prepare_for_estimate</name>
          </prepare_for_estimate>
          <estimate type="dictionary">
            <output name="output" type="string">(coefficients, _)</output>
            <argument name="specification" type="string">specification</argument>
            <argument name="agent_set" type="string">job</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument name="agents_index" type="string">index</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
          </estimate>
        </structure>
        <specification type="dictionary" inherit_parent_values="False">
          <submodel_group name="non_home_based" type="submodel_group">
            <submodel hidden="Children" name="Retail" submodel_id="7" type="submodel" inherit_parent_values="False">
              <description type="string">Retail</description>
              <variable_list type="variable_list">
                <variable_spec name="super_raz.number_of_retail_jobs"/>
                <variable_spec name="super_raz.number_of_srazretail_jobs"/>
                <variable_spec name="super_raz.sraz_retail_weight"/>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="Food" submodel_id="19" type="submodel" inherit_parent_values="False">
              <description type="string">Food</description>
              <variable_list type="variable_list">
                <variable_spec name="super_raz.number_of_foodservice_jobs"/>
                <variable_spec name="super_raz.sraz_in_central_valley"/>
                <variable_spec name="super_raz.sraz_num_retail_jobs_per_acre"/>
                <variable_spec name="super_raz.sraz_retail_weight"/>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="Accomodation" submodel_id="18" type="submodel" inherit_parent_values="False">
              <description type="string">Accomodation</description>
              <variable_list type="variable_list">
                <variable_spec name="super_raz.number_of_accomodation_jobs"/>
                <variable_spec name="super_raz.sraz_in_central_valley"/>
                <variable_spec name="super_raz.sraz_num_retail_jobs_per_acre"/>
                <variable_spec name="super_raz.sraz_retail_weight"/>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="Arts" submodel_id="17" type="submodel">
              <description type="string">Arts</description>
              <variable_list type="variable_list">
                <variable_spec name="super_raz.number_of_arts_jobs"/>
                <variable_spec name="super_raz.number_of_srazretail_jobs"/>
                <variable_spec name="super_raz.sraz_in_central_valley"/>
              </variable_list>
            </submodel>
          </submodel_group>
        </specification>
      </model>
    </models>
  </model_manager>
  <results_manager>
    <indicator_batches name="Indicator Batches" setexpanded="True" type="group">
    </indicator_batches>
  </results_manager>
  <scenario_manager>
  </scenario_manager>
</opus_project>

