# Opus/UrbanSim urban simulation software.
# Copyright (C) 2010-2011 University of California, Berkeley, 2005-2009 University of Washington
# See opus_core/LICENSE 

from opus_core.logger import logger
import os, re
from opus_emme2.models.run_export_macros import RunExportMacros

class RunExportSkims(RunExportMacros):
    """Class to run specified Emme2 macros. run_export_macros should run before 
       opus_emme2.models.get_emme2_data_into_cache. Then in the configuration, if there is some
       desired matrix generated by a macro, the matrix_variable_map config entry will store it.
       The macro specification should also have a specification of the bank it should run in.
    """

    def run(self, year, output_file=None):
        tmconfig = self.config['travel_model_configuration']
        bank_year = tmconfig[year]['bank'][0]
        logger.start_block('Exporting emme4 skims into hdf5')
        try:
            cmd = "%s %s %s" % (os.path.join(self.get_emme2_base_dir(), tmconfig.get('export_skims_batch_file_name', 'skims2h5.bat')),
                                os.path.join(self.get_emme2_base_dir(), bank_year),
                                os.path.join(tmconfig.get('matrix_h5_directory', self.get_emme2_base_dir()), "%s-travelmodel.h5" % bank_year)
                                )                
            if os.system(cmd):
                raise StandardError("Problem with simulation")
        finally:
            logger.end_block()

    
if __name__ == "__main__":
    try: import wingdbstub
    except: pass
    from optparse import OptionParser
    from opus_emme2.models.run_macros_abstract import prepare_for_running_macro
    parser = OptionParser()
    resources, options = prepare_for_running_macro(parser)
    RunExportSkims(resources).run(options.year, options.output_file)    
