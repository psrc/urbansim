
# UrbanSim software. Copyright (C) 1998-2007 University of Washington
# 
# You can redistribute this program and/or modify it under the terms of the
# GNU General Public License as published by the Free Software Foundation
# (http://www.gnu.org/copyleft/gpl.html).
# 
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the file LICENSE.html for copyright
# and licensing information, and the file ACKNOWLEDGMENTS.html for funding and
# other acknowledgments.
# 

##this is a copy from inprocess/psrc_parcel/hlcm_parcel_specification
specification = {}

specification = {
        1:   #submodel_id
            [
           ("urbansim_parcel.household_x_building.ln_sampling_probability_for_bias_correction_mnl_vacant_residential_units", "bias", 1),
            #"avg_bedrooms_per_unit = building.number_of_bedrooms/building.residential_units",
            #"sqft_bedroom = building.building_sqft / building.number_of_bedrooms",
            #"is_condo_residential = building.disaggregate(building_type.building_type_name)=='condo_residential'",
            #"is_multi_family_residential = building.disaggregate(building_type.building_type_name)=='multi_family_residential'",
            #"is_single_family_residential = building.disaggregate(building_type.building_type_name)=='single_family_residential'",
            "ln_avg_building_sf_per_unit = ln(urbansim_parcel.building.building_sqft_per_unit)",
#            "ln_avg_value_per_unit = ln(building.disaggregate(urbansim_parcel.parcel.unit_price)/building.residential_units)",
#            "ln_value_per_unit = ln(urbansim_parcel.building.unit_price)",
            "value_per_unit_gt_500 = urbansim_parcel.building.unit_price > 500",

           #"lnempden=(ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))).astype(float32)",
           "lnpopden=(ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32)",


        #    "persons_x_ln_emp30da = household.persons * building.disaggregate(psrc.zone.ln_employment_within_15_minutes_travel_time_hbw_am_drive_alone)",
            #"ln_parcel_sf = ln(building.disaggregate(parcel.parcel_sqft))",
          #  "ln_parcel_sf_per_unit = ln(urbansim_parcel.building.parcel_sqft_per_unit)",
   #         "ln_residential_units = ln(building.residential_units)",
            #"lnretempwa = ln(building.disaggregate(psrc.parcel.retail_sector_employment_within_walking_distance))",
            #"ln_emp_density=ln(building.disaggregate(psrc.zone.number_of_jobs_per_acre))",
            #"ln_avg_income =ln(building.disaggregate(urbansim_parcel.zone.average_income))",
            #"pct_low_income = building.disaggregate(psrc.parcel.percent_low_income_households_within_walking_distance)",

            #"cars_x_is_condo_residential = household.cars * urbansim.building.is_condo_residential",
            #"cars_x_is_multi_family_residential = household.cars * urbansim.building.is_multi_family_residential",
            #"cars_x_is_single_family_residential = household.cars * urbansim.building.is_single_family_residential",
            #"cars_x_ln_avg_building_sf_per_unit = household.cars * ln(building.building_sqft/building.residential_units)",
            #"cars_x_ln_avg_value_per_unit = household.cars * ln(building.total_value/building.residential_units)",
            #"cars_x_ln_parcel_sf = household.cars * ln(urbansim.building.parcel_sqft)",
            #"cars_x_ln_parcel_sf_per_unit = household.cars * ln(urbansim.building.parcel_sqft_per_unit)",
            #"cars_x_ln_residential_units = household.cars * ln(building.residential_units)",

            #"children_x_is_condo_residential = household.children * urbansim.building.is_condo_residential",
            #"children_x_is_multi_family_residential = household.children * urbansim.building.is_multi_family_residential",
            #"children_x_is_single_family_residential = household.children * urbansim.building.is_single_family_residential",
            #"children_x_ln_avg_building_sf_per_unit = household.children * ln(building.building_sqft/building.residential_units)",
            #"children_x_ln_avg_value_per_unit = household.children * ln(building.total_value/building.residential_units)",
            #"children_x_ln_parcel_sf = household.children * ln(urbansim.building.parcel_sqft)",
            #"children_x_ln_parcel_sf_per_unit = household.children * ln(urbansim.building.parcel_sqft_per_unit)",
            #"children_x_ln_residential_units = household.children * ln(building.residential_units)",
            #"children_x_bedrooms = household.children * building.number_of_bedrooms / building.residential_units",

            #"is_condo = urbansim.building.is_condo_residential",
            #"is_single_family = urbansim.building.is_single_family_residential",
            #"is_multi_family = urbansim.building.is_multi_family_residential",
            #"ln_income_x_is_condo_residential = ln(household.income) * urbansim.building.is_condo_residential",
            #"income_x_is_multi_family_residential = household.income * urbansim.building.is_multi_family_residential",
            "ln_income_x_is_single_family_residential = ln(household.income) * urbansim.building.is_single_family_residential",
            "ln_income_x_is_multi_family_residential = ln(household.income) * urbansim.building.is_multi_family_residential",
            "persons_x_is_multi_family_residential = household.persons * urbansim.building.is_multi_family_residential",
            "persons_x_is_condo_residential = household.persons * urbansim.building.is_condo_residential",
            #"income_x_ln_avg_building_sf_per_unit = household.income * ln(building.building_sqft/building.residential_units)",
   #         "income_x_ln_avg_value_per_unit = household.income * ln(urbansim_parcel.building.unit_price)",
            #"income_x_ln_parcel_sf = household.income * ln(urbansim.building.parcel_sqft)",
            #"income_x_ln_parcel_sf_per_unit = household.income * ln(urbansim_parcel.building.parcel_sqft_per_unit)",
            #"income_x_ln_residential_units = household.income * ln(building.residential_units)",
            #"income_x_sqft_bedroom = (household.income * (urbansim_parcel.building.building_sqft / urbansim_parcel.building.number_of_bedrooms))",
            #"income_x_ln_avg_income = household.income * ln(building.disaggregate(urbansim_parcel.zone.average_income))",
    #        "ln_income_x_avg_income = ln(household.income * building.disaggregate(urbansim_parcel.zone.average_income))",
            #"avg_inc_less_inc = (building.disaggregate(urbansim_parcel.zone.average_income)) - household.income",
             "inc_diff_sq = ((building.disaggregate(urbansim_parcel.zone.average_income)/10000) - household.income/10000)**2",

             #"unit_price = urbansim_parcel.building.unit_price",
            #"ln_price = ln_bounded(urbansim_parcel.building.unit_price)",
         #   "ln_income_less_price_per_unit = ln_bounded(household.income - (urbansim_parcel.building.unit_price/10)*urbansim_parcel.building.building_sqft)",
             #"income_less_price_per_unit = (household.income - (urbansim_parcel.building.unit_price/10))",
             #"income_less_price_per_unit_neg = where(household.income - (urbansim_parcel.building.unit_price/10)<0,1,0)",
             # "cost_ratio = (urbansim_parcel.building.unit_price/10)/where(household.income>1000,household.income,1000)",
           #"cost_ratio_g2 = (urbansim_parcel.building.unit_price/10)/where(household.income>1000,household.income,1000)>2",
           #"persons_x_is_condo_residential = household.persons * urbansim.building.is_condo_residential",
          #"persons_x_is_multi_family_residential = household.persons * urbansim.building.is_multi_family_residential",
#        "persons_x_is_single_family_residential = household.persons * urbansim.building.is_single_family_residential",            
           # "persons_x_ln_avg_building_sf_per_unit = household.persons * ln(urbansim_parcel.building.building_sqft_per_unit)",
            #"persons_x_ln_avg_value_per_unit = household.persons * ln(building.total_value/building.residential_units)",
            #"persons_x_ln_parcel_sf = household.persons * ln(urbansim.building.parcel_sqft)",
            "persons_x_ln_parcel_sf_per_unit = household.persons * ln(urbansim.building.parcel_sqft_per_unit)",
            #"persons_x_ln_residential_units = household.persons * ln(building.residential_units)",
            #"persons_x_bedrooms = household.persons * building.number_of_bedrooms / building.residential_units",
            "persons_x_avg_hhs = household.persons * building.disaggregate(zone.aggregate(household.persons, function=mean))",


            #"is_pre_1940 = building.year_built < 1940",

           #"workers_ln_emp_30min_hbw_drive_alone =  household.workers * building.disaggregate(ln_bounded(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))",

           #"ln_emp_10min_hbw_walk_1person = (household.persons==1) * building.disaggregate(ln_bounded(urbansim_parcel.zone.employment_within_10_minutes_travel_time_hbw_am_walk))",
           #"ln_emp_40min_hbw_transit_walk_1person = (household.persons==1) * building.disaggregate(ln_bounded(urbansim_parcel.zone.employment_within_40_minutes_travel_time_hbw_am_transit_walk))",
           #"ln_emp_30min_hbw_drive_alone_2persons =  (household.persons==2) * building.disaggregate(ln_bounded(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))",
            #"ln_emp_30min_hbw_drive_alone =  building.disaggregate(ln_bounded(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))",
            "ln_emp_40min_hbw_transit_walk = building.disaggregate(ln_bounded(urbansim_parcel.zone.employment_within_40_minutes_travel_time_hbw_am_transit_walk))",
            #"ln_emp_10min_hbw_walk = building.disaggregate(ln_bounded(urbansim_parcel.zone.employment_within_10_minutes_travel_time_hbw_am_walk))",
            #"gen_cost_wt_access_to_emp_hbw_drive_alone = building.disaggregate(psrc.zone.generalized_cost_weighted_access_to_employment_hbw_am_drive_alone)",
            "trip_wt_avg_time_hbw_drive_alone = building.disaggregate(psrc.zone.trip_weighted_average_time_hbw_from_home_am_drive_alone)",
           # "trip_wt_avg_time_hbw_drive_alone_gt_45 = where(building.disaggregate(psrc.zone.trip_weighted_average_time_hbw_from_home_am_drive_alone)>60,1,0)",
           #"trip_wt_avg_time_hbw_transit_walk = building.disaggregate(psrc.zone.trip_weighted_average_time_hbw_from_home_am_transit_walk)",
            #"transit_mode_share_overall = building.disaggregate(psrc.zone.mode_split_transit_trips_over_all.py)",
            #"ln_number_of_jobs_within_walking_distance = ln(building.disaggregate(psrc.parcel.number_of_jobs_within_walking_distance))",
            #"gcdacbd_1person= (household.persons==1) * building.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd)",
          #  "gcdacbd = building.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd)",
            #"ln_residential_units_within_walking_distance = ln(building.disaggregate(psrc.parcel.residential_units_within_walking_distance))",

            ],
            
        2:   #submodel_id
            [
           ("urbansim_parcel.household_x_building.ln_sampling_probability_for_bias_correction_mnl_vacant_residential_units", "bias", 1),
            #"avg_bedrooms_per_unit = building.number_of_bedrooms/building.residential_units",
            #"sqft_bedroom = building.building_sqft / building.number_of_bedrooms",
            #"is_condo_residential = building.disaggregate(building_type.building_type_name)=='condo_residential'",
            #"is_multi_family_residential = building.disaggregate(building_type.building_type_name)=='multi_family_residential'",
            #"is_single_family_residential = building.disaggregate(building_type.building_type_name)=='single_family_residential'",
            #"ln_avg_building_sf_per_unit = ln(urbansim_parcel.building.building_sqft_per_unit)",
#            "ln_avg_value_per_unit = ln(building.disaggregate(urbansim_parcel.parcel.unit_price)/building.residential_units)",
#            "ln_value_per_unit = ln(urbansim_parcel.building.unit_price)",

           #"lnempden=(ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))).astype(float32)",
           "lnpopden=(ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32)",


        #    "persons_x_ln_emp30da = household.persons * building.disaggregate(psrc.zone.ln_employment_within_15_minutes_travel_time_hbw_am_drive_alone)",
            #"ln_parcel_sf = ln(building.disaggregate(parcel.parcel_sqft))",
            "ln_parcel_sf_per_unit = ln(urbansim_parcel.building.parcel_sqft_per_unit)",
   #         "ln_residential_units = ln(building.residential_units)",
            #"lnretempwa = ln(building.disaggregate(psrc.parcel.retail_sector_employment_within_walking_distance))",
            #"ln_emp_density=ln(building.disaggregate(psrc.zone.number_of_jobs_per_acre))",
            #"ln_avg_income =ln(building.disaggregate(urbansim_parcel.zone.average_income))",
            #"pct_low_income = building.disaggregate(psrc.parcel.percent_low_income_households_within_walking_distance)",

            #"cars_x_is_condo_residential = household.cars * urbansim.building.is_condo_residential",
            #"cars_x_is_multi_family_residential = household.cars * urbansim.building.is_multi_family_residential",
            #"cars_x_is_single_family_residential = household.cars * urbansim.building.is_single_family_residential",
            #"cars_x_ln_avg_building_sf_per_unit = household.cars * ln(building.building_sqft/building.residential_units)",
            #"cars_x_ln_avg_value_per_unit = household.cars * ln(building.total_value/building.residential_units)",
            #"cars_x_ln_parcel_sf = household.cars * ln(urbansim.building.parcel_sqft)",
            #"cars_x_ln_parcel_sf_per_unit = household.cars * ln(urbansim.building.parcel_sqft_per_unit)",
            #"cars_x_ln_residential_units = household.cars * ln(building.residential_units)",

            #"children_x_is_condo_residential = household.children * urbansim.building.is_condo_residential",
            #"children_x_is_multi_family_residential = household.children * urbansim.building.is_multi_family_residential",
            #"children_x_is_single_family_residential = household.children * urbansim.building.is_single_family_residential",
            #"children_x_ln_avg_building_sf_per_unit = household.children * ln(building.building_sqft/building.residential_units)",
            #"children_x_ln_avg_value_per_unit = household.children * ln(building.total_value/building.residential_units)",
            #"children_x_ln_parcel_sf = household.children * ln(urbansim.building.parcel_sqft)",
            #"children_x_ln_parcel_sf_per_unit = household.children * ln(urbansim.building.parcel_sqft_per_unit)",
            #"children_x_ln_residential_units = household.children * ln(building.residential_units)",
            #"children_x_bedrooms = household.children * building.number_of_bedrooms / building.residential_units",

            #"is_condo = urbansim.building.is_condo_residential",
            #"is_single_family = urbansim.building.is_single_family_residential",
            #"is_multi_family = urbansim.building.is_multi_family_residential",
            "ln_income_x_is_condo_residential = ln(household.income) * urbansim.building.is_condo_residential",
            #"income_x_is_multi_family_residential = household.income * urbansim.building.is_multi_family_residential",
            "ln_income_x_is_single_family_residential = ln(household.income) * urbansim.building.is_single_family_residential",
            "ln_income_x_is_multi_family_residential = ln(household.income) * urbansim.building.is_multi_family_residential",
            "persons_x_is_multi_family_residential = household.persons * urbansim.building.is_multi_family_residential",
            "persons_x_is_condo_residential = household.persons * urbansim.building.is_condo_residential",
            #"income_x_ln_avg_building_sf_per_unit = household.income * ln(building.building_sqft/building.residential_units)",
   #         "income_x_ln_avg_value_per_unit = household.income * ln(urbansim_parcel.building.unit_price)",
            #"income_x_ln_parcel_sf = household.income * ln(urbansim.building.parcel_sqft)",
            #"income_x_ln_parcel_sf_per_unit = household.income * ln(urbansim_parcel.building.parcel_sqft_per_unit)",
            #"income_x_ln_residential_units = household.income * ln(building.residential_units)",
            #"income_x_sqft_bedroom = (household.income * (urbansim_parcel.building.building_sqft / urbansim_parcel.building.number_of_bedrooms))",
            #"income_x_ln_avg_income = household.income * ln(building.disaggregate(urbansim_parcel.zone.average_income))",
    #        "ln_income_x_avg_income = ln(household.income * building.disaggregate(urbansim_parcel.zone.average_income))",
            #"avg_inc_less_inc = (building.disaggregate(urbansim_parcel.zone.average_income)) - household.income",
             "inc_diff_sq = ((building.disaggregate(urbansim_parcel.zone.average_income)/10000) - household.income/10000)**2",

             #"unit_price = urbansim_parcel.building.unit_price",
    #        "ln_price = ln_bounded(urbansim_parcel.building.unit_price)",
            "ln_income_less_price_per_unit = ln_bounded(household.income - (urbansim_parcel.building.unit_price/10)*urbansim_parcel.building.building_sqft)",
    #         "income_less_price_per_unit = (household.income - (urbansim_parcel.building.unit_price/10))",
             #"income_less_price_per_unit_neg = where(household.income - (urbansim_parcel.building.unit_price/10)<0,1,0)",
             # "cost_ratio = (urbansim_parcel.building.unit_price/10)/where(household.income>1000,household.income,1000)",
           #"cost_ratio_g2 = (urbansim_parcel.building.unit_price/10)/where(household.income>1000,household.income,1000)>2",
           #"persons_x_is_condo_residential = household.persons * urbansim.building.is_condo_residential",
          #"persons_x_is_multi_family_residential = household.persons * urbansim.building.is_multi_family_residential",
#        "persons_x_is_single_family_residential = household.persons * urbansim.building.is_single_family_residential",            
            "persons_x_ln_avg_building_sf_per_unit = household.persons * ln(urbansim_parcel.building.building_sqft_per_unit)",
            #"persons_x_ln_avg_value_per_unit = household.persons * ln(building.total_value/building.residential_units)",
            #"persons_x_ln_parcel_sf = household.persons * ln(urbansim.building.parcel_sqft)",
           # "persons_x_ln_parcel_sf_per_unit = household.persons * ln(urbansim.building.parcel_sqft_per_unit)",
            #"persons_x_ln_residential_units = household.persons * ln(building.residential_units)",
            #"persons_x_bedrooms = household.persons * building.number_of_bedrooms / building.residential_units",
            "persons_x_avg_hhs = household.persons * building.disaggregate(zone.aggregate(household.persons, function=mean))",


            #"is_pre_1940 = building.year_built < 1940",

           #"workers_ln_emp_30min_hbw_drive_alone =  household.workers * building.disaggregate(ln_bounded(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))",

           #"ln_emp_10min_hbw_walk_1person = (household.persons==1) * building.disaggregate(ln_bounded(urbansim_parcel.zone.employment_within_10_minutes_travel_time_hbw_am_walk))",
           #"ln_emp_40min_hbw_transit_walk_1person = (household.persons==1) * building.disaggregate(ln_bounded(urbansim_parcel.zone.employment_within_40_minutes_travel_time_hbw_am_transit_walk))",
           #"ln_emp_30min_hbw_drive_alone_2persons =  (household.persons==2) * building.disaggregate(ln_bounded(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))",
            #"ln_emp_30min_hbw_drive_alone =  building.disaggregate(ln_bounded(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))",
            "ln_emp_40min_hbw_transit_walk = building.disaggregate(ln_bounded(urbansim_parcel.zone.employment_within_40_minutes_travel_time_hbw_am_transit_walk))",
            #"ln_emp_10min_hbw_walk = building.disaggregate(ln_bounded(urbansim_parcel.zone.employment_within_10_minutes_travel_time_hbw_am_walk))",
            #"gen_cost_wt_access_to_emp_hbw_drive_alone = building.disaggregate(psrc.zone.generalized_cost_weighted_access_to_employment_hbw_am_drive_alone)",
            "trip_wt_avg_time_hbw_drive_alone = building.disaggregate(psrc.zone.trip_weighted_average_time_hbw_from_home_am_drive_alone)",
           # "trip_wt_avg_time_hbw_drive_alone_gt_45 = where(building.disaggregate(psrc.zone.trip_weighted_average_time_hbw_from_home_am_drive_alone)>60,1,0)",
           #"trip_wt_avg_time_hbw_transit_walk = building.disaggregate(psrc.zone.trip_weighted_average_time_hbw_from_home_am_transit_walk)",
            #"transit_mode_share_overall = building.disaggregate(psrc.zone.mode_split_transit_trips_over_all.py)",
            #"ln_number_of_jobs_within_walking_distance = ln(building.disaggregate(psrc.parcel.number_of_jobs_within_walking_distance))",
            #"gcdacbd_1person= (household.persons==1) * building.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd)",
            "gcdacbd = building.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd)",
            #"ln_residential_units_within_walking_distance = ln(building.disaggregate(psrc.parcel.residential_units_within_walking_distance))",

            ],
        3:   #submodel_id
            [
           ("urbansim_parcel.household_x_building.ln_sampling_probability_for_bias_correction_mnl_vacant_residential_units", "bias", 1),
            #"avg_bedrooms_per_unit = building.number_of_bedrooms/building.residential_units",
            #"sqft_bedroom = building.building_sqft / building.number_of_bedrooms",
            #"is_condo_residential = building.disaggregate(building_type.building_type_name)=='condo_residential'",
            #"is_multi_family_residential = building.disaggregate(building_type.building_type_name)=='multi_family_residential'",
            #"is_single_family_residential = building.disaggregate(building_type.building_type_name)=='single_family_residential'",
            #"ln_avg_building_sf_per_unit = ln(urbansim_parcel.building.building_sqft_per_unit)",
#            "ln_avg_value_per_unit = ln(building.disaggregate(urbansim_parcel.parcel.unit_price)/building.residential_units)",
#            "ln_value_per_unit = ln(urbansim_parcel.building.unit_price)",

           #"lnempden=(ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))).astype(float32)",
           "lnpopden=(ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32)",


        #    "persons_x_ln_emp30da = household.persons * building.disaggregate(psrc.zone.ln_employment_within_15_minutes_travel_time_hbw_am_drive_alone)",
            #"ln_parcel_sf = ln(building.disaggregate(parcel.parcel_sqft))",
            "ln_parcel_sf_per_unit = ln(urbansim_parcel.building.parcel_sqft_per_unit)",
   #         "ln_residential_units = ln(building.residential_units)",
            #"lnretempwa = ln(building.disaggregate(psrc.parcel.retail_sector_employment_within_walking_distance))",
            #"ln_emp_density=ln(building.disaggregate(psrc.zone.number_of_jobs_per_acre))",
            #"ln_avg_income =ln(building.disaggregate(urbansim_parcel.zone.average_income))",
            #"pct_low_income = building.disaggregate(psrc.parcel.percent_low_income_households_within_walking_distance)",

            #"cars_x_is_condo_residential = household.cars * urbansim.building.is_condo_residential",
            #"cars_x_is_multi_family_residential = household.cars * urbansim.building.is_multi_family_residential",
            #"cars_x_is_single_family_residential = household.cars * urbansim.building.is_single_family_residential",
            #"cars_x_ln_avg_building_sf_per_unit = household.cars * ln(building.building_sqft/building.residential_units)",
            #"cars_x_ln_avg_value_per_unit = household.cars * ln(building.total_value/building.residential_units)",
            #"cars_x_ln_parcel_sf = household.cars * ln(urbansim.building.parcel_sqft)",
            #"cars_x_ln_parcel_sf_per_unit = household.cars * ln(urbansim.building.parcel_sqft_per_unit)",
            #"cars_x_ln_residential_units = household.cars * ln(building.residential_units)",

            #"children_x_is_condo_residential = household.children * urbansim.building.is_condo_residential",
            #"children_x_is_multi_family_residential = household.children * urbansim.building.is_multi_family_residential",
            #"children_x_is_single_family_residential = household.children * urbansim.building.is_single_family_residential",
            #"children_x_ln_avg_building_sf_per_unit = household.children * ln(building.building_sqft/building.residential_units)",
            #"children_x_ln_avg_value_per_unit = household.children * ln(building.total_value/building.residential_units)",
            #"children_x_ln_parcel_sf = household.children * ln(urbansim.building.parcel_sqft)",
            #"children_x_ln_parcel_sf_per_unit = household.children * ln(urbansim.building.parcel_sqft_per_unit)",
            #"children_x_ln_residential_units = household.children * ln(building.residential_units)",
            #"children_x_bedrooms = household.children * building.number_of_bedrooms / building.residential_units",

            #"is_condo = urbansim.building.is_condo_residential",
            #"is_single_family = urbansim.building.is_single_family_residential",
            #"is_multi_family = urbansim.building.is_multi_family_residential",
            "ln_income_x_is_condo_residential = ln(household.income) * urbansim.building.is_condo_residential",
            #"income_x_is_multi_family_residential = household.income * urbansim.building.is_multi_family_residential",
            "ln_income_x_is_single_family_residential = ln(household.income) * urbansim.building.is_single_family_residential",
            "ln_income_x_is_multi_family_residential = ln(household.income) * urbansim.building.is_multi_family_residential",
            "persons_x_is_multi_family_residential = household.persons * urbansim.building.is_multi_family_residential",
            "persons_x_is_condo_residential = household.persons * urbansim.building.is_condo_residential",
            #"income_x_ln_avg_building_sf_per_unit = household.income * ln(building.building_sqft/building.residential_units)",
   #         "income_x_ln_avg_value_per_unit = household.income * ln(urbansim_parcel.building.unit_price)",
            #"income_x_ln_parcel_sf = household.income * ln(urbansim.building.parcel_sqft)",
            #"income_x_ln_parcel_sf_per_unit = household.income * ln(urbansim_parcel.building.parcel_sqft_per_unit)",
            #"income_x_ln_residential_units = household.income * ln(building.residential_units)",
            #"income_x_sqft_bedroom = (household.income * (urbansim_parcel.building.building_sqft / urbansim_parcel.building.number_of_bedrooms))",
            #"income_x_ln_avg_income = household.income * ln(building.disaggregate(urbansim_parcel.zone.average_income))",
    #        "ln_income_x_avg_income = ln(household.income * building.disaggregate(urbansim_parcel.zone.average_income))",
            #"avg_inc_less_inc = (building.disaggregate(urbansim_parcel.zone.average_income)) - household.income",
             "inc_diff_sq = ((building.disaggregate(urbansim_parcel.zone.average_income)/10000) - household.income/10000)**2",

             #"unit_price = urbansim_parcel.building.unit_price",
    #        "ln_price = ln_bounded(urbansim_parcel.building.unit_price)",
            "ln_income_less_price_per_unit = ln_bounded(household.income - (urbansim_parcel.building.unit_price/10)*urbansim_parcel.building.building_sqft)",
    #         "income_less_price_per_unit = (household.income - (urbansim_parcel.building.unit_price/10))",
             #"income_less_price_per_unit_neg = where(household.income - (urbansim_parcel.building.unit_price/10)<0,1,0)",
             # "cost_ratio = (urbansim_parcel.building.unit_price/10)/where(household.income>1000,household.income,1000)",
           #"cost_ratio_g2 = (urbansim_parcel.building.unit_price/10)/where(household.income>1000,household.income,1000)>2",
           #"persons_x_is_condo_residential = household.persons * urbansim.building.is_condo_residential",
          #"persons_x_is_multi_family_residential = household.persons * urbansim.building.is_multi_family_residential",
#        "persons_x_is_single_family_residential = household.persons * urbansim.building.is_single_family_residential",            
            "persons_x_ln_avg_building_sf_per_unit = household.persons * ln(urbansim_parcel.building.building_sqft_per_unit)",
            #"persons_x_ln_avg_value_per_unit = household.persons * ln(building.total_value/building.residential_units)",
            #"persons_x_ln_parcel_sf = household.persons * ln(urbansim.building.parcel_sqft)",
            "persons_x_ln_parcel_sf_per_unit = household.persons * ln(urbansim.building.parcel_sqft_per_unit)",
            #"persons_x_ln_residential_units = household.persons * ln(building.residential_units)",
            #"persons_x_bedrooms = household.persons * building.number_of_bedrooms / building.residential_units",
           # "persons_x_avg_hhs = household.persons * building.disaggregate(zone.aggregate(household.persons, function=mean))",


            #"is_pre_1940 = building.year_built < 1940",

           #"workers_ln_emp_30min_hbw_drive_alone =  household.workers * building.disaggregate(ln_bounded(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))",

           #"ln_emp_10min_hbw_walk_1person = (household.persons==1) * building.disaggregate(ln_bounded(urbansim_parcel.zone.employment_within_10_minutes_travel_time_hbw_am_walk))",
           #"ln_emp_40min_hbw_transit_walk_1person = (household.persons==1) * building.disaggregate(ln_bounded(urbansim_parcel.zone.employment_within_40_minutes_travel_time_hbw_am_transit_walk))",
           #"ln_emp_30min_hbw_drive_alone_2persons =  (household.persons==2) * building.disaggregate(ln_bounded(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))",
            #"ln_emp_30min_hbw_drive_alone =  building.disaggregate(ln_bounded(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))",
            "ln_emp_40min_hbw_transit_walk = building.disaggregate(ln_bounded(urbansim_parcel.zone.employment_within_40_minutes_travel_time_hbw_am_transit_walk))",
            #"ln_emp_10min_hbw_walk = building.disaggregate(ln_bounded(urbansim_parcel.zone.employment_within_10_minutes_travel_time_hbw_am_walk))",
            #"gen_cost_wt_access_to_emp_hbw_drive_alone = building.disaggregate(psrc.zone.generalized_cost_weighted_access_to_employment_hbw_am_drive_alone)",
           # "trip_wt_avg_time_hbw_drive_alone = building.disaggregate(psrc.zone.trip_weighted_average_time_hbw_from_home_am_drive_alone)",
           # "trip_wt_avg_time_hbw_drive_alone_gt_45 = where(building.disaggregate(psrc.zone.trip_weighted_average_time_hbw_from_home_am_drive_alone)>60,1,0)",
           #"trip_wt_avg_time_hbw_transit_walk = building.disaggregate(psrc.zone.trip_weighted_average_time_hbw_from_home_am_transit_walk)",
            #"transit_mode_share_overall = building.disaggregate(psrc.zone.mode_split_transit_trips_over_all.py)",
            #"ln_number_of_jobs_within_walking_distance = ln(building.disaggregate(psrc.parcel.number_of_jobs_within_walking_distance))",
            #"gcdacbd_1person= (household.persons==1) * building.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd)",
            "gcdacbd = building.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd)",
            #"ln_residential_units_within_walking_distance = ln(building.disaggregate(psrc.parcel.residential_units_within_walking_distance))",

            ],
    }
