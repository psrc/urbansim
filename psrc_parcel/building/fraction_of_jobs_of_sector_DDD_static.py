# Opus/UrbanSim urban simulation software.
# Copyright (C) 2010-2011 University of California, Berkeley, 2005-2009 University of Washington
# See opus_core/LICENSE 

from numpy import array
from opus_core.variables.variable import Variable

class fraction_of_jobs_of_sector_DDD_static(Variable):
    """ Fraction of jobs of sector DDD in buildings taken from the base year. Only non-residential buildings are considered in the static distribution"""
    _return_type="float32"
    sector_building_type_distribution2000 = {
        #         0    1     2     3     4     5     6     7     8     9    10    11    12    13    14    15    16    17    18    19    20    21    22 
        1: array([0, 3.8,    0, 10.6,    0,    0,    0,    0,  4.9,    0,    0,    0,    0, 12.8,  2.7,    0,    0,    0,    0,    0,  2.5, 11.3,  8.9]),                         
        2: array([0,   0,    0, 10.2,    0,    0,    0,    0,  5.1,    0,    0,    0,    0, 18.3,  1.8,    0,    0,    0,  1.1,    0,  1.0, 17.8,    0]),                         
        3: array([0,   0,  1.4,  4.4,    0,  2.2,    0,    0, 33.5,    0,    0,    0,    0, 25.2,    0,    0,  1.4,    0,    0,    0,  1.4,  9.9, 14.2]),                         
        4: array([0,   0,    0, 10.3,    0,  9.2,    0,    0, 23.6,    0,    0,    0,    0, 17.3,    0,    0,    0,    0,    0,    0,  1.0, 28.1,    0]),                         
        5: array([0,   0,    0, 10.8,    0,    0,    0,    0, 27.7,    0,    0,    0,    0, 12.5,    0,    0,    0,    0,  1.1,    0,  2.4, 34.5,    0]),                         
        6: array([0,   0,    0, 10.7,    0,  1.1,    0,    0,  8.3,    0,    0,    0,    0, 18.7,    0,    0,    0,    0,    0,    0,    0, 42.4,    0]),                         
        7: array([0,   0,    0, 59.3,    0,    0,    0,    0,  1.5,    0,    0,    0,    0, 12.0,    0,    0,    0,    0,    0,    0,    0,  9.5,    0]),                         
        8: array([0,   0,    0, 12.6,    0,  1.3,    0,    0, 10.7,    0,    0,    0,    0, 27.5,    0,    0,    0,    0,  1.5,    0,    0, 32.6,    0]),                         
        9: array([0,   0,  1.9, 21.1,    0,  1.2,    0,    0,  2.3,    0,    0,    0,    0, 40.4,  1.1,    0,    0,    0,  1.4,    0,  2.1, 13.8,    0]),                         
       10: array([0,   0,    0, 13.7,    0, 14.8,    0,    0,  2.6,    0,  1.2,    0,    0, 48.5,    0,    0,  1.5,    0,    0,    0,    0,  4.8,    0]),                         
       11: array([0,   0,    0, 12.3,    0,    0,    0,    0,  2.3,    0,    0,    0,    0, 67.2,    0,    0,  3.2,    0,    0,    0,    0,  3.0,    0]),                         
       12: array([0,   0,    0, 13.7,    0,    0,    0,    0,  3.0,    0,  1.0,    0,    0, 56.3,    0,    0,  1.4,    0,    0,    0,    0,  4.0,    0]),                         
       13: array([0,   0,    0, 11.4,    0,  1.3,    0,  1.5,  2.4,    0,  1.2,    0,    0, 47.0,    0,    0,    0,    0,  1.2,    0,    0,  7.8,    0]),                         
       14: array([0,   0,  1.0, 59.3,    0,  1.2,    0,    0,  1.3,    0,  2.3,    0,    0, 11.5,    0,    0,  1.3,    0,  1.2,    0,    0,  4.4,  1.5]),                         
       15: array([0,   0,  1.5,  9.7,    0,  1.5,    0,    0,  4.0,    0,    0,    0,    0, 25.9,  1.0,    0,  1.3,    0, 10.8,    0,    0, 10.9,    0]),                         
       16: array([0,   0,  1.0,  9.5,    0,  1.3,    0, 18.2,  3.3,    0,    0,    0,    0, 34.1,    0,    0,  1.3,    0,  2.2,    0,    0,  5.7,    0]),                         
       17: array([0,   0,  1.4, 33.2,    0,  1.2,    0,    0,  2.9,    0,  2.2,    0,    0, 14.9,  1.1,    0,  1.2,  4.9,  1.0,    0,    0,  6.4,  1.0]),                         
       18: array([0,   0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0]),                         
       19: array([0,   0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0]),
       20: array([0,   0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0])                         
                                        }
    
    sector_building_type_distribution = {
        #         0       1     2      3      4      5       6      7     8      9      10     11     12    13      14     15     16     17     18     19     20    21      22     23
    1 : array([  0.00,  3.74,  1.35,  6.48,  0.00,  3.90,  0.03,  0.00, 19.61,  0.00,  1.71,  0.00,  0.00, 25.41,  0.00,  2.42,  4.35,  1.16,  0.13,  0.00,  0.10, 26.38,  0.29,  2.93 ]),
    2 : array([  0.00,  0.41,  0.56,  8.13,  0.00,  0.54,  0.05,  0.01, 16.44,  0.00,  1.96,  0.00,  0.00, 32.98,  0.00,  0.02,  2.78,  0.24,  0.07,  0.00,  0.05, 33.74,  0.36,  1.65 ]),
    3 : array([  0.00,  0.00,  1.59,  0.60,  0.00,  0.52,  0.00,  0.00, 58.41,  0.00,  0.00,  0.00,  0.00, 22.20,  0.00,  0.00,  1.78,  0.01,  0.00,  0.00,  0.00, 14.77,  0.05,  0.07 ]),
    4 : array([  0.00,  0.03,  0.05,  2.24,  0.00,  1.00,  0.02,  0.00, 40.59,  0.00,  0.19,  0.00,  0.00, 21.87,  0.00,  0.05,  0.15,  0.10,  0.09,  0.00,  0.42, 31.87,  0.04,  1.29 ]),
    5 : array([  0.00,  0.08,  0.39,  7.62,  0.00,  1.19,  0.02,  0.00, 29.30,  0.00,  1.82,  0.00,  0.00, 16.44,  0.00,  0.03,  0.15,  0.04,  0.04,  0.00,  0.30, 42.15,  0.00,  0.45 ]),
    6 : array([  0.00,  0.03,  0.42,  7.86,  0.00,  0.65,  0.01,  0.01, 13.98,  0.00,  1.12,  0.00,  0.00, 23.92,  0.00,  0.00,  1.04,  0.11,  0.06,  0.00,  0.02, 49.57,  0.12,  1.08 ]),
    7 : array([  0.00,  0.13,  1.01, 65.02,  0.00,  0.67,  0.05,  0.02,  1.76,  0.00,  1.85,  0.00,  0.00, 15.38,  0.00,  0.02,  1.27,  0.66,  0.05,  0.00,  0.00,  8.93,  0.36,  2.85 ]),
    8 : array([  0.00,  0.01,  0.66,  9.61,  0.00,  2.03,  0.01,  0.00,  7.86,  0.00,  0.99,  0.00,  0.00, 29.49,  0.00,  0.01,  1.05,  0.05,  0.31,  0.00,  0.21, 44.85,  0.02,  2.85 ]),
    9 : array([  0.00,  0.41,  0.00,  1.35,  0.00,  8.24,  0.00,  0.00,  9.33,  0.00,  0.05,  0.00,  0.00, 48.94,  0.00,  0.00,  5.91,  0.98,  0.00,  0.00,  0.88, 17.06,  0.00,  6.84 ]),
    10 : array([  0.00,  0.00,  0.13,  8.39,  0.00,  0.52,  0.01,  0.00,  5.12,  0.00,  0.84,  0.00,  0.00, 72.98,  0.00,  0.00,  2.96,  0.17,  0.28,  0.00,  0.57,  7.56,  0.01,  0.44 ]),
    11 : array([  0.00,  0.00,  2.39,  7.26,  0.00,  0.14,  0.90,  0.00,  2.30,  0.00,  1.48,  0.00,  0.00, 77.85,  0.00,  0.01,  4.71,  1.03,  0.05,  0.00,  0.00,  1.42,  0.03,  0.45 ]),
    12 : array([  0.00,  0.17,  1.78, 16.42,  0.00,  0.36,  0.06,  0.18,  1.61,  0.00,  3.07,  0.00,  0.00, 68.68,  0.00,  0.01,  1.86,  0.68,  0.06,  0.00,  0.04,  3.98,  0.17,  0.87 ]),
    13 : array([  0.00,  0.03,  1.26,  8.65,  0.00,  0.27,  0.10,  0.03,  3.49,  0.01,  3.27,  0.00,  0.00, 69.34,  0.00,  0.04,  1.96,  0.54,  0.11,  0.00,  0.01, 10.04,  0.21,  0.63 ]),
    14 : array([  0.00,  0.04,  1.54, 71.91,  0.00,  0.48,  0.24,  0.11,  1.73,  0.00,  5.47,  0.00,  0.00,  9.84,  0.00,  0.03,  1.50,  0.75,  0.46,  0.00,  0.00,  3.70,  0.25,  1.94 ]),
    15 : array([  0.00,  0.03,  3.23,  8.15,  0.00,  1.47,  1.29,  0.02,  1.13,  0.17,  2.70,  0.00,  0.00, 26.25,  0.00,  0.00,  0.42,  7.53, 40.03,  0.00,  0.09,  6.14,  0.16,  1.19 ]),
    16 : array([  0.00,  0.01,  3.29,  6.61,  0.00,  1.17,  2.31, 12.12,  0.96,  0.02,  2.39,  0.00,  0.00, 56.98,  0.00,  0.04,  6.51,  1.01,  2.78,  0.00,  0.02,  2.36,  0.13,  1.29 ]),
    17 : array([  0.00,  0.13,  4.04, 46.76,  0.00,  0.88,  0.57,  0.07,  3.44,  0.00,  4.07,  0.00,  0.00, 17.10,  0.00,  0.63,  2.15,  9.73,  1.71,  0.00,  0.08,  7.01,  0.13,  1.51 ]),
    18 : array([  0.00,  0.07,  2.46,  6.63,  0.00, 37.99,  0.14,  4.76,  2.52,  0.18,  1.21,  0.00,  0.00, 30.65,  0.00,  0.15,  1.22,  1.05,  0.96,  0.00,  0.53,  5.78,  2.78,  0.92 ]),
    19 : array([  0.00,  0.25,  0.89,  0.86,  0.00,  1.25,  0.12,  0.09,  0.19,  0.00,  0.01,  0.00,  0.00,  2.77,  0.00,  0.22,  0.01,  1.22, 89.59,  0.00,  0.00,  1.72,  0.15,  0.65 ]),
                                       }
    
    def __init__(self, sector_id):
        self.sector_id = sector_id
        Variable.__init__(self)
        
    def dependencies(self):
        return ["building.building_type_id"]
        
    def compute(self, dataset_pool):
        ds = self.get_dataset()
        distr = self.sector_building_type_distribution[self.sector_id]/100.
        return distr[ds["building_type_id"]]

    def post_check(self, values, dataset_pool):
        self.do_check("x >= 0", values)


from opus_core.tests import opus_unittest
from numpy import array
from numpy import ma
from opus_core.datasets.dataset_pool import DatasetPool
from opus_core.storage_factory import StorageFactory


class Tests(opus_unittest.OpusTestCase):
    variable_name = "psrc_parcel.building.fraction_of_jobs_of_sector_9_static"

    def test_my_inputs(self):
        storage = StorageFactory().get_storage('dict_storage')
  
        storage.write_table(
                 table_name='buildings',
                 table_data={
                    'building_id':       array([1, 2, 3, 4, 5, 6, 7]),
                    'building_type_id':  array([3, 22, 3, 5, 13, 13, 8])
                    }
                )
        dataset_pool = DatasetPool(package_order=['urbansim_parcel', 'urbansim'], storage=storage)
        buildings = dataset_pool.get_dataset('building')
        
        values = buildings.compute_variables(self.variable_name, dataset_pool=dataset_pool)
        
        # these numbers use the 2000 weights
        #should_be = array([21.1, 0, 21.1, 1.2, 40.4, 40.4, 2.3 ])/100.0
        #self.assert_(ma.allclose(values, should_be),
        #    'Error in ' + self.variable_name)


if __name__=='__main__':
    opus_unittest.main()