<opus_project>
  <xml_version>2.0</xml_version>
  <general>
    <description type="string">MRCOG parcel configuration</description>
    <project_name hidden="True" type="string">mrcog</project_name>
    <parent type="file">urbansim_parcel/configs/urbansim_parcel.xml</parent>
    <expression_library type="dictionary">
      <variable name="parcel.p_ln_parcel_acres" source="expression" type="variable_definition" use="both">ln(parcel.parcel_acres)</variable>
      <variable name="county.county_jobs" source="expression" type="variable_definition" use="both">county.aggregate(building.number_of_agents(job),intermediates=[parcel])</variable>
      <variable name="county.county_parcels_near_capacity" source="expression" type="variable_definition" use="both">county.aggregate(((((parcel.parcel_sqft)*parcel.disaggregate(zoning.max_far)).round().astype(int32)-(parcel.aggregate(1500*building.residential_units))) - (parcel.aggregate(building.non_residential_sqft)))&lt;2000)</variable>
      <variable name="county.county_num_parcels" source="expression" type="variable_definition" use="both">county.aggregate((parcel.parcel_id&gt;0))</variable>
      <variable name="county.county_parcels_overcapacity" source="expression" type="variable_definition" use="both">county.aggregate(((((parcel.parcel_sqft)*parcel.disaggregate(zoning.max_far)).round().astype(int32)-(parcel.aggregate(1500*building.residential_units))) - (parcel.aggregate(building.non_residential_sqft)))&lt;0)</variable>
      <variable name="parcel.remaining_capacity" source="expression" type="variable_definition" use="both">(((parcel.parcel_sqft)*parcel.disaggregate(zoning.max_far)).round().astype(int32)-(parcel.aggregate(1500*building.residential_units))) - (parcel.aggregate(building.non_residential_sqft))</variable>
      <variable name="employment_submarket.ln_residential_units_in_zone" source="expression" type="variable_definition" use="both">ln(employment_submarket.disaggregate(zone.aggregate(building.residential_units)))</variable>
      <variable name="employment_submarket.esbumarket_close_to_transit" source="expression" type="variable_definition" use="both">employment_submarket.within_half_mile_transit==1</variable>
      <variable name="submarket.ln_median_lot_sqft" source="expression" type="variable_definition" use="both">ln(submarket.aggregate(building.disaggregate(parcel.parcel_sqft),function=median))</variable>
      <variable name="submarket.median_household_size" source="expression" type="variable_definition" use="both">submarket.aggregate(household.persons,function=median)</variable>
      <variable name="submarket.ln_population_density_zone_submarket" source="expression" type="variable_definition" use="both">ln(submarket.aggregate(building.disaggregate(parcel.disaggregate(43560*safe_array_divide(zone.aggregate(household.persons,intermediates=[building,parcel]), zone.aggregate(parcel.parcel_sqft)))),function=mean))</variable>
      <variable name="submarket.submarket_avg_zone_population_within_20min_gc" source="expression" type="variable_definition" use="both">submarket.aggregate(building.disaggregate(parcel.disaggregate(mrcog.zone.population_within_20_generalized_cost_threshold)),function=mean)</variable>
      <variable name="submarket.submarket_avg_zone_jobs_within_30min_gc" source="expression" type="variable_definition" use="both">submarket.aggregate(building.disaggregate(parcel.disaggregate(mrcog.zone.employment_within_30_generalized_cost_threshold)),function=mean)</variable>
      <variable name="county.county_nonres_sqft" source="expression" type="variable_definition" use="both">county.aggregate(building.non_residential_sqft,intermediates=[parcel])</variable>
      <variable name="county.county_resunits" source="expression" type="variable_definition" use="both">county.aggregate(building.residential_units,intermediates=[parcel])</variable>
      <variable name="county.county_households" source="expression" type="variable_definition" use="both">county.aggregate(building.number_of_agents(household),intermediates=[parcel])</variable>
      <variable name="parcel.ln_pop_20_min_parcel" source="expression" type="variable_definition" use="model variable">ln_bounded(parcel.disaggregate(mrcog.zone.population_within_20_am_single_vehicle_to_work_travel_time_threshold))</variable>
      <variable name="parcel.ln_jobs_within_30_min_parcel" source="expression" type="variable_definition" use="model variable">ln(parcel.disaggregate(mrcog.zone.employment_within_30_minutes_am_single_vehicle_to_work_travel_time))</variable>
      <variable name="parcel.allpurpose_agglosum_parcel" source="expression" type="variable_definition" use="both">parcel.disaggregate(zone.allpurpose_agglosum)</variable>
      <variable name="submarket.submarket_avg_zone_population_within_10min" source="expression" type="variable_definition" use="both">submarket.aggregate(building.disaggregate(parcel.disaggregate(mrcog.zone.population_within_10_am_single_vehicle_to_work_travel_time_threshold)),function=mean)</variable>
      <variable name="submarket.submarket_avg_zone_population_within_90min" source="expression" type="variable_definition" use="both">submarket.aggregate(building.disaggregate(parcel.disaggregate(mrcog.zone.population_within_90_am_single_vehicle_to_work_travel_time_threshold)),function=mean)</variable>
      <variable name="submarket.submarket_avg_zone_jobs_within_90min" source="expression" type="variable_definition" use="both">submarket.aggregate(building.disaggregate(parcel.disaggregate(mrcog.zone.employment_within_90_minutes_am_single_vehicle_to_work_travel_time)),function=mean)</variable>
      <variable name="submarket.submarket_avg_zone_jobs_within_50min" source="expression" type="variable_definition" use="both">submarket.aggregate(building.disaggregate(parcel.disaggregate(mrcog.zone.employment_within_50_minutes_am_single_vehicle_to_work_travel_time)),function=mean)</variable>
      <variable name="submarket.submarket_avg_zone_population_within_40min" source="expression" type="variable_definition" use="both">submarket.aggregate(building.disaggregate(parcel.disaggregate(mrcog.zone.population_within_40_am_single_vehicle_to_work_travel_time_threshold)),function=mean)</variable>
      <variable name="submarket.submarket_avg_zone_jobs_within_15min" source="expression" type="variable_definition" use="both">submarket.aggregate(building.disaggregate(parcel.disaggregate(mrcog.zone.employment_within_15_minutes_am_single_vehicle_to_work_travel_time)),function=mean)</variable>
      <variable name="submarket.submarket_avg_zone_jobs_within_30min" source="expression" type="variable_definition" use="both">submarket.aggregate(building.disaggregate(parcel.disaggregate(mrcog.zone.employment_within_30_minutes_am_single_vehicle_to_work_travel_time)),function=mean)</variable>
      <variable name="submarket.submarket_avg_zone_population_within_20min" source="expression" type="variable_definition" use="both">submarket.aggregate(building.disaggregate(parcel.disaggregate(mrcog.zone.population_within_20_am_single_vehicle_to_work_travel_time_threshold)),function=mean)</variable>
      <variable name="submarket.submarket_avg_persbus_agglosum" source="expression" type="variable_definition" use="both">submarket.aggregate(building.disaggregate(parcel.disaggregate(zone.persbus_agglogsum)),function=mean)</variable>
      <variable name="submarket.submarket_avg_socrec_agglosum" source="expression" type="variable_definition" use="both">submarket.aggregate(building.disaggregate(parcel.disaggregate(zone.socrec_agglogsum)),function=mean)</variable>
      <variable name="submarket.submarket_avg_meal_agglosum" source="expression" type="variable_definition" use="both">submarket.aggregate(building.disaggregate(parcel.disaggregate(zone.meal_agglogsum)),function=mean)</variable>
      <variable name="submarket.submarket_avg_shop_agglosum" source="expression" type="variable_definition" use="both">submarket.aggregate(building.disaggregate(parcel.disaggregate(zone.shop_agglogsum)),function=mean)</variable>
      <variable name="employment_submarket.ln_sector53_20_min_esubmarket" source="expression" type="variable_definition" use="model variable">ln_bounded(employment_submarket.disaggregate(mrcog.zone.realestatejobs_within_20_am_single_vehicle_to_work_travel_time_threshold))</variable>
      <variable name="employment_submarket.ln_sector54_20_min_esubmarket" source="expression" type="variable_definition" use="model variable">ln_bounded(employment_submarket.disaggregate(mrcog.zone.professionaljobs_within_20_am_single_vehicle_to_work_travel_time_threshold))</variable>
      <variable name="employment_submarket.ln_sector55_20_min_esubmarket" source="expression" type="variable_definition" use="model variable">ln_bounded(employment_submarket.disaggregate(mrcog.zone.managementjobs_within_20_am_single_vehicle_to_work_travel_time_threshold))</variable>
      <variable name="employment_submarket.ln_sector56_20_min_esubmarket" source="expression" type="variable_definition" use="model variable">ln_bounded(employment_submarket.disaggregate(mrcog.zone.adminjobs_within_20_am_single_vehicle_to_work_travel_time_threshold))</variable>
      <variable name="employment_submarket.ln_sector49_20_min_esubmarket" source="expression" type="variable_definition" use="model variable">ln_bounded(employment_submarket.disaggregate(mrcog.zone.warehousejobs_within_20_am_single_vehicle_to_work_travel_time_threshold))</variable>
      <variable name="employment_submarket.ln_sector48_20_min_esubmarket" source="expression" type="variable_definition" use="model variable">ln_bounded(employment_submarket.disaggregate(mrcog.zone.transportjobs_within_20_am_single_vehicle_to_work_travel_time_threshold))</variable>
      <variable name="employment_submarket.ln_sector42_20_min_esubmarket" source="expression" type="variable_definition" use="model variable">ln_bounded(employment_submarket.disaggregate(mrcog.zone.wholesalejobs_within_20_am_single_vehicle_to_work_travel_time_threshold))</variable>
      <variable name="employment_submarket.ln_sector33_20_min_esubmarket" source="expression" type="variable_definition" use="model variable">ln_bounded(employment_submarket.disaggregate(mrcog.zone.manufthreejobs_within_20_am_single_vehicle_to_work_travel_time_threshold))</variable>
      <variable name="employment_submarket.ln_sector32_20_min_esubmarket" source="expression" type="variable_definition" use="model variable">ln_bounded(employment_submarket.disaggregate(mrcog.zone.manuftwojobs_within_20_am_single_vehicle_to_work_travel_time_threshold))</variable>
      <variable name="employment_submarket.ln_sector31_20_min_esubmarket" source="expression" type="variable_definition" use="model variable">ln_bounded(employment_submarket.disaggregate(mrcog.zone.manufonejobs_within_20_am_single_vehicle_to_work_travel_time_threshold))</variable>
      <variable name="employment_submarket.ln_construction_jobs_within_20_min_esubmarket" source="expression" type="variable_definition" use="model variable">ln_bounded(employment_submarket.disaggregate(mrcog.zone.constructionjobs_within_20_am_single_vehicle_to_work_travel_time_threshold))</variable>
      <variable name="employment_submarket.ln_sector11_20_min_esubmarket" source="expression" type="variable_definition" use="model variable">ln_bounded(employment_submarket.disaggregate(mrcog.zone.sectorelevenjobs_within_20_am_single_vehicle_to_work_travel_time_threshold))</variable>
      <variable name="submarket.submarket_avg_allpurpose_agglosum" source="expression" type="variable_definition" use="both">submarket.aggregate(building.disaggregate(parcel.disaggregate(zone.allpurpose_agglosum)),function=mean)</variable>
      <variable name="building.ln_jobs_within_2_dollars_auto_travel_cost" source="expression" type="variable_definition" use="model variable">ln(building.disaggregate(mrcog.zone.population_within_2_single_vehicle_to_work_travel_cost_threshold))</variable>
      <variable name="building.allpurpose_agglosum_building" source="expression" type="variable_definition" use="model variable">building.disaggregate(parcel.disaggregate(zone.allpurpose_agglosum))</variable>
      <variable name="employment_submarket.ln_pop_2_dollar_esubmarket" source="expression" type="variable_definition" use="model variable">ln_bounded(employment_submarket.disaggregate(urbansim_zone.zone.population_within_2_single_vehicle_to_work_travel_cost_threshold))</variable>
      <variable name="employment_submarket.ln_pop_1_dollar_esubmarket" source="expression" type="variable_definition" use="model variable">ln_bounded(employment_submarket.disaggregate(urbansim_zone.zone.population_within_1_single_vehicle_to_work_travel_cost_threshold))</variable>
      <variable name="employment_submarket.ln_pop_20_min_esubmarket" source="expression" type="variable_definition" use="model variable">ln_bounded(employment_submarket.disaggregate(mrcog.zone.population_within_20_am_single_vehicle_to_work_travel_time_threshold))</variable>
      <variable name="employment_submarket.ln_jobs_within_30_min_auto_esubmarket" source="expression" type="variable_definition" use="model variable">ln(employment_submarket.disaggregate(mrcog.zone.employment_within_30_minutes_am_single_vehicle_to_work_travel_time))</variable>
      <variable name="employment_submarket.ln_jobs_within_2_dollar_auto_esubmarket" source="expression" type="variable_definition" use="model variable">ln(employment_submarket.disaggregate(mrcog.zone.employment_within_2_dollars_single_vehicle_to_work_travel_cost))</variable>
      <variable name="employment_submarket.ln_jobs_within_1_dollar_auto_esubmarket" source="expression" type="variable_definition" use="model variable">ln(employment_submarket.disaggregate(mrcog.zone.employment_within_1_dollars_single_vehicle_to_work_travel_cost))</variable>
      <variable name="building.building_resunit_value" source="expression" type="variable_definition" use="both">safe_array_divide(building.improvement_value,building.residential_units)</variable>
      <variable name="building.building_improvement_value" source="primary attribute" type="variable_definition" use="both">building.improvement_value</variable>
      <variable name="building.building_residential_units" source="primary attribute" type="variable_definition" use="both">building.residential_units</variable>
      <variable name="employment_submarket.allpurpose_agglosum" source="expression" type="variable_definition" use="model variable">employment_submarket.disaggregate(zone.allpurpose_agglosum)</variable>
      <variable name="zone.h_test_apt" source="expression" type="variable_definition" use="both">zone.aggregate(((building.residential_units)*(building.building_type_id==3)),intermediates=[parcel])</variable>
      <variable name="zone.h_test_dup" source="expression" type="variable_definition" use="both">zone.aggregate(((building.residential_units)*(building.building_type_id==2)),intermediates=[parcel])</variable>
      <variable name="zone.h_nprice" source="expression" type="variable_definition" use="both">safe_array_divide(zone.aggregate(building.improvement_value*(building.building_type_id&gt;6)),zone.aggregate(building.non_residential_sqft*(building.building_type_id&gt;6)))</variable>
      <variable name="zone.h_nsqft" source="expression" type="variable_definition" use="both">zone.aggregate(building.non_residential_sqft,intermediates=[parcel])</variable>
      <variable name="zone.zone_jobs_hotel" source="expression" type="variable_definition" use="both">zone.aggregate(building.aggregate(job.sector_id==17),intermediates=[parcel])</variable>
      <variable name="zone.zone_jobs_finance" source="expression" type="variable_definition" use="both">zone.aggregate(building.aggregate(job.sector_id==10),intermediates=[parcel])</variable>
      <variable name="zone.zone_jobs_retail" source="expression" type="variable_definition" use="both">zone.aggregate(building.aggregate(job.sector_id==9),intermediates=[parcel])</variable>
      <variable name="zone.zone_jobs" source="expression" type="variable_definition" use="both">zone.aggregate(building.number_of_agents(job),intermediates=[parcel])</variable>
      <variable name="zone.h_kid" source="expression" type="variable_definition" use="both">zone.aggregate(household.children&gt;0,intermediates=[building,parcel])</variable>
      <variable name="zone.h_rprice" source="expression" type="variable_definition" use="both">safe_array_divide(zone.aggregate(building.improvement_value*(building.building_type_id&lt;5)),zone.aggregate(building.residential_units*(building.building_type_id&lt;5)))</variable>
      <variable name="zone.h_rent" source="expression" type="variable_definition" use="both">zone.aggregate(household.tenure==2,intermediates=[building,parcel])</variable>
      <variable name="zone.h_own" source="expression" type="variable_definition" use="both">zone.aggregate(household.tenure==1,intermediates=[building,parcel])</variable>
      <variable name="zone.h_twn" source="expression" type="variable_definition" use="both">zone.aggregate((building.residential_units)*(building.building_type_id==4),intermediates=[parcel])</variable>
      <variable name="zone.h_dup" source="expression" type="variable_definition" use="both">zone.aggregate((building.building_type_id==2)*(building.residential_units))</variable>
      <variable name="zone.h_inc3" source="expression" type="variable_definition" use="both">zone.aggregate((household.income&gt;47619)*(household.income&lt;80800),intermediates=[building,parcel])</variable>
      <variable name="zone.h_runit" source="expression" type="variable_definition" use="both">zone.aggregate(building.residential_units,intermediates=[parcel])</variable>
      <variable name="zone.h_apt" source="expression" type="variable_definition" use="both">zone.aggregate((building.building_type_id==3)*(building.residential_units))</variable>
      <variable name="zone.h_sfd" source="expression" type="variable_definition" use="both">zone.aggregate((building.residential_units)*(building.building_type_id==1),intermediates=[parcel])</variable>
      <variable name="alldata.hh_in_sf_detached" source="expression" type="variable_definition" use="both">alldata.aggregate_all(household.building_type_id==1)</variable>
      <variable name="alldata.renters" source="expression" type="variable_definition" use="both">alldata.aggregate_all(household.tenure==2)</variable>
      <variable name="alldata.owners" source="expression" type="variable_definition" use="both">alldata.aggregate_all(household.tenure==1)</variable>
      <variable name="alldata.region_households" source="expression" type="variable_definition" use="both">alldata.aggregate_all(building.number_of_agents(household))</variable>
      <variable name="alldata.region_employment_including_unplaced" source="expression" type="variable_definition" use="both">alldata.aggregate_all(job.job_id&gt;0)</variable>
      <variable name="alldata.region_non_residential_sqft" source="expression" type="variable_definition" use="both">alldata.aggregate_all(building.non_residential_sqft)</variable>
      <variable name="alldata.region_employment" source="expression" type="variable_definition" use="both">alldata.aggregate_all(building.number_of_agents(job))</variable>
      <variable name="alldata.region_households_including_unplaced" source="expression" type="variable_definition" use="both">alldata.aggregate_all(household.persons&gt;0)</variable>
      <variable name="alldata.region_dwelling_units" source="expression" type="variable_definition" use="both">alldata.aggregate_all(building.residential_units)</variable>
      <variable name="alldata.region_population" source="expression" type="variable_definition" use="both">alldata.aggregate_all(household.persons)</variable>
      <variable name="zone.h_inc4" source="expression" type="variable_definition" use="both">zone.aggregate(household.income&gt;80799,intermediates=[building,parcel])</variable>
      <variable name="zone.h_inc2" source="expression" type="variable_definition" use="both">zone.aggregate((household.income&gt;20699)*(household.income&lt;47620),intermediates=[building,parcel])</variable>
      <variable name="zone.h_inc1" source="expression" type="variable_definition" use="both">zone.aggregate(household.income&lt;20700,intermediates=[building,parcel])</variable>
      <variable name="zone.zone_acres" source="primary attribute" type="variable_definition" use="both">zone.acres</variable>
      <variable name="zone.zone_household_population" source="expression" type="variable_definition" use="both">zone.aggregate(building.aggregate(household.persons),intermediates=[parcel])</variable>
      <variable name="zone.h_hh" source="expression" type="variable_definition" use="both">zone.aggregate(building.number_of_agents(household),intermediates=[parcel])</variable>
      <variable name="parcel.p_ln_parcel_sqft" source="expression" type="variable_definition" use="both">ln(parcel.parcel_sqft)</variable>
      <variable name="parcel.parcel_resdensity" source="expression" type="variable_definition" use="both">safe_array_divide(parcel.parcel_sqft,parcel.aggregate(building.residential_units))</variable>
      <variable name="parcel.parcel_travel_time_to_cbd" source="expression" type="variable_definition" use="both">parcel.disaggregate(zone.travel_time_to_cbd)</variable>
      <variable name="parcel.parcel_stdev_elevation_in_zone" source="expression" type="variable_definition" use="both">parcel.disaggregate(zone.elevation_stdev)</variable>
      <variable name="parcel.parcel_bus_stops_per_acre_in_zone" source="expression" type="variable_definition" use="both">parcel.disaggregate(zone.bus_stops_per_acre)</variable>
      <variable name="parcel.parcel_elevation" source="primary attribute" type="variable_definition" use="both">parcel.elevation</variable>
      <variable name="parcel.parcel_distance_to_public_school" source="primary attribute" type="variable_definition" use="both">parcel.distance_to_public_school</variable>
      <variable name="parcel.parcel_distance_to_park" source="primary attribute" type="variable_definition" use="both">parcel.distance_to_park</variable>
      <variable name="parcel.parcel_distance_to_highway" source="primary attribute" type="variable_definition" use="both">parcel.distance_to_highway</variable>
      <variable name="parcel.parcel_distance_to_bus_stop" source="primary attribute" type="variable_definition" use="both">parcel.distance_to_bus_stop</variable>
      <variable name="employment_submarket.iv_price_residual_esubmarket" source="Python class" type="variable_definition" use="model variable">honolulu_parcel.employment_submarket.price_residual</variable>
      <variable name="employment_submarket.iv_ln_price_residual_esubmarket" source="Python class" type="variable_definition" use="model variable">honolulu_parcel.employment_submarket.ln_price_residual</variable>
      <variable name="household_x_submarket.avg_unit_price_submarket_10xmore_than_income" source="expression" type="variable_definition" use="both">safe_array_divide(safe_array_divide(submarket.aggregate(building.unit_price_residential*building.residential_units),submarket.aggregate(building.residential_units)),household.income)&gt;10</variable>
      <variable name="household_x_submarket.avg_unit_price_submarket_5xmore_than_income" source="expression" type="variable_definition" use="both">safe_array_divide(safe_array_divide(submarket.aggregate(building.unit_price_residential*building.residential_units),submarket.aggregate(building.residential_units)),household.income)&gt;5</variable>
      <variable name="household_x_submarket.age_ln_jobs_30_min_submarket" source="expression" type="variable_definition" use="model variable">household.age_of_head*ln_bounded(submarket.disaggregate(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))</variable>
      <variable name="building.jobs10_finance_jobs_in_zone" source="expression" type="variable_definition" use="both">building.disaggregate(zone.aggregate(job.sector_id==10))</variable>
      <variable name="building.jobs9_retail_jobs_in_zone" source="expression" type="variable_definition" use="both">building.disaggregate(zone.aggregate(job.sector_id==9))</variable>
      <variable name="building.jobs5_transportation_jobs_in_zone" source="expression" type="variable_definition" use="both">building.disaggregate(zone.aggregate(job.sector_id==5))</variable>
      <variable name="building.jobs8_warehouse_jobs_in_zone" source="expression" type="variable_definition" use="both">building.disaggregate(zone.aggregate(job.sector_id==8))</variable>
      <variable name="building.jobs17_hotel_jobs_in_zone" source="expression" type="variable_definition" use="both">building.disaggregate(zone.aggregate(job.sector_id==17))</variable>
      <variable name="building.jobs4_manufacturing_jobs_in_zone" source="expression" type="variable_definition" use="both">building.disaggregate(zone.aggregate(job.sector_id==4))</variable>
      <variable name="building.jobs3_foodprocessing_job_in_zone" source="expression" type="variable_definition" use="both">building.disaggregate(zone.aggregate(job.sector_id==3))</variable>
      <variable name="building.num_floors" source="expression" type="variable_definition" use="both">building.stories</variable>
      <variable name="building.in_core_area" source="expression" type="variable_definition" use="both">building.disaggregate((zone.council_district_id&gt;3)*(zone.council_district_id&lt;7),intermediates=[parcel])</variable>
      <variable name="building.avg_income_in_neighborhood_board" source="expression" type="variable_definition" use="both">building.disaggregate(neighborhood_board.aggregate(household.income,function=mean,intermediates=[building,parcel]),intermediates=[parcel])</variable>
      <variable name="building.residential_density_in_zone" source="expression" type="variable_definition" use="both">building.disaggregate(safe_array_divide((zone.aggregate(building.residential_units,intermediates=[parcel])),(zone.aggregate(building.land_area,intermediates=[parcel]))))</variable>
      <variable name="parcel.p_jobs10_finance_jobs_in_zone" source="expression" type="variable_definition" use="both">parcel.disaggregate(zone.aggregate(job.sector_id==10))</variable>
      <variable name="parcel.p_jobs9_retail_jobs_in_zone" source="expression" type="variable_definition" use="both">parcel.disaggregate(zone.aggregate(job.sector_id==9))</variable>
      <variable name="parcel.p_jobs5_transportation_jobs_in_zone" source="expression" type="variable_definition" use="both">parcel.disaggregate(zone.aggregate(job.sector_id==5))</variable>
      <variable name="parcel.p_jobs8_warehouse_jobs_in_zone" source="expression" type="variable_definition" use="both">parcel.disaggregate(zone.aggregate(job.sector_id==8))</variable>
      <variable name="parcel.p_jobs17_hotel_jobs_in_zone" source="expression" type="variable_definition" use="both">parcel.disaggregate(zone.aggregate(job.sector_id==17))</variable>
      <variable name="parcel.p_jobs4_manufacturing_jobs_in_zone" source="expression" type="variable_definition" use="both">parcel.disaggregate(zone.aggregate(job.sector_id==4))</variable>
      <variable name="parcel.p_jobs3_foodprocessing_job_in_zone" source="expression" type="variable_definition" use="both">parcel.disaggregate(zone.aggregate(job.sector_id==3))</variable>
      <variable name="parcel.p_in_core_area" source="expression" type="variable_definition" use="both">parcel.disaggregate((zone.council_district_id&gt;3)*(zone.council_district_id&lt;7),intermediates=[parcel])</variable>
      <variable name="parcel.p_avg_income_in_neighborhood_board" source="expression" type="variable_definition" use="both">parcel.disaggregate(neighborhood_board.aggregate(household.income,function=mean,intermediates=[building,parcel]))</variable>
      <variable name="parcel.p_residential_density_in_zone" source="expression" type="variable_definition" use="both">parcel.disaggregate(safe_array_divide((zone.aggregate(building.residential_units,intermediates=[parcel])),(zone.aggregate(parcel.parcel_sqft/43560))))</variable>
      <variable name="parcel.p_ln_pop_10_min" source="expression" type="variable_definition" use="model variable">ln_bounded(parcel.disaggregate(urbansim_zone.zone.population_within_10_am_single_vehicle_to_work_travel_time_threshold))</variable>
      <variable name="parcel.proportion_sf_units_in_zone" source="expression" type="variable_definition" use="both">parcel.disaggregate(safe_array_divide(zone.aggregate((building.residential_units)*(building.building_type_id==1)), zone.aggregate(building.residential_units)))</variable>
      <variable name="parcel.p_zone_ln_avg_income" source="expression" type="variable_definition" use="both">parcel.disaggregate(ln(zone.aggregate(household.income, function=mean)))</variable>
      <variable name="parcel.p_zone_ln_emp_30_min" source="expression" type="variable_definition" use="both">parcel.disaggregate(ln(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))</variable>
      <variable name="parcel.p_zone_ln_emp_15_min" source="expression" type="variable_definition" use="both">parcel.disaggregate(ln(urbansim_parcel.zone.employment_within_15_minutes_travel_time_hbw_am_drive_alone))</variable>
      <variable name="parcel.p_zone_ln_pop" source="expression" type="variable_definition" use="model variable">parcel.disaggregate(ln(zone.aggregate(household.persons)))</variable>
      <variable name="parcel.p_zone_ln_jobs" source="expression" type="variable_definition" use="model variable">parcel.disaggregate(ln(zone.number_of_agents(job)))</variable>
      <variable name="parcel.p_avg_resunit_price_in_zone" source="expression" type="variable_definition" use="both">parcel.disaggregate(safe_array_divide(zone.aggregate(building.improvement_value*(numpy.in1d(building.building_type_id,[2,3,20,24]))),zone.aggregate(building.residential_units*(numpy.in1d(building.building_type_id,[2,3,20,24])))))</variable>
      <variable name="parcel.p_avg_nonres_sqft_price_in_zone" source="expression" type="variable_definition" use="both">parcel.disaggregate(safe_array_divide(zone.aggregate(building.improvement_value*(numpy.in1d(building.building_type_id,[5,8,11,16,17,18,21,23]))),zone.aggregate(building.non_residential_sqft*(numpy.in1d(building.building_type_id,[5,8,11,16,17,18,21,23])))))</variable>
      <variable name="building.building_year_built" source="primary attribute" type="variable_definition" use="both">building.year_built</variable>
      <variable name="employment_submarket.non_residential_sqft_esubmarket" source="expression" type="variable_definition" use="both">employment_submarket.aggregate(building.non_residential_sqft)</variable>
      <variable name="submarket.average_income_in_submarket" source="expression" type="variable_definition" use="both">submarket.aggregate(household.income,function=mean)</variable>
      <variable name="household_x_submarket.children_x_average_stories" source="expression" type="variable_definition" use="both">household.children*(submarket.aggregate(building.stories)*1.0)/submarket.aggregate(building.stories&gt;0)</variable>
      <variable name="household_x_submarket.proportion_hh_contain_kids_if_hh_contains_kids" source="expression" type="variable_definition" use="both">(household.children&gt;0)*(safe_array_divide(submarket.aggregate(household.children&gt;0),submarket.number_of_agents(household)))</variable>
      <variable name="submarket.time_to_cbd_submarket" source="expression" type="variable_definition" use="both">submarket.disaggregate(zone.travel_time_to_cbd)</variable>
      <variable name="submarket.ln_jobs_30_min_submarket" source="expression" type="variable_definition" use="model variable">ln_bounded(submarket.disaggregate(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))</variable>
      <variable name="submarket.avg_unit_price_submarket" source="expression" type="variable_definition" use="both">safe_array_divide(submarket.aggregate(building.unit_price_residential*building.residential_units),submarket.aggregate(building.residential_units))</variable>
      <variable name="household_x_submarket.age_x_average_year_built" source="expression" type="variable_definition" use="both">household.age_of_head*(submarket.aggregate(building.year_built)*1.0)/submarket.aggregate(building.year_built&gt;0)</variable>
      <variable name="household_x_submarket.income_x_average_year_built" source="expression" type="variable_definition" use="both">household.income*(submarket.aggregate(building.year_built)*1.0)/submarket.aggregate(building.year_built&gt;0)</variable>
      <variable name="household_x_submarket.children_x_core_submarket" source="expression" type="variable_definition" use="both">household.children*submarket.disaggregate((zone.council_district_id&gt;3)*(zone.council_district_id&lt;7))</variable>
      <variable name="household_x_submarket.income_x_core_submarket" source="expression" type="variable_definition" use="both">household.income*submarket.disaggregate((zone.council_district_id&gt;3)*(zone.council_district_id&lt;7))</variable>
      <variable name="submarket.core_submarket" source="expression" type="variable_definition" use="both">submarket.disaggregate((zone.council_district_id&gt;3)*(zone.council_district_id&lt;7))</variable>
      <variable name="zone.inner_outer_area" source="expression" type="variable_definition" use="both">(zone.council_district_id&gt;3)*(zone.council_district_id&lt;7)</variable>
      <variable name="household_x_submarket.college_grad_x_time_to_cbd" source="expression" type="variable_definition" use="both">household.aggregate((person.relation==1)*(person.education&gt;12))*submarket.disaggregate(zone.travel_time_to_cbd)</variable>
      <variable name="household_x_submarket.hours_head_works_ln_jobs_30_min" source="expression" type="variable_definition" use="model variable">household.aggregate((person.relation==1)*(person.work_hours))*ln_bounded(submarket.disaggregate(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))</variable>
      <variable name="household_x_submarket.hours_head_works_x_time_to_cbd" source="expression" type="variable_definition" use="both">household.aggregate((person.relation==1)*(person.work_hours))*submarket.disaggregate(zone.travel_time_to_cbd)</variable>
      <variable name="household_x_submarket.proportion_40plus_hrs_worked_if_hh_head_does" source="expression" type="variable_definition" use="both">household.aggregate((person.relation==1)*(person.work_hours&gt;39))*(safe_array_divide(submarket.aggregate(household.aggregate((person.relation==1)*(person.work_hours&gt;39))),submarket.number_of_agents(household)))</variable>
      <variable name="household_x_submarket.proportion_college_grad_if_hh_head_grad" source="expression" type="variable_definition" use="both">household.aggregate((person.relation==1)*(person.education&gt;12))*(safe_array_divide(submarket.aggregate(household.aggregate((person.relation==1)*(person.education&gt;12))),submarket.number_of_agents(household)))</variable>
      <variable name="household_x_submarket.proportion_no_vehicle_if_hh_no_vehicle" source="expression" type="variable_definition" use="both">(household.cars==0)*(safe_array_divide(submarket.aggregate(household.cars==0),submarket.number_of_agents(household)))</variable>
      <variable name="household_x_submarket.proportion_more_than_2_vehicle_if_hh_more_than_2_vehicle" source="expression" type="variable_definition" use="both">(household.cars&gt;2)*(safe_array_divide(submarket.aggregate(household.cars&gt;2),submarket.number_of_agents(household)))</variable>
      <variable name="household_x_submarket.proportion_more_than_1_vehicle_if_hh_more_than_1_vehicle" source="expression" type="variable_definition" use="both">(household.cars&gt;1)*(safe_array_divide(submarket.aggregate(household.cars&gt;1),submarket.number_of_agents(household)))</variable>
      <variable name="household_x_submarket.vehicles_x_average_stories" source="expression" type="variable_definition" use="both">household.vehicles*(submarket.aggregate(building.stories)*1.0)/submarket.aggregate(building.stories&gt;0)</variable>
      <variable name="household_x_submarket.hhsize_x_ln_job_density" source="expression" type="variable_definition" use="both">household.persons*ln(submarket.disaggregate(43560*safe_array_divide(zone.number_of_agents(job), zone.aggregate(building.land_area))))</variable>
      <variable name="household_x_submarket.vehicles_x_ln_job_density" source="expression" type="variable_definition" use="both">household.vehicles*ln(submarket.disaggregate(43560*safe_array_divide(zone.number_of_agents(job), zone.aggregate(building.land_area))))</variable>
      <variable name="household_x_submarket.age_x_ln_job_density" source="expression" type="variable_definition" use="both">household.age_of_head*ln(submarket.disaggregate(43560*safe_array_divide(zone.number_of_agents(job), zone.aggregate(building.land_area))))</variable>
      <variable name="household_x_submarket.income_x_ln_job_density" source="expression" type="variable_definition" use="both">household.income*ln(submarket.disaggregate(43560*safe_array_divide(zone.aggregate(establishment.employees,intermediates=[building,parcel]), zone.aggregate(building.land_area))))</variable>
      <variable name="household_x_submarket.workers_x_ln_job_density" source="expression" type="variable_definition" use="both">household.workers*ln(submarket.disaggregate(43560*safe_array_divide(zone.number_of_agents(job), zone.aggregate(building.land_area))))</variable>
      <variable name="household_x_submarket.children_ln_jobs_30_min_submarket" source="expression" type="variable_definition" use="model variable">household.children*ln_bounded(submarket.disaggregate(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))</variable>
      <variable name="household_x_submarket.income_ln_jobs_30_min_submarket" source="expression" type="variable_definition" use="model variable">household.income*ln_bounded(submarket.disaggregate(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))</variable>
      <variable name="household_x_submarket.hh_income_within50percent_submarket_avginc" source="expression" type="variable_definition" use="both">(safe_array_divide(household.income,(submarket.aggregate(household.income, function=mean)))&gt;.5)*(safe_array_divide(household.income,(submarket.aggregate(household.income, function=mean)))&lt;1.5)</variable>
      <variable name="household_x_submarket.children_x_ln_job_density" source="expression" type="variable_definition" use="both">household.children*ln(submarket.disaggregate(43560*safe_array_divide(zone.aggregate(establishment.employees,intermediates=[building,parcel]), zone.aggregate(building.land_area))))</variable>
      <variable name="household_x_submarket.proportion_younghead_if_hh_younghead" source="expression" type="variable_definition" use="both">(household.age_of_head&lt;30)*(safe_array_divide(submarket.aggregate(household.age_of_head&lt;30),submarket.number_of_agents(household)))</variable>
      <variable name="household_x_submarket.proportion_white_if_hh_white" source="expression" type="variable_definition" use="both">household.aggregate((person.relation==1)*(person.race==1))*(safe_array_divide(submarket.aggregate(household.aggregate((person.relation==1)*(person.race==1))),submarket.number_of_agents(household)))</variable>
      <variable name="household_x_submarket.proportion_asian_if_hh_asian" source="expression" type="variable_definition" use="both">household.aggregate((person.relation==1)*(person.race==4))*(safe_array_divide(submarket.aggregate(household.aggregate((person.relation==1)*(person.race==4))),submarket.number_of_agents(household)))</variable>
      <variable name="submarket.average_stories" source="expression" type="variable_definition" use="both">(submarket.aggregate(building.stories)*1.0)/submarket.aggregate(building.stories&gt;0)</variable>
      <variable name="submarket.average_year_built" source="expression" type="variable_definition" use="both">(submarket.aggregate(building.year_built)*1.0)/submarket.aggregate(building.year_built&gt;0)</variable>
      <variable name="submarket.ln_avg_unit_size" source="expression" type="variable_definition" use="both">safe_array_divide(submarket.aggregate(building.total_building_sqft - building.non_residential_sqft),submarket.aggregate(building.residential_units))</variable>
      <variable name="submarket.ln_job_density_zone_submarket" source="expression" type="variable_definition" use="both">submarket.aggregate(building.disaggregate(parcel.disaggregate(43560*safe_array_divide(zone.aggregate(establishment.employees,intermediates=[building,parcel]), zone.aggregate(building.land_area)))),function=mean)</variable>
      <variable name="employment_submarket.ln_job_density_zone_esubmarket" source="expression" type="variable_definition" use="both">ln(employment_submarket.disaggregate(43560*safe_array_divide(zone.number_of_agents(job), zone.aggregate(building.land_area))))</variable>
      <variable name="submarket.ln_avg_unit_price_submarket" source="expression" type="variable_definition" use="both">ln(safe_array_divide(submarket.aggregate(building.unit_price_residential*building.residential_units),submarket.aggregate(building.residential_units)))</variable>
      <variable name="submarket.ln_residential_units_in_submarket" source="expression" type="variable_definition" use="both">ln(submarket.aggregate(building.residential_units))</variable>
      <variable name="employment_submarket.ln_residential_units_esubmarket" source="expression" type="variable_definition" use="both">ln(employment_submarket.aggregate(building.residential_units))</variable>
      <variable name="household_x_submarket.hh_income_close_to_submarket_avginc" source="expression" type="variable_definition" use="both">(safe_array_divide(household.income,(submarket.aggregate(household.income, function=mean)))&gt;.8)*(safe_array_divide(household.income,(submarket.aggregate(household.income, function=mean)))&lt;1.2)</variable>
      <variable name="submarket.proportion_renter_hh_in_submarket" source="expression" type="variable_definition" use="both">safe_array_divide(submarket.aggregate(household.tenure==2),submarket.number_of_agents(household))</variable>
      <variable name="building.jobs1_agriculture" source="expression" type="variable_definition" use="both">building.aggregate(job.sector_id==1)</variable>
      <variable name="building.jobs2_miningconstruct" source="expression" type="variable_definition" use="both">building.aggregate(job.sector_id==2)</variable>
      <variable name="building.jobs3_foodprocess" source="expression" type="variable_definition" use="both">building.aggregate(job.sector_id==3)</variable>
      <variable name="building.jobs4_manufacture" source="expression" type="variable_definition" use="both">building.aggregate(job.sector_id==4)</variable>
      <variable name="building.jobs5_transport" source="expression" type="variable_definition" use="both">building.aggregate(job.sector_id==5)</variable>
      <variable name="building.jobs6_information" source="expression" type="variable_definition" use="both">building.aggregate(job.sector_id==6)</variable>
      <variable name="building.jobs7_utilities" source="expression" type="variable_definition" use="both">building.aggregate(job.sector_id==7)</variable>
      <variable name="building.jobs8_wholesale" source="expression" type="variable_definition" use="both">building.aggregate(job.sector_id==8)</variable>
      <variable name="building.jobs9_retail" source="expression" type="variable_definition" use="both">building.aggregate(job.sector_id==9)</variable>
      <variable name="building.jobs10_finance" source="expression" type="variable_definition" use="both">building.aggregate(job.sector_id==10)</variable>
      <variable name="building.jobs11_realestate" source="expression" type="variable_definition" use="both">building.aggregate(job.sector_id==11)</variable>
      <variable name="building.jobs12_professional" source="expression" type="variable_definition" use="both">building.aggregate(job.sector_id==12)</variable>
      <variable name="building.jobs13_business" source="expression" type="variable_definition" use="both">building.aggregate(job.sector_id==13)</variable>
      <variable name="building.jobs14_education" source="expression" type="variable_definition" use="both">building.aggregate(job.sector_id==14)</variable>
      <variable name="building.jobs15_health" source="expression" type="variable_definition" use="both">building.aggregate(job.sector_id==15)</variable>
      <variable name="building.jobs16_entertain" source="expression" type="variable_definition" use="both">building.aggregate(job.sector_id==16)</variable>
      <variable name="building.jobs17_hotel" source="expression" type="variable_definition" use="both">building.aggregate(job.sector_id==17)</variable>
      <variable name="building.jobs18_eatdrink" source="expression" type="variable_definition" use="both">building.aggregate(job.sector_id==18)</variable>
      <variable name="building.jobs19_otherservices" source="expression" type="variable_definition" use="both">building.aggregate(job.sector_id==19)</variable>
      <variable name="building.jobs20_gov" source="expression" type="variable_definition" use="both">building.aggregate(job.sector_id==20)</variable>
      <variable name="employment_submarket.jobs11_agri_esubmarket" source="expression" type="variable_definition" use="both">employment_submarket.aggregate(establishment.sector_id==11,intermediates=[building])</variable>
      <variable name="employment_submarket.jobs21_mining_esubmarket" source="expression" type="variable_definition" use="both">employment_submarket.aggregate(establishment.sector_id==21,intermediates=[building])</variable>
      <variable name="employment_submarket.jobs22_util_esubmarket" source="expression" type="variable_definition" use="both">employment_submarket.aggregate(establishment.sector_id==22,intermediates=[building])</variable>
      <variable name="employment_submarket.jobs23_construction_esubmarket" source="expression" type="variable_definition" use="both">employment_submarket.aggregate(establishment.sector_id==23,intermediates=[building])</variable>
      <variable name="employment_submarket.jobs31_manuf1_esubmarket" source="expression" type="variable_definition" use="both">employment_submarket.aggregate(establishment.sector_id==31,intermediates=[building])</variable>
      <variable name="employment_submarket.jobs32_manuf2_esubmarket" source="expression" type="variable_definition" use="both">employment_submarket.aggregate(establishment.sector_id==32,intermediates=[building])</variable>
      <variable name="employment_submarket.jobs33_manuf3_esubmarket" source="expression" type="variable_definition" use="both">employment_submarket.aggregate(establishment.sector_id==33,intermediates=[building])</variable>
      <variable name="employment_submarket.jobs42_wholesale_esubmarket" source="expression" type="variable_definition" use="both">employment_submarket.aggregate(establishment.sector_id==42,intermediates=[building])</variable>
      <variable name="employment_submarket.jobs44_retail1_esubmarket" source="expression" type="variable_definition" use="both">employment_submarket.aggregate(establishment.sector_id==44,intermediates=[building])</variable>
      <variable name="employment_submarket.jobs45_retail2_esubmarket" source="expression" type="variable_definition" use="both">employment_submarket.aggregate(establishment.sector_id==45,intermediates=[building])</variable>
      <variable name="employment_submarket.jobs48_transport_esubmarket" source="expression" type="variable_definition" use="both">employment_submarket.aggregate(establishment.sector_id==48,intermediates=[building])</variable>
      <variable name="employment_submarket.jobs49_warehouse_esubmarket" source="expression" type="variable_definition" use="both">employment_submarket.aggregate(establishment.sector_id==49,intermediates=[building])</variable>
      <variable name="employment_submarket.jobs51_info_esubmarket" source="expression" type="variable_definition" use="both">employment_submarket.aggregate(establishment.sector_id==51,intermediates=[building])</variable>
      <variable name="employment_submarket.jobs52_finance_esubmarket" source="expression" type="variable_definition" use="both">employment_submarket.aggregate(establishment.sector_id==52,intermediates=[building])</variable>
      <variable name="employment_submarket.jobs53_realestate_esubmarket" source="expression" type="variable_definition" use="both">employment_submarket.aggregate(establishment.sector_id==53,intermediates=[building])</variable>
      <variable name="employment_submarket.jobs54_prof_esubmarket" source="expression" type="variable_definition" use="both">employment_submarket.aggregate(establishment.sector_id==54,intermediates=[building])</variable>
      <variable name="employment_submarket.jobs55_manage_esubmarket" source="expression" type="variable_definition" use="both">employment_submarket.aggregate(establishment.sector_id==55,intermediates=[building])</variable>
      <variable name="employment_submarket.jobs56_admin_esubmarket" source="expression" type="variable_definition" use="both">employment_submarket.aggregate(establishment.sector_id==56,intermediates=[building])</variable>
      <variable name="employment_submarket.jobs61_edu_esubmarket" source="expression" type="variable_definition" use="both">employment_submarket.aggregate(establishment.sector_id==61,intermediates=[building])</variable>
      <variable name="employment_submarket.jobs62_health_social_esubmarket" source="expression" type="variable_definition" use="both">employment_submarket.aggregate(establishment.sector_id==62,intermediates=[building])</variable>
      <variable name="employment_submarket.jobs71_arts_entertain_esubmarket" source="expression" type="variable_definition" use="both">employment_submarket.aggregate(establishment.sector_id==71,intermediates=[building])</variable>
      <variable name="employment_submarket.jobs72_afs_esubmarket" source="expression" type="variable_definition" use="both">employment_submarket.aggregate(establishment.sector_id==72,intermediates=[building])</variable>
      <variable name="employment_submarket.jobs81_otherservices_esubmarket" source="expression" type="variable_definition" use="both">employment_submarket.aggregate(establishment.sector_id==81,intermediates=[building])</variable>
      <variable name="employment_submarket.jobs92_pubadmin_esubmarket" source="expression" type="variable_definition" use="both">employment_submarket.aggregate(establishment.sector_id==92,intermediates=[building])</variable>
      <variable name="employment_submarket.jobs7211_afs1_esubmarket" source="expression" type="variable_definition" use="both">employment_submarket.aggregate(establishment.sector_id==7211,intermediates=[building])</variable>
      <variable name="employment_submarket.jobs7212_afs2_esubmarket" source="expression" type="variable_definition" use="both">employment_submarket.aggregate(establishment.sector_id==7212,intermediates=[building])</variable>
      <variable name="employment_submarket.jobs7213_afs3_esubmarket" source="expression" type="variable_definition" use="both">employment_submarket.aggregate(establishment.sector_id==7213,intermediates=[building])</variable>
      <variable name="employment_submarket.jobs7221_afs4_esubmarket" source="expression" type="variable_definition" use="both">employment_submarket.aggregate(establishment.sector_id==7221,intermediates=[building])</variable>
      <variable name="employment_submarket.jobs7222_afs5_esubmarket" source="expression" type="variable_definition" use="both">employment_submarket.aggregate(establishment.sector_id==7222,intermediates=[building])</variable>
      <variable name="employment_submarket.jobs7223_afs6_esubmarket" source="expression" type="variable_definition" use="both">employment_submarket.aggregate(establishment.sector_id==7223,intermediates=[building])</variable>
      <variable name="employment_submarket.jobs7224_afs7_esubmarket" source="expression" type="variable_definition" use="both">employment_submarket.aggregate(establishment.sector_id==7224,intermediates=[building])</variable>
      <variable name="employment_submarket.jobs_esubmarket" source="expression" type="variable_definition" use="both">employment_submarket.aggregate(building.number_of_agents(job))</variable>
      <variable name="building.industrial_repair_sqft" source="expression" type="variable_definition" use="both">(building.building_type_id==8)*(building.non_residential_sqft)</variable>
      <variable name="building.gov_jobs" source="expression" type="variable_definition" use="both">building.aggregate(job.sector_id==20)</variable>
      <variable name="household.head_is_asian" source="expression" type="variable_definition" use="both">household.aggregate((person.relation==1)*(person.race==4))</variable>
      <variable name="household.head_is_white" source="expression" type="variable_definition" use="both">household.aggregate((person.relation==1)*(person.race==1))</variable>
      <variable name="household.wealthy_hh" source="expression" type="variable_definition" use="both">household.income_group&gt;6</variable>
      <variable name="household.workers_per_person" source="expression" type="variable_definition" use="both">safe_array_divide(household.workers * 1.0,household.persons)</variable>
      <variable name="household.avg_edu_hh" source="expression" type="variable_definition" use="both">household.aggregate(person.education, function=mean)</variable>
      <variable name="zone.zone_proportion_hh_in_apartment" source="expression" type="variable_definition" use="both">safe_array_divide(zone.aggregate(building.aggregate(household.building_type_id==3) + building.aggregate(household.building_type_id==37)),zone.aggregate(building.number_of_agents(household)))</variable>
      <variable name="zone.zone_proportion_largehh" source="expression" type="variable_definition" use="both">safe_array_divide(zone.aggregate(building.aggregate(household.persons&gt;3)),zone.aggregate(building.number_of_agents(household)))</variable>
      <variable name="zone.zone_proportion_oldhead" source="expression" type="variable_definition" use="both">safe_array_divide(zone.aggregate(building.aggregate(household.age_of_head&gt;64)),zone.aggregate(building.number_of_agents(household)))</variable>
      <variable name="zone.zone_proportion_wealthy" source="expression" type="variable_definition" use="both">safe_array_divide(zone.aggregate(building.aggregate(household.income_group&gt;6)),zone.aggregate(building.number_of_agents(household)))</variable>
      <variable name="building.ln_households_within_30_min" source="expression" type="variable_definition" use="both">ln(building.disaggregate(urbansim_parcel.zone.households_within_30_minutes_travel_time_hbw_am_drive_alone))</variable>
      <variable name="building.ln_households_within_10_min" source="expression" type="variable_definition" use="both">ln(building.disaggregate(urbansim_parcel.zone.households_within_10_minutes_travel_time_hbw_am_drive_alone))</variable>
      <variable name="building.ln_pop_10_min" source="expression" type="variable_definition" use="model variable">ln_bounded(building.disaggregate(urbansim_zone.zone.population_within_10_am_single_vehicle_to_work_travel_time_threshold))</variable>
      <variable name="zone.zonal_households" source="expression" type="variable_definition" use="both">zone.aggregate(building.number_of_agents(household))</variable>
      <variable name="zone.zone_ln_pop_1" source="expression" type="variable_definition" use="both">ln(zone.aggregate(household.persons))</variable>
      <variable name="building.hotel_sqft" source="expression" type="variable_definition" use="both">(building.building_type_id==7)*(building.non_residential_sqft)</variable>
      <variable name="employment_submarket.hotel_sqft_esubmarket" source="expression" type="variable_definition" use="both">(employment_submarket.building_type_id==7)*(employment_submarket.aggregate(building.non_residential_sqft))</variable>
      <variable name="building.land_per_nonres_sqft" source="expression" type="variable_definition" use="both">(building.land_area*1.0)/building.non_residential_sqft</variable>
      <variable name="employment_submarket.land_per_nonres_sqft_esubmarket" source="expression" type="variable_definition" use="both">safe_array_divide(employment_submarket.aggregate(building.land_area),employment_submarket.aggregate(building.non_residential_sqft))</variable>
      <variable name="building.average_value_per_sqft" source="expression" type="variable_definition" use="both">building.average_value_per_unit * building.disaggregate(building_type.is_residential==0)</variable>
      <variable name="employment_submarket.average_value_per_sqft_esubmarket" source="expression" type="variable_definition" use="both">safe_array_divide(employment_submarket.aggregate(building.improvement_value),employment_submarket.aggregate(building.non_residential_sqft))</variable>
      <variable name="employment_submarket.ln_average_value_per_sqft_esubmarket" source="expression" type="variable_definition" use="both">ln(safe_array_divide(employment_submarket.aggregate(building.unit_price_non_residential*building.non_residential_sqft),employment_submarket.aggregate(building.non_residential_sqft)))</variable>
      <variable name="household.year_moved" source="primary attribute" type="variable_definition" use="both">household.year_moved</variable>
      <variable name="building.emp_retail_200" source="expression" type="variable_definition" use="both">where(building.disaggregate(zone.aggregate(job.sector_id==9))&lt;200,building.disaggregate(zone.aggregate(job.sector_id==9)),200)/200</variable>
      <variable name="building.land_per_unit_1k" source="expression" type="variable_definition" use="both">(building.land_area/building.residential_units)/1000</variable>
      <variable name="household_x_building.children_and_lot_size" source="expression" type="variable_definition" use="both">ln_bounded(household.children*((building.land_area/building.residential_units)/1000))</variable>
      <variable name="building.ln_bldg_landarea" source="expression" type="variable_definition" use="both">ln_bounded(building.land_area)</variable>
      <variable name="building.res_sqft_per_unit_1k" source="expression" type="variable_definition" use="both">building.sqft_per_unit*(building.building_type_id&lt;3)/1000</variable>
      <variable name="building.ln_price" source="expression" type="variable_definition" use="both">ln_bounded(building.average_value_per_unit)</variable>
      <variable name="household.young_adults" source="expression" type="variable_definition" use="both">(household.children==0)*(household.age_of_head&lt;35)*(household.aggregate(person.age&gt;34) ==0)*(household.aggregate(person.age&lt;25) ==0)</variable>
      <variable name="household.renter_hh" source="expression" type="variable_definition" use="both">household.tenure==2</variable>
      <variable name="building.year_built_building" source="expression" type="variable_definition" use="both">(building.year_built) * (building.year_built &gt; 0)</variable>
      <variable name="building.apartment_unit_price" source="expression" type="variable_definition" use="both">(building.building_type_id==3) * (building.average_value_per_unit)</variable>
      <variable name="building.apartment_units" source="expression" type="variable_definition" use="both">(building.building_type_id==3) * (building.residential_units)</variable>
      <variable name="building.ln_avg_val_res_sqft" source="expression" type="variable_definition" use="model variable">safe_array_divide(building.improvement_value,building.residential_sqft)</variable>
      <variable name="building.ln_sqft_per_unit" source="expression" type="variable_definition" use="both">ln(building.sqft_per_unit)</variable>
      <variable name="building.sqft_per_unit" source="primary attribute" type="variable_definition" use="both">building.sqft_per_unit</variable>
      <variable name="building.proportion_apartment_zone" source="expression" type="variable_definition" use="both">building.disaggregate(safe_array_divide(zone.aggregate((building.residential_units)*(building.building_type_id==3)), zone.aggregate(building.residential_units)))</variable>
      <variable name="building.ln_apartment_unit_price" source="expression" type="variable_definition" use="both">ln((building.building_type_id==3) * (building.average_value_per_unit))</variable>
      <variable name="building.ln_apartment_units" source="expression" type="variable_definition" use="both">ln((building.building_type_id==3) * (building.residential_units))</variable>
      <variable name="household_x_submarket.wkrs_hhs_ln_jobs_30_min_submarket" source="expression" type="variable_definition" use="model variable">safe_array_divide(household.workers,household.persons)*ln_bounded(submarket.disaggregate(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))</variable>
      <variable name="building.proportion_sf_zone" source="expression" type="variable_definition" use="both">building.disaggregate(safe_array_divide(zone.aggregate((building.residential_units)*(building.building_type_id==1)), zone.aggregate(building.residential_units)))</variable>
      <variable name="household_x_building.inc_avginc_ratio_close" source="expression" type="variable_definition" use="both">(safe_array_divide(household.income,(building.aggregate(household.income, function=mean)))&gt;.8)*(safe_array_divide(household.income,(building.aggregate(household.income, function=mean)))&lt;1.2)</variable>
      <variable name="household_x_building.children_x_apartment" source="expression" type="variable_definition" use="both">(household.children&gt;1) * (building.building_type_id==3)</variable>
      <variable name="household_x_building.highinc_yearbuilt" source="expression" type="variable_definition" use="both">(household.income_group&gt;6) * (building.year_built &gt; 1990)</variable>
      <variable name="household_x_building.younghh_apartment" source="expression" type="variable_definition" use="both">(household.age_of_head &lt; 35)*(building.building_type_id == 3)</variable>
      <variable name="zone.zone_ln_res_units" source="expression" type="variable_definition" use="both">ln(zone.aggregate(building.residential_units))</variable>
      <variable name="zone.zone_time_cbd" source="primary attribute" type="variable_definition" use="both">zone.travel_time_to_cbd</variable>
      <variable name="zone.zone_ln_avg_income" source="expression" type="variable_definition" use="both">ln(zone.aggregate(household.income, function=mean))</variable>
      <variable name="building.ln_inv_far" source="expression" type="variable_definition" use="both">ln(safe_array_divide(building.land_area, building.non_residential_sqft))</variable>
      <variable name="building.ln_pop_zone" source="expression" type="variable_definition" use="both">ln(building.disaggregate(zone.aggregate(household.persons)))</variable>
      <variable name="building.ln_non_residential_sqft" source="expression" type="variable_definition" use="both">ln(building.non_residential_sqft)</variable>
      <variable name="employment_submarket.ln_non_residential_sqft_esubmarket" source="expression" type="variable_definition" use="both">ln(employment_submarket.aggregate(building.non_residential_sqft))</variable>
      <variable name="building.unit_price" source="primary attribute" type="variable_definition" use="model variable">building.average_value_per_unit</variable>
      <variable name="building.is_transport" source="expression" type="variable_definition" use="both">building.building_type_id==18</variable>
      <variable name="building.is_manufacturing" source="expression" type="variable_definition" use="both">building.building_type_id==9</variable>
      <variable name="building.is_office" source="expression" type="variable_definition" use="both">building.building_type_id==22</variable>
      <variable name="building.is_parking" source="expression" type="variable_definition" use="both">building.building_type_id==33</variable>
      <variable name="building.is_warehouse" source="expression" type="variable_definition" use="both">building.building_type_id==15</variable>
      <variable name="building.is_service_shops_supplies" source="expression" type="variable_definition" use="both">building.building_type_id==24</variable>
      <variable name="building.is_neighborhood_retail" source="expression" type="variable_definition" use="both">building.building_type_id==19</variable>
      <variable name="building.is_utility" source="expression" type="variable_definition" use="both">building.building_type_id==13</variable>
      <variable name="building.is_regional_retail" source="expression" type="variable_definition" use="both">building.building_type_id==20</variable>
      <variable name="building.is_classroom" source="expression" type="variable_definition" use="both">building.building_type_id==29</variable>
      <variable name="building.is_hospital" source="expression" type="variable_definition" use="both">building.building_type_id==30</variable>
      <variable name="building.is_community" source="expression" type="variable_definition" use="both">building.building_type_id==28</variable>
      <variable name="building.is_hotel" source="expression" type="variable_definition" use="both">building.building_type_id==7</variable>
      <variable name="building.is_singlefam" source="expression" type="variable_definition" use="both">building.building_type_id==1</variable>
      <variable name="building.is_duplex" source="expression" type="variable_definition" use="both">building.building_type_id==2</variable>
      <variable name="building.is_apartment" source="expression" type="variable_definition" use="both">building.building_type_id==3</variable>
      <variable name="building.is_townhome" source="expression" type="variable_definition" use="both">building.building_type_id==4</variable>
      <variable name="employment_submarket.is_civic_esubmarket" source="expression" type="variable_definition" use="both">employment_submarket.building_type_id==4</variable>
      <variable name="employment_submarket.is_government_esubmarket" source="expression" type="variable_definition" use="both">employment_submarket.building_type_id==6</variable>
      <variable name="employment_submarket.is_office_esubmarket" source="expression" type="variable_definition" use="both">employment_submarket.building_type_id==5</variable>
      <variable name="employment_submarket.is_hospital_esubmarket" source="expression" type="variable_definition" use="both">employment_submarket.building_type_id==8</variable>
      <variable name="employment_submarket.is_industrial_esubmarket" source="expression" type="variable_definition" use="both">employment_submarket.building_type_id==9</variable>
      <variable name="employment_submarket.is_mixeduse_esubmarket" source="expression" type="variable_definition" use="both">employment_submarket.building_type_id==11</variable>
      <variable name="employment_submarket.is_unknown_esubmarket" source="expression" type="variable_definition" use="both">employment_submarket.building_type_id==13</variable>
      <variable name="employment_submarket.is_openspace_esubmarket" source="expression" type="variable_definition" use="both">employment_submarket.building_type_id==14</variable>
      <variable name="employment_submarket.is_parking_esubmarket" source="expression" type="variable_definition" use="both">employment_submarket.building_type_id==15</variable>
      <variable name="employment_submarket.is_recreation_esubmarket" source="expression" type="variable_definition" use="both">employment_submarket.building_type_id==16</variable>
      <variable name="employment_submarket.is_restaurant_esubmarket" source="expression" type="variable_definition" use="both">employment_submarket.building_type_id==17</variable>
      <variable name="employment_submarket.is_retail_esubmarket" source="expression" type="variable_definition" use="both">employment_submarket.building_type_id==18</variable>
      <variable name="employment_submarket.is_school_esubmarket" source="expression" type="variable_definition" use="both">employment_submarket.building_type_id==19</variable>
      <variable name="employment_submarket.is_tcu_esubmarket" source="expression" type="variable_definition" use="both">employment_submarket.building_type_id==21</variable>
      <variable name="employment_submarket.is_warehouse_esubmarket" source="expression" type="variable_definition" use="both">employment_submarket.building_type_id==22</variable>
      <variable name="employment_submarket.is_lodging_esubmarket" source="expression" type="variable_definition" use="both">employment_submarket.building_type_id==23</variable>
      <variable name="employment_submarket.is_agriculture_esubmarket" source="expression" type="variable_definition" use="both">employment_submarket.building_type_id==1</variable>
      <variable name="employment_submarket.is_military_esubmarket" source="expression" type="variable_definition" use="both">employment_submarket.building_type_id==10</variable>
      <variable name="employment_submarket.is_casino_esubmarket" source="expression" type="variable_definition" use="both">employment_submarket.building_type_id==25</variable>
      <variable name="building.ln_land_per_unit" source="expression" type="variable_definition" use="both">ln_bounded(safe_array_divide(building.land_area, building.residential_units))</variable>
      <variable name="building.ln_avg_hh_income" source="expression" type="variable_definition" use="model variable">building.disaggregate(ln(zone.aggregate(household.income, function=mean,intermediates=[building,parcel])))</variable>
      <variable name="building.land_per_unit" source="expression" type="variable_definition" use="both">building.land_area/building.residential_units</variable>
      <variable name="building.ln_jobs_within_30_min" source="expression" type="variable_definition" use="model variable">ln(building.disaggregate(mrcog.zone.employment_within_30_minutes_am_single_vehicle_to_work_travel_time))</variable>
      <variable name="employment_submarket.ln_jobs_within_15_min_auto_esubmarket" source="expression" type="variable_definition" use="model variable">ln(employment_submarket.disaggregate(mrcog.zone.employment_within_15_minutes_am_single_vehicle_to_work_travel_time))</variable>
      <variable name="building.ln_number_jobs_retail" source="expression" type="variable_definition" use="both">ln(building.disaggregate(urbansim.zone.number_of_jobs_of_sector_5))</variable>
      <variable name="building.ln_jobs_within_15_min" source="expression" type="variable_definition" use="model variable">ln(building.disaggregate(mrcog.zone.employment_within_30_minutes_am_single_vehicle_to_work_travel_time))</variable>
      <variable name="building.ln_pop_density_zone" source="expression" type="variable_definition" use="both">ln(43560*safe_array_divide(building.aggregate(household.persons), building.disaggregate(zone.aggregate(building.land_area))))</variable>
      <variable name="building.ln_avg_hh_income_zonal" source="expression" type="variable_definition" use="model variable">building.disaggregate(ln(zone.aggregate(household.income, function=mean,intermediates=[building,parcel])))</variable>
      <variable name="building.ln_avg_val_per_unit" source="primary attribute" type="variable_definition" use="model variable">ln(building.average_value_per_unit)</variable>
      <variable name="building.ln_residential_units" source="expression" type="variable_definition" use="both">ln(building.residential_units)</variable>
      <variable name="building.population_density" source="expression" type="variable_definition" use="model variable">(ln(building.disaggregate(mrcog.zone.population_per_acre))).astype(float32)</variable>
      <variable name="building.is_single_family" source="expression" type="variable_definition" use="both">building.building_type_id == 1</variable>
      <variable name="building.ln_job_density_zone" source="expression" type="variable_definition" use="both">ln(building.disaggregate(43560*safe_array_divide(zone.number_of_agents(job), zone.aggregate(building.land_area))))</variable>
      <variable name="building.avg_value_per_unit" source="primary attribute" type="variable_definition" use="model variable">building.average_value_per_unit</variable>
      <variable name="building.avg_hh_income" source="expression" type="variable_definition" use="model variable">building.aggregate(household.income, function=mean)</variable>
      <variable name="building.avg_hh_income_zonal" source="expression" type="variable_definition" use="model variable">building.disaggregate(zone.aggregate(household.income, function=mean, intermediates=[parcel]))</variable>
      <variable name="employment_submarket.avg_hh_income_zonal_esubmarket" source="expression" type="variable_definition" use="model variable">employment_submarket.disaggregate(zone.aggregate(household.income, function=mean))</variable>
      <variable name="building.inv_jobs" source="expression" type="variable_definition" use="model variable">safe_array_divide(1,(building.number_of_agents(job)),0)</variable>
      <variable name="building.ln_jobs" source="expression" type="variable_definition" use="model variable">ln(building.number_of_agents(job))</variable>
      <variable name="building.ln_jobs_in_zone" source="expression" type="variable_definition" use="model variable">ln(building.disaggregate(zone.number_of_agents(job)))</variable>
      <variable name="building.ln_dev_acre_in_zone" source="expression" type="variable_definition" use="model variable">ln(building.disaggregate(zone.dev_acre))</variable>
      <variable name="building.zone_ln_emp_30_min" source="expression" type="variable_definition" use="both">ln(building.disaggregate(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))</variable>
      <variable name="building.cbd_time" source="expression" type="variable_definition" use="model variable">building.disaggregate(zone.travel_time_to_cbd, intermediates=[parcel])</variable>
      <variable name="employment_submarket.cbd_time_esubmarket" source="expression" type="variable_definition" use="model variable">employment_submarket.disaggregate(zone.travel_time_to_cbd)</variable>
      <variable name="building.ln_sf_unit_price" source="expression" type="variable_definition" use="both">ln((building.building_type_id==1) * (building.average_value_per_unit))</variable>
      <variable name="building.ln_sf_units" source="expression" type="variable_definition" use="both">ln((building.building_type_id==1) * (building.residential_units))</variable>
      <variable name="building.ln_mf_unit_price" source="expression" type="variable_definition" use="both">ln((building.building_type_id==3) * (building.average_value_per_unit))</variable>
      <variable name="building.ln_mf_units" source="expression" type="variable_definition" use="both">ln((building.building_type_id==3) * (building.residential_units))</variable>
      <variable name="building.ln_average_value_per_sqft" source="expression" type="variable_definition" use="both">ln(building.average_value_per_unit * building.disaggregate(building_type.is_residential==0))</variable>
      <variable name="household.workers_id" source="expression" type="variable_definition" use="both"> 1*(household.workers==0) +2*(household.workers==1) +3*(household.workers&gt;=2)</variable>
      <variable name="household.age_of_head" source="primary attribute" type="variable_definition" use="both">household.age_of_head</variable>
      <variable name="household.oldhead" source="expression" type="variable_definition" use="both">household.age_of_head &gt; 64</variable>
      <variable name="household.persons" source="primary attribute" type="variable_definition" use="both">household.persons</variable>
      <variable name="household.children" source="primary attribute" type="variable_definition" use="both">household.children</variable>
      <variable name="household.workers" source="primary attribute" type="variable_definition" use="both">household.workers</variable>
      <variable name="household.income" source="primary attribute" type="variable_definition" use="both">household.income</variable>
      <variable name="household.ln_income" source="expression" type="variable_definition" use="both">ln(household.income)</variable>
      <variable name="household.nonfamily" source="expression" type="variable_definition" use="both">household.family_type==2</variable>
      <variable name="household.vehicles" source="primary attribute" type="variable_definition" use="both">household.cars</variable>
      <variable name="household.veh_per_person" source="expression" type="variable_definition" use="both">safe_array_divide(household.vehicles * 1.0,household.persons)</variable>
      <variable name="household.enrollment_of_head" source="expression" type="variable_definition" use="both">household.aggregate((person.school_enrollment&gt;1)*(person.relation ==1)) </variable>
      <variable name="household.building_type_id" source="primary attribute" type="variable_definition" use="both">household.building_type_id</variable>
      <variable name="household.buildingtype_id" source="expression" type="variable_definition" use="both"> 1*(household.building_type_id==1) +2*(household.building_type_id==2) +3*(household.building_type_id==3) + 4*(household.building_type_id==4)</variable>
      <variable name="building.proportion_renter_hh" source="expression" type="variable_definition" use="both">(safe_array_divide(building.aggregate(household.tenure==2), building.number_of_agents(household)))</variable>
      <variable name="building.households_in_zone" source="expression" type="variable_definition" use="both">building.disaggregate(zone.aggregate(building.number_of_agents(household)), intermediates=[parcel])</variable>
      <variable name="employment_submarket.households_in_zone_esubmarket" source="expression" type="variable_definition" use="both">employment_submarket.disaggregate(zone.aggregate(building.number_of_agents(household)))</variable>
      <variable name="household_x_submarket.hh_income_x_average_unit_size" source="expression" type="variable_definition" use="both">household.income*safe_array_divide(submarket.aggregate(building.sqft_per_unit*building.residential_units)*1.0,submarket.aggregate(building.residential_units))</variable>
      <variable name="household_x_submarket.hh_cars_x_single_family_detached" source="expression" type="variable_definition" use="both">(household.cars)*(submarket.building_type==1)</variable>
      <variable name="household_x_submarket.young_head_of_hh_x_multifamily" source="expression" type="variable_definition" use="both">(household.age_of_head&lt;35)*(submarket.building_type==3)</variable>
      <variable name="submarket.average_unit_size" source="expression" type="variable_definition" use="both">safe_array_divide(submarket.aggregate(building.sqft_per_unit*building.residential_units)*1.0,submarket.aggregate(building.residential_units))</variable>
      <variable name="submarket.median_age_of_head" source="expression" type="variable_definition" use="both">submarket.aggregate(household.age_of_head, function=median)</variable>
      <variable name="submarket.median_stories" source="expression" type="variable_definition" use="both">submarket.aggregate(building.stories, function=median)</variable>
      <variable name="submarket.median_year_built" source="expression" type="variable_definition" use="both">submarket.aggregate(building.year_built, function=median)</variable>
      <variable name="submarket.proportion_hh_where_cars_exceed_persons" source="expression" type="variable_definition" use="both">(safe_array_divide(submarket.aggregate(household.cars&gt;household.persons), submarket.number_of_agents(household)))</variable>
      <variable name="submarket.number_of_households" source="expression" type="variable_definition" use="both">submarket.number_of_agents(household)</variable>
      <variable name="submarket.residential_units" source="expression" type="variable_definition" use="both">submarket.aggregate(building.residential_units)</variable>
      <variable name="residential_building_type.number_of_households" source="expression" type="variable_definition" use="both">residential_building_type.number_of_agents(household)</variable>
      <variable name="residential_building_type.residential_units" source="expression" type="variable_definition" use="both">residential_building_type.aggregate(building.residential_units)</variable>
      <variable name="submarket.iv_price_residual" source="expression" type="variable_definition" use="model variable">honolulu_parcel.submarket.price_residual</variable>
      <variable name="submarket.iv_ln_price_residual" source="expression" type="variable_definition" use="model variable">honolulu_parcel.submarket.ln_price_residual</variable>
    </expression_library>
    <dataset_pool_configuration hidden="True" type="class">
      <class_name hidden="True" type="string">DatasetPoolConfiguration</class_name>
      <class_module hidden="True" type="string">opus_core.configurations.dataset_pool_configuration</class_module>
      <argument name="package_order" type="list">['mrcog','urbansim_parcel','urbansim','opus_core']</argument>
    </dataset_pool_configuration>
    <available_datasets type="list">['parcel','building','household_x_building','zone','faz','gridcell','city','county','alldata','node','household_x_submarket','residential_unit','submarket','residential_building_type','employment_submarket','job','building_type','neighborhood_board']</available_datasets>
    <spatial_datasets type="list">['parcel','zone','faz','gridcell','city','county','node']</spatial_datasets>
  </general>
  <data_manager>
    <tool_library setexpanded="True">
      <tool_group name="opus_data_import_export_tools" setexpanded="True">
        <tool name="sql_data_to_opus_tool">
          <params>
            <param name="database_server_connection" param_type="db_connection_hook" required="True">postgres_test_database_server</param>
            <param name="table_name" param_type="string" required="True">households_for_estimation</param>
            <param name="opus_data_directory" param_type="dir_path" required="True">c:/opus/data/mrcog/base_year_data</param>
            <param name="opus_data_year" param_type="string" required="True">2010</param>
          </params>
        </tool>
        <tool name="csv_data_to_opus_tool">
          <params>
            <param name="csv_data_path" param_type="dir_path" required="True">C:\Users\janowicz\Dropbox\mrcog\to_cache</param>
            <param name="csv_table_name" param_type="string" required="True">building_types</param>
            <param name="opus_data_directory" param_type="dir_path" required="True">c:/opus/data/mrcog/base_year_data</param>
            <param name="opus_data_year" param_type="string" required="True">2010</param>
          </params>
        </tool>
      </tool_group>
    </tool_library>
  </data_manager>
  <model_manager>
    <models config_name="model_system" hidden="False" name="Models" setexpanded="True" type="dictionary">
      <model name="buildings2010_transition_model" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">mrcog.models.buildings2010_transition_model</class_module>
            <class_name type="string">Buildings2010TransitionModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">Buildings2010TransitionModel</name>
          </init>
          <run type="dictionary">
          </run>
        </structure>
      </model>
      <model name="hlcm_by_zonetypes" type="model">
        <structure type="dictionary">
          <estimate type="dictionary">
            <output hidden="True" name="output" type="string">(coefficients, _)</output>
            <argument name="agent_set" type="string">household</argument>
            <argument hidden="True" name="agents_index" type="string">_index</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument hidden="True" name="debuglevel" type="string">debuglevel</argument>
            <argument hidden="True" name="specification" type="string">_specification</argument>
          </estimate>
          <import hidden="True" name="import" type="dictionary">
            <class_module type="string">mrcog.models.households2010simple_model</class_module>
            <class_name>Households2010Model</class_name>
          </import>
          <init type="dictionary">
            <name hidden="True" name="name" type="string">Households2010Model</name>
            <argument name="sampler" parser_action="quote_string" type="string">opus_core.samplers.weighted_sampler</argument>
            <argument name="choices" parser_action="quote_string" type="string">urbansim.lottery_choices</argument>
            <argument name="estimation" parser_action="quote_string" type="string">opus_core.bhhh_mnl_estimation</argument>
            <argument hidden="True" name="dataset_pool" type="string">dataset_pool</argument>
            <argument model_dependency_type="dataset" name="location_set" type="string">building</argument>
            <argument name="sample_size_locations" type="integer">30</argument>
            <argument model_dependency_type="variable" name="capacity_string" parser_action="quote_string" type="string">clip_to_zero(building.residential_units - building.number_of_agents(household))</argument>
            <argument model_dependency_type="variable" name="estimation_weight_string" parser_action="quote_string" type="string">building.residential_units</argument>
            <argument convert_blank_to_none="True" model_dependency_type="variable" name="number_of_units_string" parser_action="quote_string" type="string"></argument>
            <argument convert_blank_to_none="True" model_dependency_type="variable" name="number_of_agents_string" parser_action="quote_string" type="string"></argument>
            <argument name="location_id_string" parser_action="quote_string" type="string">building_id</argument>
            <argument model_dependency_type="variable" name="submodel_string" parser_action="quote_string" type="string"></argument>
            <argument name="estimation_size_agents" type="float">1</argument>
            <argument name="run_config" type="string">Resources({'lottery_max_iterations': 7,"accept_unavailability_of_choices":True})</argument>
            <argument name="estimate_config" type="string">Resources({})</argument>
            <argument name="variable_package" parser_action="quote_string" type="string">urbansim_parcel</argument>
          </init>
          <prepare_for_estimate type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_estimate</name>
            <output hidden="True" name="output" type="string">(_specification, _index)</output>
            <argument model_dependency_type="dataset" name="agent_set" type="string">household</argument>
            <argument convert_blank_to_none="True" name="agents_for_estimation_storage" type="string">base_cache_storage</argument>
            <argument convert_blank_to_none="True" model_dependency_type="table" name="agents_for_estimation_table" parser_action="quote_string" type="string">households_for_estimation</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument name="index_to_unplace" type="string">None</argument>
            <argument name="join_datasets" type="boolean">True</argument>
            <argument name="portion_to_unplace" type="string">.1</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument model_dependency_type="table" name="specification_table" parser_action="quote_string" type="string">households2010_model_specification</argument>
            <argument convert_blank_to_none="True" model_dependency_type="variable" name="filter" parser_action="quote_string" type="string">household.building_id&gt;0</argument>
          </prepare_for_estimate>
          <prepare_for_run type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_run</name>
            <output hidden="True" name="output" type="string">(_specification, _coefficients)</output>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument model_dependency_type="table" name="coefficients_table" parser_action="quote_string" type="string">households2010_model_coefficients</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument model_dependency_type="table" name="specification_table" parser_action="quote_string" type="string">households2010_model_specification</argument>
          </prepare_for_run>
          <run type="dictionary">
            <argument model_dependency_type="dataset" name="agent_set" type="string">household</argument>
            <argument name="chunk_specification" type="string">None</argument>
            <argument hidden="True" name="coefficients" type="string">_coefficients</argument>
            <argument hidden="True" name="data_objects" type="string">datasets</argument>
            <argument hidden="True" name="debuglevel" type="string">debuglevel</argument>
            <argument hidden="True" name="specification" type="string">_specification</argument>
            <argument name="maximum_runs" type="integer">10</argument>
          </run>
        </structure>
        <specification type="dictionary">
          <submodel hidden="Children" name="submodel" submodel_id="-2" type="submodel">
            <description type="string">No submodel</description>
            <variable_list type="variable_list">
              <variable_spec name="building.building_residential_units"></variable_spec>
            </variable_list>
          </submodel>
        </specification>
      </model>
      <model name="household_fast_allocation_to_building_model" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">mrcog.models.household_fast_allocation_model</class_module>
            <class_name type="string">HouseholdFastAllocationModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">HouseholdFastAllocationModel</name>
          </init>
          <run type="dictionary">
            <argument model_dependency_type="dataset" name="agent_set" type="string">household</argument>
            <argument hidden="True" name="agents_index" type="string">hrm_index</argument>
          </run>
        </structure>
      </model>
      <model name="employment2010_model" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">mrcog.models.employment2010_model</class_module>
            <class_name type="string">Employment2010Model</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">Employment2010Model</name>
          </init>
          <run type="dictionary">
          </run>
        </structure>
      </model>
      <model name="mrcog_building_transition_model" type="model">
        <structure type="dictionary">
          <import hidden="False" name="import" type="dictionary">
            <class_module type="string">urbansim.models.real_estate_transition_model</class_module>
            <class_name>RealEstateTransitionModel</class_name>
          </import>
          <init type="dictionary">
            <name hidden="False" name="name" type="string">RealEstateTransitionModel</name>
          </init>
          <prepare_for_run type="dictionary">
            <output name="output" type="string">_DISCARD</output>
            <argument name="storage" type="string">base_cache_storage</argument>
            <argument name="dataset_name" parser_action="quote_string" type="string">target_vacancy</argument>
            <argument name="table_name" parser_action="quote_string" type="string">target_vacancies</argument>
            <name name="name" type="string">prepare_for_run</name>
          </prepare_for_run>
          <run type="dictionary">
            <output name="output" type="string">building, new_building_index</output>
            <argument name="realestate_dataset" type="string">building</argument>
            <argument name="year" type="string">year</argument>
            <argument name="occupied_spaces_variable" parser_action="quote_string" type="string">occupied_spaces</argument>
            <argument name="total_spaces_variable" parser_action="quote_string" type="string">total_spaces</argument>
            <argument name="sample_from_dataset" type="string">building</argument>
            <argument name="reset_attribute_value" type="string">{'parcel_id':-1}</argument>.
            <argument name="append_to_realestate_dataset" type="string">True</argument>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
            <argument name="sample_filter" type="string">"(building.year_built&gt;1999)"</argument>
            <argument name="resources" type="string">model_resources</argument>
          </run>
        </structure>
      </model>
      <model name="mf_building_location_choice_model" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">urbansim.models.agent_location_choice_model</class_module>
            <class_name type="string">AgentLocationChoiceModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">AgentLocationChoiceModel</name>
            <argument model_dependency_type="dataset" name="location_set" type="string">parcel</argument>
            <argument name="sampler" parser_action="quote_string" type="string">opus_core.samplers.weighted_sampler</argument>
            <argument name="utilities" parser_action="quote_string" type="string">opus_core.linear_utilities</argument>
            <argument name="probabilities" parser_action="quote_string" type="string">opus_core.mnl_probabilities</argument>
            <argument name="choices" parser_action="quote_string" type="string">opus_core.random_choices_from_index</argument>
            <argument convert_blank_to_none="True" model_dependency_type="variable" name="filter" parser_action="quote_string" type="string">parcel.parcel_acres&gt;.1</argument>
            <argument convert_blank_to_none="True" model_dependency_type="variable" name="submodel_string" parser_action="quote_string" type="string">(building.building_type_id)*(building.building_type_id==2)</argument>
            <argument convert_blank_to_none="True" model_dependency_type="variable" name="location_id_string" parser_action="quote_string" type="string">parcel_id</argument>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
            <argument name="model_name" parser_action="quote_string" type="string">BuildingLocationChoiceModel_mf</argument>
            <argument name="short_name" parser_action="quote_string" type="string">BLCM</argument>
            <argument name="variable_package" parser_action="quote_string" type="string">urbansim</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
            <argument name="run_config" type="dictionary">
              <key name="sample_size_locations" type="integer">50</key>
              <key convert_blank_to_none="True" name="sample_proportion_locations" type="integer"></key>
              <key name="compute_capacity_flag" type="boolean">True</key>
              <key convert_blank_to_none="True" model_dependency_type="variable" name="capacity_string" type="string">clip_to_zero(((((parcel.parcel_acres*43560)*1.5).round().astype(int32)) - (parcel.aggregate(building.non_residential_sqft)))/1500 - (parcel.aggregate(building.residential_units)))</key>
              <key convert_blank_to_none="True" model_dependency_type="variable" name="number_of_units_string" type="string">((((parcel.parcel_acres*43560)*1.5).round().astype(int32)) - (parcel.aggregate(building.non_residential_sqft)))/1500</key>
              <key convert_blank_to_none="True" model_dependency_type="variable" name="number_of_agents_string" type="string">(parcel.aggregate(building.residential_units))</key>
              <key name="lottery_max_iterations" type="integer">3</key>
            </argument>
            <argument name="estimate_config" type="dictionary">
              <key convert_blank_to_none="True" model_dependency_type="variable" name="weights_for_estimation_string" parser_action="quote_string" type="string"></key>
              <key name="sample_size_locations" type="integer">30</key>
              <key convert_blank_to_none="True" name="sample_proportion_locations" type="integer"></key>
              <key name="estimation_size_agents" type="float">1.0</key>
            </argument>
          </init>
          <prepare_for_estimate type="dictionary">
            <name name="name" type="string">prepare_for_estimate</name>
            <output name="output" type="string">(alcm_specification, alcm_index)</output>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument model_dependency_type="table" name="specification_table" parser_action="quote_string" type="string">mf_building_location_choice_model_specification</argument>
            <argument model_dependency_type="dataset" name="agent_set" type="string">building</argument>
            <argument name="agents_for_estimation_storage" type="string">base_cache_storage</argument>
            <argument model_dependency_type="table" name="agents_for_estimation_table" parser_action="quote_string" type="string">buildings</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument convert_blank_to_none="True" name="index_to_unplace" type="string"></argument>
            <argument name="join_datasets" type="boolean">True</argument>
            <argument name="portion_to_unplace" type="string">1.0</argument>
            <argument convert_blank_to_none="True" model_dependency_type="variable" name="filter" parser_action="quote_string" type="string">building.residential_units&gt;0</argument>
            <argument convert_blank_to_none="True" model_dependency_type="variable" name="location_id_variable" parser_action="quote_string" type="string">parcel_id</argument>
          </prepare_for_estimate>
          <estimate type="dictionary">
            <output name="output" type="string">(alcm_coefficients, dummy)</output>
            <argument model_dependency_type="dataset" name="agent_set" type="string">building</argument>
            <argument name="agents_index" type="string">alcm_index</argument>
            <argument name="procedure" parser_action="quote_string" type="string">opus_core.bhhh_mnl_estimation</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
            <argument name="specification" type="string">alcm_specification</argument>
          </estimate>
          <prepare_for_run type="dictionary">
            <name name="name" type="string">prepare_for_run</name>
            <output name="output" type="string">(alcm_specification, alcm_coefficients)</output>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument model_dependency_type="table" name="coefficients_table" parser_action="quote_string" type="string">mf_building_location_choice_model_coefficients</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument model_dependency_type="table" name="specification_table" parser_action="quote_string" type="string">mf_building_location_choice_model_specification</argument>
          </prepare_for_run>
          <run type="dictionary">
            <argument model_dependency_type="dataset" name="agent_set" type="string">building</argument>
            <argument convert_blank_to_none="True" name="agents_index" type="string">new_building_index</argument>
            <argument convert_blank_to_none="True" name="agents_filter" type="string">'building.building_type_id==2'</argument>
            <argument name="chunk_specification" type="string">{'records_per_chunk':50000}</argument>
            <argument name="coefficients" type="string">alcm_coefficients</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
            <argument name="specification" type="string">alcm_specification</argument>
            <argument name="maximum_runs" type="integer">10</argument>
          </run>
        </structure>
        <specification type="dictionary">
          <submodel hidden="Children" name="mf" submodel_id="2" type="submodel">
            <description type="string">sfdetached</description>
            <variable_list type="variable_list">
              <variable_spec name="parcel.p_ln_parcel_acres"></variable_spec>
            </variable_list>
          </submodel>
        </specification>
      </model>
      <model name="sf_building_location_choice_model" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">urbansim.models.agent_location_choice_model</class_module>
            <class_name type="string">AgentLocationChoiceModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">AgentLocationChoiceModel</name>
            <argument model_dependency_type="dataset" name="location_set" type="string">parcel</argument>
            <argument name="sampler" parser_action="quote_string" type="string">opus_core.samplers.weighted_sampler</argument>
            <argument name="utilities" parser_action="quote_string" type="string">opus_core.linear_utilities</argument>
            <argument name="probabilities" parser_action="quote_string" type="string">opus_core.mnl_probabilities</argument>
            <argument name="choices" parser_action="quote_string" type="string">opus_core.random_choices_from_index</argument>
            <argument convert_blank_to_none="True" model_dependency_type="variable" name="filter" parser_action="quote_string" type="string">parcel.parcel_acres&gt;.1</argument>
            <argument convert_blank_to_none="True" model_dependency_type="variable" name="submodel_string" parser_action="quote_string" type="string">(building.building_type_id)*(building.building_type_id==1)</argument>
            <argument convert_blank_to_none="True" model_dependency_type="variable" name="location_id_string" parser_action="quote_string" type="string">parcel_id</argument>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
            <argument name="model_name" parser_action="quote_string" type="string">BuildingLocationChoiceModel_sf</argument>
            <argument name="short_name" parser_action="quote_string" type="string">BLCM</argument>
            <argument name="variable_package" parser_action="quote_string" type="string">urbansim</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
            <argument name="run_config" type="dictionary">
              <key name="sample_size_locations" type="integer">50</key>
              <key convert_blank_to_none="True" name="sample_proportion_locations" type="integer"></key>
              <key name="compute_capacity_flag" type="boolean">True</key>
              <key convert_blank_to_none="True" model_dependency_type="variable" name="capacity_string" type="string">clip_to_zero(((((parcel.parcel_acres*43560)*1.5).round().astype(int32)) - (parcel.aggregate(building.non_residential_sqft)))/1500 - (parcel.aggregate(building.residential_units)))</key>
              <key convert_blank_to_none="True" model_dependency_type="variable" name="number_of_units_string" type="string">((((parcel.parcel_acres*43560)*1.5).round().astype(int32)) - (parcel.aggregate(building.non_residential_sqft)))/1500</key>
              <key convert_blank_to_none="True" model_dependency_type="variable" name="number_of_agents_string" type="string">(parcel.aggregate(building.residential_units))</key>
              <key name="lottery_max_iterations" type="integer">3</key>
            </argument>
            <argument name="estimate_config" type="dictionary">
              <key convert_blank_to_none="True" model_dependency_type="variable" name="weights_for_estimation_string" parser_action="quote_string" type="string"></key>
              <key name="sample_size_locations" type="integer">30</key>
              <key convert_blank_to_none="True" name="sample_proportion_locations" type="integer"></key>
              <key name="estimation_size_agents" type="float">1.0</key>
            </argument>
          </init>
          <prepare_for_estimate type="dictionary">
            <name name="name" type="string">prepare_for_estimate</name>
            <output name="output" type="string">(alcm_specification, alcm_index)</output>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument model_dependency_type="table" name="specification_table" parser_action="quote_string" type="string">sf_building_location_choice_model_specification</argument>
            <argument model_dependency_type="dataset" name="agent_set" type="string">building</argument>
            <argument name="agents_for_estimation_storage" type="string">base_cache_storage</argument>
            <argument model_dependency_type="table" name="agents_for_estimation_table" parser_action="quote_string" type="string">buildings</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument convert_blank_to_none="True" name="index_to_unplace" type="string"></argument>
            <argument name="join_datasets" type="boolean">True</argument>
            <argument name="portion_to_unplace" type="string">1.0</argument>
            <argument convert_blank_to_none="True" model_dependency_type="variable" name="filter" parser_action="quote_string" type="string">building.residential_units&gt;0</argument>
            <argument convert_blank_to_none="True" model_dependency_type="variable" name="location_id_variable" parser_action="quote_string" type="string">parcel_id</argument>
          </prepare_for_estimate>
          <estimate type="dictionary">
            <output name="output" type="string">(alcm_coefficients, dummy)</output>
            <argument model_dependency_type="dataset" name="agent_set" type="string">building</argument>
            <argument name="agents_index" type="string">alcm_index</argument>
            <argument name="procedure" parser_action="quote_string" type="string">opus_core.bhhh_mnl_estimation</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
            <argument name="specification" type="string">alcm_specification</argument>
          </estimate>
          <prepare_for_run type="dictionary">
            <name name="name" type="string">prepare_for_run</name>
            <output name="output" type="string">(alcm_specification, alcm_coefficients)</output>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument model_dependency_type="table" name="coefficients_table" parser_action="quote_string" type="string">sf_building_location_choice_model_coefficients</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument model_dependency_type="table" name="specification_table" parser_action="quote_string" type="string">sf_building_location_choice_model_specification</argument>
          </prepare_for_run>
          <run type="dictionary">
            <argument model_dependency_type="dataset" name="agent_set" type="string">building</argument>
            <argument convert_blank_to_none="True" name="agents_index" type="string">new_building_index</argument>
            <argument convert_blank_to_none="True" name="agents_filter" type="string">'building.building_type_id==2'</argument>
            <argument name="chunk_specification" type="string">{'records_per_chunk':50000}</argument>
            <argument name="coefficients" type="string">alcm_coefficients</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
            <argument name="specification" type="string">alcm_specification</argument>
            <argument name="maximum_runs" type="integer">10</argument>
          </run>
        </structure>
        <specification type="dictionary">
          <submodel hidden="Children" name="sfdetached" submodel_id="1" type="submodel">
            <description type="string">sfdetached</description>
            <variable_list type="variable_list">
              <variable_spec name="parcel.p_ln_parcel_acres"></variable_spec>
            </variable_list>
          </submodel>
        </specification>
      </model>
      <model name="commercial_building_location_choice_model" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">urbansim.models.agent_location_choice_model</class_module>
            <class_name type="string">AgentLocationChoiceModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">AgentLocationChoiceModel</name>
            <argument model_dependency_type="dataset" name="location_set" type="string">parcel</argument>
            <argument name="sampler" parser_action="quote_string" type="string">opus_core.samplers.weighted_sampler</argument>
            <argument name="utilities" parser_action="quote_string" type="string">opus_core.linear_utilities</argument>
            <argument name="probabilities" parser_action="quote_string" type="string">opus_core.mnl_probabilities</argument>
            <argument name="choices" parser_action="quote_string" type="string">opus_core.random_choices_from_index</argument>
            <argument convert_blank_to_none="True" model_dependency_type="variable" name="filter" parser_action="quote_string" type="string">parcel.parcel_acres&gt;.1</argument>
            <argument convert_blank_to_none="True" model_dependency_type="variable" name="submodel_string" parser_action="quote_string" type="string">(building.building_type_id)*(building.building_type_id&gt;2)</argument>
            <argument convert_blank_to_none="True" model_dependency_type="variable" name="location_id_string" parser_action="quote_string" type="string">parcel_id</argument>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
            <argument name="model_name" parser_action="quote_string" type="string">BuildingLocationChoiceModel_c</argument>
            <argument name="short_name" parser_action="quote_string" type="string">BLCM</argument>
            <argument name="variable_package" parser_action="quote_string" type="string">urbansim</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
            <argument name="run_config" type="dictionary">
              <key name="sample_size_locations" type="integer">50</key>
              <key convert_blank_to_none="True" name="sample_proportion_locations" type="integer"></key>
              <key name="compute_capacity_flag" type="boolean">True</key>
              <key convert_blank_to_none="True" model_dependency_type="variable" name="capacity_string" type="string">clip_to_zero((((parcel.parcel_acres*43560)*1.5).round().astype(int32)-(parcel.aggregate(1500*building.residential_units))) - (parcel.aggregate(building.non_residential_sqft)))</key>
              <key convert_blank_to_none="True" model_dependency_type="variable" name="number_of_units_string" type="string">(((parcel.parcel_acres*43560)*1.5).round().astype(int32)-(parcel.aggregate(1500*building.residential_units)))</key>
              <key convert_blank_to_none="True" model_dependency_type="variable" name="number_of_agents_string" type="string">(parcel.aggregate(building.non_residential_sqft))</key>
              <key name="lottery_max_iterations" type="integer">3</key>
            </argument>
            <argument name="estimate_config" type="dictionary">
              <key convert_blank_to_none="True" model_dependency_type="variable" name="weights_for_estimation_string" parser_action="quote_string" type="string"></key>
              <key name="sample_size_locations" type="integer">30</key>
              <key convert_blank_to_none="True" name="sample_proportion_locations" type="integer"></key>
              <key name="estimation_size_agents" type="float">1.0</key>
            </argument>
          </init>
          <prepare_for_estimate type="dictionary">
            <name name="name" type="string">prepare_for_estimate</name>
            <output name="output" type="string">(alcm_specification, alcm_index)</output>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument model_dependency_type="table" name="specification_table" parser_action="quote_string" type="string">commercial_building_location_choice_model_specification</argument>
            <argument model_dependency_type="dataset" name="agent_set" type="string">building</argument>
            <argument name="agents_for_estimation_storage" type="string">base_cache_storage</argument>
            <argument model_dependency_type="table" name="agents_for_estimation_table" parser_action="quote_string" type="string">buildings</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument convert_blank_to_none="True" name="index_to_unplace" type="string"></argument>
            <argument name="join_datasets" type="boolean">True</argument>
            <argument name="portion_to_unplace" type="string">1.0</argument>
            <argument convert_blank_to_none="True" model_dependency_type="variable" name="filter" parser_action="quote_string" type="string">building.non_residential_sqft&gt;100</argument>
            <argument convert_blank_to_none="True" model_dependency_type="variable" name="location_id_variable" parser_action="quote_string" type="string">parcel_id</argument>
          </prepare_for_estimate>
          <estimate type="dictionary">
            <output name="output" type="string">(alcm_coefficients, dummy)</output>
            <argument model_dependency_type="dataset" name="agent_set" type="string">building</argument>
            <argument name="agents_index" type="string">alcm_index</argument>
            <argument name="procedure" parser_action="quote_string" type="string">opus_core.bhhh_mnl_estimation</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
            <argument name="specification" type="string">alcm_specification</argument>
          </estimate>
          <prepare_for_run type="dictionary">
            <name name="name" type="string">prepare_for_run</name>
            <output name="output" type="string">(alcm_specification, alcm_coefficients)</output>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument model_dependency_type="table" name="coefficients_table" parser_action="quote_string" type="string">commercial_building_location_choice_model_coefficients</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument model_dependency_type="table" name="specification_table" parser_action="quote_string" type="string">commercial_building_location_choice_model_specification</argument>
          </prepare_for_run>
          <run type="dictionary">
            <argument model_dependency_type="dataset" name="agent_set" type="string">building</argument>
            <argument convert_blank_to_none="True" name="agents_index" type="string">new_building_index</argument>
            <argument convert_blank_to_none="True" name="agents_filter" type="string">'building.building_type_id&gt;2'</argument>
            <argument name="chunk_specification" type="string">{'records_per_chunk':50000}</argument>
            <argument name="coefficients" type="string">alcm_coefficients</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
            <argument name="specification" type="string">alcm_specification</argument>
            <argument name="maximum_runs" type="integer">10</argument>
          </run>
        </structure>
        <specification type="dictionary">
          <submodel hidden="Children" name="office" submodel_id="3" type="submodel">
            <description type="string">office</description>
            <variable_list type="variable_list">
              <variable_spec name="parcel.p_ln_parcel_acres"></variable_spec>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="hospital" submodel_id="4" type="submodel">
            <description type="string">hospital</description>
            <variable_list type="variable_list">
              <variable_spec name="parcel.p_ln_parcel_acres"></variable_spec>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="mixed_use" submodel_id="5" type="submodel">
            <description type="string">mixed_use</description>
            <variable_list type="variable_list">
              <variable_spec name="parcel.p_ln_parcel_acres"></variable_spec>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="recreation" submodel_id="6" type="submodel">
            <description type="string">recreation</description>
            <variable_list type="variable_list">
              <variable_spec name="parcel.p_ln_parcel_acres"></variable_spec>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="restaurant" submodel_id="7" type="submodel">
            <description type="string">restaurant</description>
            <variable_list type="variable_list">
              <variable_spec name="parcel.p_ln_parcel_acres"></variable_spec>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="retail" submodel_id="8" type="submodel">
            <description type="string">retail</description>
            <variable_list type="variable_list">
              <variable_spec name="parcel.p_ln_parcel_acres"></variable_spec>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="tcu" submodel_id="9" type="submodel">
            <description type="string">tcu</description>
            <variable_list type="variable_list">
              <variable_spec name="parcel.p_ln_parcel_acres"></variable_spec>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="lodging" submodel_id="10" type="submodel">
            <description type="string">lodging</description>
            <variable_list type="variable_list">
              <variable_spec name="parcel.p_ln_parcel_acres"></variable_spec>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="lodging" submodel_id="11" type="submodel">
            <description type="string">lodging</description>
            <variable_list type="variable_list">
              <variable_spec name="parcel.p_ln_parcel_acres"></variable_spec>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="lodging" submodel_id="13" type="submodel">
            <description type="string">lodging</description>
            <variable_list type="variable_list">
              <variable_spec name="parcel.p_ln_parcel_acres"></variable_spec>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="lodging" submodel_id="16" type="submodel">
            <description type="string">lodging</description>
            <variable_list type="variable_list">
              <variable_spec name="parcel.p_ln_parcel_acres"></variable_spec>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="lodging" submodel_id="17" type="submodel">
            <description type="string">lodging</description>
            <variable_list type="variable_list">
              <variable_spec name="parcel.p_ln_parcel_acres"></variable_spec>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="lodging" submodel_id="18" type="submodel">
            <description type="string">lodging</description>
            <variable_list type="variable_list">
              <variable_spec name="parcel.p_ln_parcel_acres"></variable_spec>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="lodging" submodel_id="19" type="submodel">
            <description type="string">lodging</description>
            <variable_list type="variable_list">
              <variable_spec name="parcel.p_ln_parcel_acres"></variable_spec>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="lodging" submodel_id="20" type="submodel">
            <description type="string">lodging</description>
            <variable_list type="variable_list">
              <variable_spec name="parcel.p_ln_parcel_acres"></variable_spec>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="lodging" submodel_id="31" type="submodel">
            <description type="string">lodging</description>
            <variable_list type="variable_list">
              <variable_spec name="parcel.p_ln_parcel_acres"></variable_spec>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="lodging" submodel_id="51" type="submodel">
            <description type="string">lodging</description>
            <variable_list type="variable_list">
              <variable_spec name="parcel.p_ln_parcel_acres"></variable_spec>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="lodging" submodel_id="61" type="submodel">
            <description type="string">lodging</description>
            <variable_list type="variable_list">
              <variable_spec name="parcel.p_ln_parcel_acres"></variable_spec>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="lodging" submodel_id="99" type="submodel">
            <description type="string">lodging</description>
            <variable_list type="variable_list">
              <variable_spec name="parcel.p_ln_parcel_acres"></variable_spec>
            </variable_list>
          </submodel>
        </specification>
      </model>
      <model name="submarket_household_location_choice_model" type="model">
        <estimation_config name="Estimation Configuration" parser_action="skip">
          <config_override config_name="models" name="Models to run before estimation" type="list">[]</config_override>
        </estimation_config>
        <structure type="dictionary">
          <run type="dictionary">
            <argument name="chunk_specification" type="string">{'nchunks':3}</argument>
            <argument name="agent_set" type="string">household</argument>
            <argument name="specification" type="string">specification</argument>
            <argument name="maximum_runs" type="integer">5</argument>
            <argument name="agents_index" type="string">hrm_index</argument>
            <!--<argument convert_blank_to_none="True" name="agents_filter" type="string">'(household.tenure==2)*(household.building_type_id==20)'</argument>-->
            <argument name="data_objects" type="string">datasets</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
            <argument name="coefficients" type="string">coefficients</argument>
          </run>
          <init type="dictionary">
            <argument convert_blank_to_none="True" name="number_of_units_string" type="string"></argument>
            <argument name="variable_package" parser_action="quote_string" type="string">mrcog</argument>
            <argument convert_blank_to_none="True" name="location_id_string" parser_action="quote_string" type="string">mrcog.household.submarket_id</argument>
            <argument convert_blank_to_none="True" name="submodel_string" parser_action="quote_string" type="string"></argument>
            <argument name="capacity_string" parser_action="quote_string" type="string">clip_to_zero(submarket.residential_units-submarket.number_of_households)</argument>
            <argument name="filter" parser_action="quote_string" type="string">(submarket.residential_units&gt;0)*(mrcog.submarket.residential_building_type_id&lt;3)</argument>
            <argument name="estimation_weight_string" parser_action="quote_string" type="string">submarket.residential_units</argument>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
            <argument name="choices" parser_action="quote_string" type="string">urbansim.lottery_choices</argument>
            <argument name="number_of_agents_string" parser_action="quote_string" type="string">number_of_households</argument>
            <argument name="run_config" type="string">Resources({'lottery_max_iterations': 10})</argument>
            <argument name="location_set" type="string">submarket</argument>
            <argument convert_blank_to_none="True" name="estimation_size_agents" type="string">.1</argument>
            <argument name="sampler" parser_action="quote_string" type="string">opus_core.samplers.weighted_sampler</argument>
            <argument convert_blank_to_none="True" name="simulation_weight_string" parser_action="quote_string" type="string">None</argument>
            <argument name="estimation" parser_action="quote_string" type="string">opus_core.bhhh_mnl_estimation_with_diagnose</argument>
            <argument name="sample_size_locations" type="integer">50</argument>
            <argument name="estimate_config" type="string">Resources({})</argument>
            <name name="name" type="string">HouseholdLocationChoiceModel</name>
          </init>
          <import name="import" type="dictionary">
            <class_module>urbansim.models.household_location_choice_model</class_module>
            <class_name>HouseholdLocationChoiceModel</class_name>
          </import>
          <estimate type="dictionary">
            <output name="output" type="string">(coefficients, _)</output>
            <argument name="specification" type="string">specification</argument>
            <argument name="agent_set" type="string">household</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument name="agents_index" type="string">index</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
          </estimate>
          <prepare_for_run type="dictionary">
            <output name="output" type="string">(specification, coefficients)</output>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_table" parser_action="quote_string" type="string">submarket_household_location_choice_model_coefficients</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">submarket_household_location_choice_model_specification</argument>
            <name name="name" type="string">prepare_for_run</name>
          </prepare_for_run>
          <prepare_for_estimate type="dictionary">
            <output name="output" type="string">(specification, index)</output>
            <argument name="portion_to_unplace" type="float">0.333333333333</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">submarket_household_location_choice_model_specification</argument>
            <argument name="agent_set" type="string">household</argument>
            <argument name="index_to_unplace" type="string">None</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument convert_blank_to_none="True" name="filter" type="string">'(household.building_id&gt;0)'</argument>
            <argument name="join_datasets" type="boolean">False</argument>
            <argument convert_blank_to_none="True" name="agents_for_estimation_table" parser_action="quote_string" type="string">households</argument>
            <argument convert_blank_to_none="True" name="agents_for_estimation_storage" type="string">base_cache_storage</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <name name="name" type="string">prepare_for_estimate</name>
          </prepare_for_estimate>
        </structure>
        <specification inherit_parent_values="False" type="dictionary">
          <submodel hidden="Children" inherit_parent_values="False" name="all_households" submodel_id="-2" type="submodel">
            <description type="string">renter_sf</description>
            <variable_list type="variable_list">
              <variable_spec name="submarket.residential_units"></variable_spec>
            </variable_list>
          </submodel>
        </specification>
      </model>
      <model name="residential_price_model" type="model">
        <structure type="dictionary">
          <run type="dictionary">
            <argument hidden="True" name="specification" type="string">specification</argument>
            <argument model_dependency_type="dataset" name="dataset" type="string">building</argument>
            <argument hidden="True" name="data_objects" type="string">datasets</argument>
            <argument hidden="True" name="coefficients" type="string">coefficients</argument>
          </run>
          <init type="dictionary">
            <argument name="outcome_attribute" parser_action="quote_string" type="string">ln_unit_price_residential=ln(building.unit_price_residential)</argument>
            <argument convert_blank_to_none="True" model_dependency_type="variable" name="filter_attribute" parser_action="quote_string" type="string">(building.residential_units&gt;0)</argument>
            <argument model_dependency_type="variable" name="submodel_string" parser_action="quote_string" type="string">building.building_type_id</argument>
            <argument hidden="True" name="dataset_pool" type="string">dataset_pool</argument>
            <name hidden="True" name="name" type="string">RealEstatePriceModel</name>
          </init>
          <import hidden="True" name="import" type="dictionary">
            <class_module type="string">urbansim.models.real_estate_price_model</class_module>
            <class_name>RealEstatePriceModel</class_name>
          </import>
          <estimate type="dictionary">
            <output hidden="True" name="output" type="string">(coefficients, _)</output>
            <argument hidden="True" name="index" type="string">repm_index</argument>
            <argument name="outcome_attribute" parser_action="quote_string" type="string">ln_unit_price_residential=ln(building.unit_price_residential)</argument>
            <argument hidden="True" name="specification" type="string">specification</argument>
            <argument model_dependency_type="dataset" name="dataset" type="string">building</argument>
            <argument hidden="True" name="data_objects" type="string">datasets</argument>
            <argument hidden="True" name="debuglevel" type="string">debuglevel</argument>
          </estimate>
          <prepare_for_run type="dictionary">
            <output hidden="True" name="output" type="string">(specification, coefficients)</output>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument model_dependency_type="table" name="coefficients_table" parser_action="quote_string" type="string">residential_price_model_coefficients</argument>
            <argument model_dependency_type="table" name="specification_table" parser_action="quote_string" type="string">residential_price_model_specification</argument>
            <name hidden="True" name="name" type="string">prepare_for_run</name>
          </prepare_for_run>
          <prepare_for_estimate type="dictionary">
            <output hidden="True" name="output" type="string">(specification, repm_index)</output>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument model_dependency_type="table" name="specification_table" parser_action="quote_string" type="string">residential_price_model_specification</argument>
            <argument convert_blank_to_none="True" model_dependency_type="variable" name="filter_variable" parser_action="quote_string" type="string">(building.improvement_value&gt;40000)*(building.residential_units&gt;0)</argument>
            <argument model_dependency_type="dataset" name="dataset" type="string">building</argument>
            <name hidden="True" name="name" type="string">prepare_for_estimate</name>
          </prepare_for_estimate>
        </structure>
        <specification type="dictionary">
          <submodel hidden="Children" name="sf" submodel_id="1" type="submodel">
            <description type="string">sf_detached</description>
            <variable_list type="variable_list">
              <variable_spec name="building.building_year_built"></variable_spec>
              <variable_spec name="constant"></variable_spec>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="mf" submodel_id="2" type="submodel">
            <description type="string">duplex</description>
            <variable_list type="variable_list">
              <variable_spec name="building.building_year_built"></variable_spec>
              <variable_spec name="constant"></variable_spec>
            </variable_list>
          </submodel>
        </specification>
      </model>
      <model name="non_residential_price_model" type="model">
        <structure type="dictionary">
          <run type="dictionary">
            <argument hidden="True" name="specification" type="string">specification</argument>
            <argument model_dependency_type="dataset" name="dataset" type="string">building</argument>
            <argument hidden="True" name="data_objects" type="string">datasets</argument>
            <argument hidden="True" name="coefficients" type="string">coefficients</argument>
          </run>
          <init type="dictionary">
            <argument name="outcome_attribute" parser_action="quote_string" type="string">ln_unit_price_non_residential=ln(building.unit_price_non_residential)</argument>
            <argument convert_blank_to_none="True" model_dependency_type="variable" name="filter_attribute" parser_action="quote_string" type="string">building.non_residential_sqft&gt;0</argument>
            <argument model_dependency_type="variable" name="submodel_string" parser_action="quote_string" type="string">building.building_type_id</argument>
            <argument hidden="True" name="dataset_pool" type="string">dataset_pool</argument>
            <name hidden="True" name="name" type="string">RealEstatePriceModel</name>
          </init>
          <import hidden="True" name="import" type="dictionary">
            <class_module type="string">urbansim.models.real_estate_price_model</class_module>
            <class_name>RealEstatePriceModel</class_name>
          </import>
          <estimate type="dictionary">
            <output hidden="True" name="output" type="string">(coefficients, _)</output>
            <argument hidden="True" name="index" type="string">repm_index</argument>
            <argument name="outcome_attribute" parser_action="quote_string" type="string">ln_unit_price_non_residential=ln(building.unit_price_non_residential)</argument>
            <argument hidden="True" name="specification" type="string">specification</argument>
            <argument model_dependency_type="dataset" name="dataset" type="string">building</argument>
            <argument hidden="True" name="data_objects" type="string">datasets</argument>
            <argument hidden="True" name="debuglevel" type="string">debuglevel</argument>
          </estimate>
          <prepare_for_run type="dictionary">
            <output hidden="True" name="output" type="string">(specification, coefficients)</output>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument model_dependency_type="table" name="coefficients_table" parser_action="quote_string" type="string">non_residential_price_model_coefficients</argument>
            <argument model_dependency_type="table" name="specification_table" parser_action="quote_string" type="string">non_residential_price_model_specification</argument>
            <name hidden="True" name="name" type="string">prepare_for_run</name>
          </prepare_for_run>
          <prepare_for_estimate type="dictionary">
            <output hidden="True" name="output" type="string">(specification, repm_index)</output>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument model_dependency_type="table" name="specification_table" parser_action="quote_string" type="string">non_residential_price_model_specification</argument>
            <argument convert_blank_to_none="True" model_dependency_type="variable" name="filter_variable" parser_action="quote_string" type="string">(building.improvement_value&gt;10000)*(building.non_residential_sqft&gt;0)</argument>
            <argument model_dependency_type="dataset" name="dataset" type="string">building</argument>
            <name hidden="True" name="name" type="string">prepare_for_estimate</name>
          </prepare_for_estimate>
        </structure>
        <specification type="dictionary">
          <submodel hidden="Children" name="commercial_retail" submodel_id="3" type="submodel">
            <description type="string">commercial_retail</description>
            <variable_list type="variable_list">
              <variable_spec name="constant"></variable_spec>
              <variable_spec name="building.year_built_building"></variable_spec>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="commercial_services" submodel_id="4" type="submodel">
            <description type="string">commercial_services</description>
            <variable_list type="variable_list">
              <variable_spec name="constant"></variable_spec>
              <variable_spec name="building.year_built_building"></variable_spec>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="office" submodel_id="5" type="submodel">
            <description type="string">office</description>
            <variable_list type="variable_list">
              <variable_spec name="constant"></variable_spec>
              <variable_spec name="building.year_built_building"></variable_spec>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="industrial" submodel_id="6" type="submodel">
            <description type="string">industrial"</description>
            <variable_list type="variable_list">
              <variable_spec name="constant"></variable_spec>
              <variable_spec name="building.year_built_building"></variable_spec>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="medical" submodel_id="7" type="submodel">
            <description type="string">medical</description>
            <variable_list type="variable_list">
              <variable_spec name="constant"></variable_spec>
              <variable_spec name="building.year_built_building"></variable_spec>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="educational" submodel_id="8" type="submodel">
            <description type="string">educational</description>
            <variable_list type="variable_list">
              <variable_spec name="constant"></variable_spec>
              <variable_spec name="building.year_built_building"></variable_spec>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="airport" submodel_id="9" type="submodel">
            <description type="string">airport</description>
            <variable_list type="variable_list">
              <variable_spec name="constant"></variable_spec>
              <variable_spec name="building.year_built_building"></variable_spec>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="transport_and_parking" submodel_id="10" type="submodel">
            <description type="string">transport_and_parking</description>
            <variable_list type="variable_list">
              <variable_spec name="constant"></variable_spec>
              <variable_spec name="building.year_built_building"></variable_spec>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="agricultural" submodel_id="11" type="submodel">
            <description type="string">agricultural</description>
            <variable_list type="variable_list">
              <variable_spec name="constant"></variable_spec>
              <variable_spec name="building.year_built_building"></variable_spec>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="recreational" submodel_id="13" type="submodel">
            <description type="string">recreational</description>
            <variable_list type="variable_list">
              <variable_spec name="constant"></variable_spec>
              <variable_spec name="building.year_built_building"></variable_spec>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="utility" submodel_id="16" type="submodel">
            <description type="string">utility</description>
            <variable_list type="variable_list">
              <variable_spec name="constant"></variable_spec>
              <variable_spec name="building.year_built_building"></variable_spec>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="community" submodel_id="17" type="submodel">
            <description type="string">community</description>
            <variable_list type="variable_list">
              <variable_spec name="constant"></variable_spec>
              <variable_spec name="building.year_built_building"></variable_spec>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="kafb" submodel_id="18" type="submodel">
            <description type="string">kafb</description>
            <variable_list type="variable_list">
              <variable_spec name="constant"></variable_spec>
              <variable_spec name="building.year_built_building"></variable_spec>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="mixed_use" submodel_id="19" type="submodel">
            <description type="string">mixed_use</description>
            <variable_list type="variable_list">
              <variable_spec name="constant"></variable_spec>
              <variable_spec name="building.year_built_building"></variable_spec>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="prison" submodel_id="20" type="submodel">
            <description type="string">prison</description>
            <variable_list type="variable_list">
              <variable_spec name="constant"></variable_spec>
              <variable_spec name="building.year_built_building"></variable_spec>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="commercial_major" submodel_id="31" type="submodel">
            <description type="string">commercial_major</description>
            <variable_list type="variable_list">
              <variable_spec name="constant"></variable_spec>
              <variable_spec name="building.year_built_building"></variable_spec>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="office_major" submodel_id="51" type="submodel">
            <description type="string">office_major</description>
            <variable_list type="variable_list">
              <variable_spec name="constant"></variable_spec>
              <variable_spec name="building.year_built_building"></variable_spec>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="wholesale_and_warehouse" submodel_id="61" type="submodel">
            <description type="string">wholesale_and_warehouse</description>
            <variable_list type="variable_list">
              <variable_spec name="constant"></variable_spec>
              <variable_spec name="building.year_built_building"></variable_spec>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="other" submodel_id="99" type="submodel">
            <description type="string">other</description>
            <variable_list type="variable_list">
              <variable_spec name="constant"></variable_spec>
              <variable_spec name="building.year_built_building"></variable_spec>
            </variable_list>
          </submodel>
        </specification>
      </model>
      <model name="household_relocation_model" type="model">
        <structure type="dictionary">
          <init type="dictionary">
            <name hidden="True" name="name" type="string">AgentRelocationModel</name>
            <argument hidden="True" name="debuglevel" type="string">debuglevel</argument>
            <argument name="model_name" parser_action="quote_string" type="string">Household Relocation Model</argument>
            <argument name="location_id_name" parser_action="quote_string" type="string">mrcog.household.submarket_id</argument>
          </init>
        </structure>
      </model>
      <model name="household_transition_model_with_persons" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module>urbansim.models.transition_model</class_module>
            <class_name>TransitionModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">TransitionModel</name>
            <argument name="dataset" type="string">household</argument>
            <argument name="model_name" parser_action="quote_string" type="string">Household Transition Model</argument>
            <argument name="model_short_name" parser_action="quote_string" type="string">HTM</argument>
          </init>
          <prepare_for_run type="dictionary">
            <name name="name" type="string">prepare_for_run</name>
            <argument name="control_total_table" parser_action="quote_string" type="string">annual_household_control_totals</argument>
            <argument name="control_total_storage" type="string">base_cache_storage</argument>
          </prepare_for_run>
          <run type="dictionary">
            <argument name="year" type="string">year</argument>
            <argument name="target_attribute_name" parser_action="quote_string" type="string">total_number_of_households</argument>
            <argument name="reset_dataset_attribute_value" type="string">{'building_id':-1, 'submarket_id':-1}</argument>
          </run>
        </structure>
      </model>
      <model name="emp_transition_model" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module>urbansim.models.transition_model</class_module>
            <class_name>TransitionModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">TransitionModel</name>
            <argument model_dependency_type="dataset" name="dataset" type="string">job</argument>
            <argument convert_blank_to_none="True" model_dependency_type="variable" name="dataset_accounting_attribute" parser_action="quote_string" type="string">None</argument>
            <argument name="model_name" parser_action="quote_string" type="string">Emp Transition Model</argument>
            <argument name="model_short_name" parser_action="quote_string" type="string">JTM</argument>
          </init>
          <prepare_for_run type="dictionary">
            <name name="name" type="string">prepare_for_run</name>
            <argument model_dependency_type="table" name="control_total_table" parser_action="quote_string" type="string">annual_employment_control_totals</argument>
            <argument name="control_total_storage" type="string">base_cache_storage</argument>
          </prepare_for_run>
          <run type="dictionary">
            <argument name="year" type="string">year</argument>
            <argument model_dependency_type="variable" name="target_attribute_name" parser_action="quote_string" type="string">number_of_jobs</argument>
            <argument name="reset_dataset_attribute_value" type="string">{'building_id':-1}</argument>
          </run>
        </structure>
      </model>
      <model name="employment_location_choice_model" type="model">
        <dependencies type="list">['employment_relocation_model']</dependencies>
        <estimation_config name="Estimation Configuration" parser_action="skip">
          <config_override config_name="models" name="Models to run before estimation" type="list">[]</config_override>
        </estimation_config>
        <structure type="dictionary">
          <group_by_attribute type="list">('home_based_status', 'name')</group_by_attribute>
          <import hidden="True" name="import" type="dictionary">
            <class_module type="string">urbansim.models.employment_location_choice_model</class_module>
            <class_name>EmploymentLocationChoiceModel</class_name>
          </import>
          <init type="dictionary">
            <argument name="agents_grouping_attribute" parser_action="quote_string" type="string">job.home_based_status</argument>
            <argument convert_blank_to_none="True" name="location_id_string" parser_action="quote_string" type="string">mrcog.job.employment_submarket_id</argument>
            <argument model_dependency_type="variable" name="number_of_units_string" parser_action="quote_string" type="string">total_SSS_job_space</argument>
            <argument name="compute_capacity_flag" type="boolean">True</argument>
            <argument model_dependency_type="variable" name="capacity_string" parser_action="quote_string" type="string">vacant_SSS_job_space</argument>
            <argument model_dependency_type="variable" name="estimation_weight_string" parser_action="quote_string" type="string">vacant_SSS_job_space</argument>
            <argument hidden="True" name="dataset_pool" type="string">dataset_pool</argument>
            <argument name="choices" parser_action="quote_string" type="string">urbansim.lottery_choices</argument>
            <argument convert_blank_to_none="True" model_dependency_type="variable" name="filter" parser_action="quote_string" type="string"></argument>
            <argument name="variable_package" parser_action="quote_string" type="string">mrcog</argument>
            <argument name="run_config" type="dictionary">
              <key name="lottery_max_iterations" type="integer">5</key>
              <key name="accept_unavailability_of_choices" type="boolean">True</key>
              <key convert_blank_to_none="True" model_dependency_type="variable" name="agent_units_string" type="string"></key>
            </argument>
            <argument model_dependency_type="dataset" name="location_set" type="string">employment_submarket</argument>
            <argument name="estimation_size_agents" type="float">.1</argument>
            <argument name="sampler" parser_action="quote_string" type="string">opus_core.samplers.weighted_sampler</argument>
            <argument convert_blank_to_none="True" name="simulation_weight_string" parser_action="quote_string" type="string">vacant_SSS_job_space</argument>
            <argument name="estimation" parser_action="quote_string" type="string">opus_core.bhhh_mnl_estimation</argument>
            <argument name="sample_size_locations" type="integer">50</argument>
            <name hidden="True" name="name" type="string">EmploymentLocationChoiceModel</name>
          </init>
          <prepare_for_run type="dictionary">
            <output hidden="True" name="output" type="string">(specification, coefficients)</output>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument model_dependency_type="table" name="coefficients_table" parser_action="quote_string" type="string">employment_location_choice_model_coefficients</argument>
            <argument model_dependency_type="table" name="specification_table" parser_action="quote_string" type="string">employment_location_choice_model_specification</argument>
            <name hidden="True" name="name" type="string">prepare_for_run</name>
          </prepare_for_run>
          <run type="dictionary">
            <argument name="chunk_specification" type="string">{'records_per_chunk':25000}</argument>
            <argument model_dependency_type="dataset" name="agent_set" type="string">job</argument>
            <argument hidden="True" name="specification" type="string">specification</argument>
            <argument name="maximum_runs" type="integer">5</argument>
            <argument hidden="True" name="agents_index" type="string">erm_index</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument hidden="True" name="debuglevel" type="string">debuglevel</argument>
            <argument name="coefficients" type="string">coefficients</argument>
          </run>
          <prepare_for_estimate type="dictionary">
            <output hidden="True" name="output" type="string">(specification, index)</output>
            <argument name="portion_to_unplace" type="integer">0</argument>
            <argument model_dependency_type="table" name="specification_table" parser_action="quote_string" type="string">employment_location_choice_model_specification</argument>
            <argument model_dependency_type="dataset" name="agent_set" type="string">job</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument convert_blank_to_none="True" model_dependency_type="variable" name="filter" parser_action="quote_string" type="string"></argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument convert_blank_to_none="True" model_dependency_type="table" name="agents_for_estimation_table" parser_action="quote_string" type="string">jobs</argument>
            <argument convert_blank_to_none="True" name="agents_for_estimation_storage" type="string">base_cache_storage</argument>
            <argument name="join_datasets" type="boolean">False</argument>
            <name hidden="True" name="name" type="string">prepare_for_estimate</name>
          </prepare_for_estimate>
          <estimate type="dictionary">
            <output hidden="True" name="output" type="string">(coefficients, _)</output>
            <argument hidden="True" name="specification" type="string">specification</argument>
            <argument model_dependency_type="dataset" name="agent_set" type="string">job</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument hidden="True" name="agents_index" type="string">index</argument>
            <argument hidden="True" name="debuglevel" type="string">debuglevel</argument>
          </estimate>
        </structure>
        <specification type="dictionary">
          <submodel_group name="home_based" type="submodel_group">
            <submodel hidden="Children" name="submodel" submodel_id="-2" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list">
                <variable_spec name="employment_submarket.ln_residential_units_esubmarket"></variable_spec>
              </variable_list>
            </submodel>
          </submodel_group>
          <submodel_group name="non_home_based" type="submodel_group">
            <submodel hidden="Children" name="submodel" submodel_id="-2" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list"></variable_list>
            </submodel>
            <submodel hidden="Children" name="Agriculture" submodel_id="11" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list">
                <variable_spec name="employment_submarket.households_in_zone_esubmarket"></variable_spec>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="MiningConstruction" submodel_id="21" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list">
                <variable_spec name="employment_submarket.households_in_zone_esubmarket"></variable_spec>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="Manufacturing" submodel_id="22" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list">
                <variable_spec name="employment_submarket.households_in_zone_esubmarket"></variable_spec>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="Transport" submodel_id="23" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list">
                <variable_spec name="employment_submarket.households_in_zone_esubmarket"></variable_spec>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="Information" submodel_id="31" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list">
                <variable_spec name="employment_submarket.households_in_zone_esubmarket"></variable_spec>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="Utilities" submodel_id="32" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list">
                <variable_spec name="employment_submarket.households_in_zone_esubmarket"></variable_spec>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="Wholesale" submodel_id="33" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list">
                <variable_spec name="employment_submarket.households_in_zone_esubmarket"></variable_spec>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="Retail" submodel_id="42" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list">
                <variable_spec name="employment_submarket.households_in_zone_esubmarket"></variable_spec>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="FinanceInsurance" submodel_id="44" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list">
                <variable_spec name="employment_submarket.households_in_zone_esubmarket"></variable_spec>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="RealEstate" submodel_id="45" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list">
                <variable_spec name="employment_submarket.households_in_zone_esubmarket"></variable_spec>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="ProfessionalServices" submodel_id="48" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list">
                <variable_spec name="employment_submarket.households_in_zone_esubmarket"></variable_spec>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="BusinessServices" submodel_id="49" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list">
                <variable_spec name="employment_submarket.households_in_zone_esubmarket"></variable_spec>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="EducationalServices" submodel_id="51" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list">
                <variable_spec name="employment_submarket.households_in_zone_esubmarket"></variable_spec>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="HealthServices" submodel_id="52" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list">
                <variable_spec name="employment_submarket.households_in_zone_esubmarket"></variable_spec>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="ArtsEntertainment" submodel_id="53" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list">
                <variable_spec name="employment_submarket.households_in_zone_esubmarket"></variable_spec>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="EatingDrinking" submodel_id="54" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list">
                <variable_spec name="employment_submarket.households_in_zone_esubmarket"></variable_spec>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="OtherServices" submodel_id="55" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list">
                <variable_spec name="employment_submarket.households_in_zone_esubmarket"></variable_spec>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="Government" submodel_id="56" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list">
                <variable_spec name="employment_submarket.households_in_zone_esubmarket"></variable_spec>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="Government" submodel_id="61" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list">
                <variable_spec name="employment_submarket.households_in_zone_esubmarket"></variable_spec>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="Government" submodel_id="62" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list">
                <variable_spec name="employment_submarket.households_in_zone_esubmarket"></variable_spec>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="Government" submodel_id="71" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list">
                <variable_spec name="employment_submarket.households_in_zone_esubmarket"></variable_spec>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="Government" submodel_id="81" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list">
                <variable_spec name="employment_submarket.households_in_zone_esubmarket"></variable_spec>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="Government" submodel_id="92" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list">
                <variable_spec name="employment_submarket.households_in_zone_esubmarket"></variable_spec>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="Government" submodel_id="99" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list">
                <variable_spec name="employment_submarket.households_in_zone_esubmarket"></variable_spec>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="Government" submodel_id="721" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list">
                <variable_spec name="employment_submarket.households_in_zone_esubmarket"></variable_spec>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="Government" submodel_id="722" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list">
                <variable_spec name="employment_submarket.households_in_zone_esubmarket"></variable_spec>
              </variable_list>
            </submodel>
          </submodel_group>
        </specification>
      </model>
      <model name="household_allocation_to_building_model" type="model">
        <dependencies type="list">['household_relocation_model']</dependencies>
        <structure type="dictionary">
          <estimate type="dictionary">
            <output hidden="True" name="output" type="string">(coefficients, _)</output>
            <argument name="agent_set" type="string">household</argument>
            <argument hidden="True" name="agents_index" type="string">_index</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument hidden="True" name="debuglevel" type="string">debuglevel</argument>
            <argument hidden="True" name="specification" type="string">_specification</argument>
          </estimate>
          <import hidden="True" name="import" type="dictionary">
            <class_module type="string">mrcog.models.household_location_choice_model_by_submarkets</class_module>
            <class_name>HouseholdLocationChoiceModelBySubmarkets</class_name>
          </import>
          <init type="dictionary">
            <name hidden="True" name="name" type="string">HouseholdLocationChoiceModelBySubmarkets</name>
            <argument name="sampler" parser_action="quote_string" type="string">opus_core.samplers.weighted_sampler</argument>
            <argument name="choices" parser_action="quote_string" type="string">urbansim.lottery_choices</argument>
            <argument name="estimation" parser_action="quote_string" type="string">opus_core.bhhh_wesml_mnl_estimation</argument>
            <argument hidden="True" name="dataset_pool" type="string">dataset_pool</argument>
            <argument model_dependency_type="dataset" name="location_set" type="string">building</argument>
            <argument name="sample_size_locations" type="integer">30</argument>
            <argument model_dependency_type="variable" name="capacity_string" parser_action="quote_string" type="string">clip_to_zero(building.residential_units - building.number_of_agents(household))</argument>
            <argument model_dependency_type="variable" name="estimation_weight_string" parser_action="quote_string" type="string">building.residential_units</argument>
            <argument convert_blank_to_none="True" model_dependency_type="variable" name="number_of_units_string" parser_action="quote_string" type="string"></argument>
            <argument convert_blank_to_none="True" model_dependency_type="variable" name="number_of_agents_string" parser_action="quote_string" type="string"></argument>
            <argument name="location_id_string" parser_action="quote_string" type="string">building_id</argument>
            <argument model_dependency_type="variable" name="submodel_string" parser_action="quote_string" type="string"></argument>
            <argument name="estimation_size_agents" type="float">0.5</argument>
            <argument model_dependency_type="variable" name="filter" parser_action="quote_string" type="string">building.residential_units&gt;0</argument>
            <argument name="run_config" type="string">Resources({'lottery_max_iterations': 7,"accept_unavailability_of_choices":True})</argument>
            <argument name="estimate_config" type="string">Resources({'wesml_sampling_correction_variable':'psrc_parcel.building.wesml_sampling_correction_variable'})</argument>
            <argument name="variable_package" parser_action="quote_string" type="string">urbansim_parcel</argument>
          </init>
          <prepare_for_estimate type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_estimate</name>
            <output hidden="True" name="output" type="string">(_specification, _index)</output>
            <argument model_dependency_type="dataset" name="agent_set" type="string">household</argument>
            <argument convert_blank_to_none="True" name="agents_for_estimation_storage" type="string">base_cache_storage</argument>
            <argument convert_blank_to_none="True" model_dependency_type="table" name="agents_for_estimation_table" parser_action="quote_string" type="string">households</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument name="index_to_unplace" type="string">None</argument>
            <argument name="join_datasets" type="boolean">False</argument>
            <argument name="portion_to_unplace" type="string">.1</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument model_dependency_type="table" name="specification_table" parser_action="quote_string" type="string">household_allocation_to_building_model_specification</argument>
            <argument convert_blank_to_none="True" model_dependency_type="variable" name="filter" parser_action="quote_string" type="string">numpy.logical_and(household.building_id&gt;0, household.disaggregate(building.residential_units&gt;0))</argument>
          </prepare_for_estimate>
          <prepare_for_run type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_run</name>
            <output hidden="True" name="output" type="string">(_specification, _coefficients)</output>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument model_dependency_type="table" name="coefficients_table" parser_action="quote_string" type="string">household_allocation_to_building_model_coefficients</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument model_dependency_type="table" name="specification_table" parser_action="quote_string" type="string">household_allocation_to_building_model_specification</argument>
          </prepare_for_run>
          <run type="dictionary">
            <argument model_dependency_type="dataset" name="agent_set" type="string">household</argument>
            <argument hidden="True" name="agents_index" type="string">hrm_index</argument>
            <argument name="chunk_specification" type="string">None</argument>
            <argument hidden="True" name="coefficients" type="string">_coefficients</argument>
            <argument hidden="True" name="data_objects" type="string">datasets</argument>
            <argument hidden="True" name="debuglevel" type="string">debuglevel</argument>
            <argument hidden="True" name="specification" type="string">_specification</argument>
            <argument name="maximum_runs" type="integer">10</argument>
          </run>
        </structure>
        <specification type="dictionary">
          <submodel hidden="Children" name="submodel" submodel_id="-2" type="submodel">
            <description type="string">No submodel</description>
            <variable_list type="variable_list">
              <variable_spec name="building.building_improvement_value"></variable_spec>
            </variable_list>
          </submodel>
        </specification>
      </model>
      <model name="job_allocation_to_building_model" type="model">
        <dependencies type="list">['employment_relocation_model']</dependencies>
        <structure type="dictionary">
          <estimate type="dictionary">
            <output hidden="True" name="output" type="string">(coefficients, _)</output>
            <argument name="agent_set" type="string">job</argument>
            <argument hidden="True" name="agents_index" type="string">_index</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument hidden="True" name="debuglevel" type="string">debuglevel</argument>
            <argument hidden="True" name="specification" type="string">_specification</argument>
          </estimate>
          <import hidden="True" name="import" type="dictionary">
            <class_module type="string">mrcog.models.job_location_choice_model_by_submarkets</class_module>
            <class_name>JobLocationChoiceModelBySubmarkets</class_name>
          </import>
          <init type="dictionary">
            <name hidden="True" name="name" type="string">JobLocationChoiceModelBySubmarkets</name>
            <argument name="sampler" parser_action="quote_string" type="string">opus_core.samplers.weighted_sampler</argument>
            <argument name="choices" parser_action="quote_string" type="string">urbansim.lottery_choices</argument>
            <argument name="estimation" parser_action="quote_string" type="string">opus_core.bhhh_wesml_mnl_estimation</argument>
            <argument hidden="True" name="dataset_pool" type="string">dataset_pool</argument>
            <argument model_dependency_type="dataset" name="location_set" type="string">building</argument>
            <argument name="sample_size_locations" type="integer">30</argument>
            <argument model_dependency_type="variable" name="capacity_string" parser_action="quote_string" type="string">clip_to_zero((building.non_residential_sqft/250) - building.number_of_agents(job))</argument>
            <argument model_dependency_type="variable" name="estimation_weight_string" parser_action="quote_string" type="string">building.non_residential_sqft</argument>
            <argument convert_blank_to_none="True" model_dependency_type="variable" name="number_of_units_string" parser_action="quote_string" type="string"></argument>
            <argument convert_blank_to_none="True" model_dependency_type="variable" name="number_of_agents_string" parser_action="quote_string" type="string"></argument>
            <argument name="location_id_string" parser_action="quote_string" type="string">building_id</argument>
            <argument model_dependency_type="variable" name="submodel_string" parser_action="quote_string" type="string"></argument>
            <argument name="estimation_size_agents" type="float">0.5</argument>
            <argument model_dependency_type="variable" name="filter" parser_action="quote_string" type="string">building.non_residential_sqft&gt;0</argument>
            <argument name="run_config" type="string">Resources({'lottery_max_iterations': 7,"accept_unavailability_of_choices":True})</argument>
            <argument name="estimate_config" type="string">Resources({'wesml_sampling_correction_variable':'psrc_parcel.building.wesml_sampling_correction_variable'})</argument>
            <argument name="variable_package" parser_action="quote_string" type="string">urbansim_parcel</argument>
          </init>
          <prepare_for_estimate type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_estimate</name>
            <output hidden="True" name="output" type="string">(_specification, _index)</output>
            <argument model_dependency_type="dataset" name="agent_set" type="string">job</argument>
            <argument convert_blank_to_none="True" name="agents_for_estimation_storage" type="string">base_cache_storage</argument>
            <argument convert_blank_to_none="True" model_dependency_type="table" name="agents_for_estimation_table" parser_action="quote_string" type="string">jobs</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument name="index_to_unplace" type="string">None</argument>
            <argument name="join_datasets" type="boolean">False</argument>
            <argument name="portion_to_unplace" type="string">.1</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument model_dependency_type="table" name="specification_table" parser_action="quote_string" type="string">job_allocation_to_building_model_specification</argument>
            <argument convert_blank_to_none="True" model_dependency_type="variable" name="filter" parser_action="quote_string" type="string">numpy.logical_and(job.building_id&gt;0, job.disaggregate(building.non_residential_sqft&gt;0))</argument>
          </prepare_for_estimate>
          <prepare_for_run type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_run</name>
            <output hidden="True" name="output" type="string">(_specification, _coefficients)</output>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument model_dependency_type="table" name="coefficients_table" parser_action="quote_string" type="string">job_allocation_to_building_model_coefficients</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument model_dependency_type="table" name="specification_table" parser_action="quote_string" type="string">job_allocation_to_building_model_specification</argument>
          </prepare_for_run>
          <run type="dictionary">
            <argument model_dependency_type="dataset" name="agent_set" type="string">job</argument>
            <argument hidden="True" name="agents_index" type="string">erm_index</argument>
            <argument name="chunk_specification" type="string">None</argument>
            <argument hidden="True" name="coefficients" type="string">_coefficients</argument>
            <argument hidden="True" name="data_objects" type="string">datasets</argument>
            <argument hidden="True" name="debuglevel" type="string">debuglevel</argument>
            <argument hidden="True" name="specification" type="string">_specification</argument>
            <argument name="maximum_runs" type="integer">10</argument>
          </run>
        </structure>
        <specification type="dictionary">
          <submodel hidden="Children" name="submodel" submodel_id="-2" type="submodel">
            <description type="string">No submodel</description>
            <variable_list type="variable_list">
              <variable_spec name="building.building_improvement_value"></variable_spec>
            </variable_list>
          </submodel>
        </specification>
      </model>
    </models>
    <templates hidden="True" name="Model Templates" parser_action="skip"></templates>
    <estimation_config config_name="estimation_config" name="Estimation Configuration" type="configuration">
      <datasets_to_preload parser_action="list_to_dictionary" type="selectable_list">
        <selectable name="building" type="selectable">True</selectable>
        <selectable name="household" type="selectable">True</selectable>
        <selectable name="job" type="selectable">False</selectable>
        <selectable name="parcel" type="selectable">True</selectable>
        <selectable name="submarket" type="selectable">True</selectable>
        <selectable name="node" type="selectable">False</selectable>
        <selectable name="residential_building_type" type="selectable">False</selectable>
      </datasets_to_preload>
      <save_estimation_results type="boolean">True</save_estimation_results>
      <cache_directory field_description="Directory for base_year cache, relative to OPUS_DATA_PATH or OPUS_HOME/data, e.g. seattle_parcel/base_year_data" field_identifier="Cache Directory" parser_action="prefix_with_opus_data_path" type="directory">mrcog/base_year_data</cache_directory>
      <estimation_database_configuration type="class">
        <class_name hidden="True" type="string">EstimationDatabaseConfiguration</class_name>
        <class_module hidden="True" type="string">opus_core.database_management.configurations.estimation_database_configuration</class_module>
        <argument name="database_name" type="string">seattle_2010_parcel_baseyear_data</argument>
      </estimation_database_configuration>
      <dataset_pool_configuration type="class">
        <class_name hidden="True" type="string">DatasetPoolConfiguration</class_name>
        <class_module hidden="True" type="string">opus_core.configurations.dataset_pool_configuration</class_module>
        <argument name="package_order" type="list">['mrcog','urbansim_parcel', 'urbansim', 'opus_core']</argument>
      </dataset_pool_configuration>
      <datasets_to_cache_after_each_model type="list">[]</datasets_to_cache_after_each_model>
      <low_memory_mode type="boolean">False</low_memory_mode>
      <base_year field_identifier="Base Year" type="integer">2010</base_year>
      <years type="tuple">
        <firstyear field_identifier="Base Year" type="integer">2010</firstyear>
        <lastyear field_identifier="Base Year" type="integer">2010</lastyear>
      </years>
    </estimation_config>
    <travel_model_configuration type="dictionary">
      <transcad_binary type="string">C:\\Program Files (x86)\\TransCAD\\tcw.exe</transcad_binary>
      <scenario_directory type="string">C:\\TravelModel\\2007test11</scenario_directory>
      <generic_directory type="string">C:\\TravelModel\\generic</generic_directory>
      <ui_file type="string">C:\\TravelModel\\generic\\scripts\\batchrun</ui_file>
      <urbansim_to_tm_variable_mapping type="dictionary">
        <DataTable type="string">yYYYYtazdata</DataTable>
        <JoinField type="string">TAZ</JoinField>
        <variable_mapping type="list">[('1.0*zone.zone_id', 'TAZ'),('1.0*zone.aggregate((household.persons_total),intermediates=[building,parcel]) + zone.gqpop2010', 'POP'),('1.0*zone.gqpop2010', 'GQ'),('1.0*zone.aggregate(building.hotel_units,intermediates=[parcel])', 'HR'),('1.0*zone.aggregate(building.resort_units,intermediates=[parcel])', 'RC'),('1.0*zone.aggregate(building.residential_units*(building.building_type_id&lt;4),intermediates=[parcel])', 'HU'),('1.0*zone.aggregate((household.persons==1),intermediates=[building,parcel])', 'HH1'),('1.0*zone.aggregate((household.persons==2),intermediates=[building,parcel])', 'HH2'),('1.0*zone.aggregate((household.persons==3),intermediates=[building,parcel])', 'HH3'),('1.0*zone.aggregate((household.persons==4),intermediates=[building,parcel])', 'HH4'),('1.0*zone.aggregate((household.persons&gt;4),intermediates=[building,parcel])', 'HH5'),('1.0*zone.military_jobs', 'MILI'),('1.0*zone.aggregate(building.aggregate(job.sector_id==18),intermediates=[parcel])', 'GOVT'),('1.0*numpy.ceil(.4160*zone.aggregate(building.resort_units+building.hotel_units,intermediates=[parcel]))', 'HOTEL'),('1.0*zone.aggregate(building.aggregate(job.sector_id==1),intermediates=[parcel])', 'AG'),('1.0*zone.aggregate(building.aggregate(numpy.in1d(job.sector_id, [3,7,8])),intermediates=[parcel])', 'TCU'),('1.0*zone.aggregate(building.aggregate(numpy.in1d(job.sector_id, [4,5])),intermediates=[parcel])', 'INDUS'),('1.0*zone.aggregate(building.aggregate(numpy.in1d(job.sector_id, [9,10])),intermediates=[parcel])', 'FIRE'),('1.0*zone.aggregate(building.aggregate(numpy.in1d(job.sector_id, [11,12,13,14,15,16,17])),intermediates=[parcel])', 'SERV'),('1.0*zone.aggregate(building.aggregate(job.sector_id==6),intermediates=[parcel])', 'RETAIL'),('1.0*zone.aggregate(building.aggregate(job.sector_id==2),intermediates=[parcel])', 'CSTR'),('1.0*zone.aggregate(building.number_of_agents(job),intermediates=[parcel]) + numpy.ceil(.4160*zone.aggregate(building.resort_units+building.hotel_units,intermediates=[parcel])) + zone.military_jobs', 'TOTALEMP'),('1.0*zone.aggregate(building.number_of_agents(household),intermediates=[parcel])', 'TOTALHH'),('1.0*zone.termtype', 'TERMTYPE'),('1.0*zone.termtime', 'TERMTIME'),('1.0*zone.wk_pkcost', 'WK_PKCOST'),('1.0*zone.nw_pkcost', 'NW_PKCOST'),('1.0*zone.percwlk', 'PERCWLK'),('1.0*zone.prv_univ_enroll', 'PRV_UNIV_ENROLL'),('1.0*zone.pub_univ_enroll', 'PUB_UNIV_ENROLL'),('1.0*zone.prv_k12_enroll', 'PRV_K12_ENROLL'),('1.0*zone.pub_k12_enroll', 'PUB_K12_ENROLL'),('1.0*zone.schools', 'SCHOOLS'),('1.0*zone.gqwrk', 'GQWRK'),('1.0*zone.nonvisret', 'NONVISRET'),('1.0*zone.visprcauto', 'VISPRCAUTO'),('1.0*zone.visprctour', 'VISPRCTOUR'),('1.0*zone.mili_base', 'MILI_BASE')]</variable_mapping>
      </urbansim_to_tm_variable_mapping>
      <tm_to_urbansim_variable_mapping type="dictionary">
        <row_index_name type="string">ZoneID</row_index_name>
        <col_index_name type="string">ZoneID</col_index_name>
        <matrix name="AMHwySkims" type="dictionary">
          <variable name="hwyam_sov" type="string">am_single_vehicle_to_work_travel_time</variable>
        </matrix>
      </tm_to_urbansim_variable_mapping>
      <macro type="dictionary">
        <get_cache_data_into_transcad type="string">ImportxlsFile</get_cache_data_into_transcad>
        <get_transcad_data_into_cache type="string">ExportMatrices</get_transcad_data_into_cache>
        <run_transcad_travel_model type="string">BatchRun</run_transcad_travel_model>
      </macro>
      <locations_to_disaggregate type="list">['parcel', 'building']</locations_to_disaggregate>
      <models type="selectable_list">
        <selectable name="mrcog.transcad.get_cache_data_into_transcad" type="selectable">False</selectable>
        <selectable name="mrcog.transcad.run_transcad_travel_model" type="selectable">False</selectable>
        <selectable name="mrcog.transcad.run_transcad_travel_model_self_setup" type="selectable">True</selectable>
        <selectable name="mrcog.transcad.get_transcad_data_into_cache" type="selectable">False</selectable>
      </models>
    </travel_model_configuration>
    <!--<travel_model_configuration type="dictionary">
      <transcad_binary type="string">C:\\Program Files (x86)\\TransCAD\\tcw.exe</transcad_binary>
      <scenario_directory type="string">C:\\projects\\ompo\\Conversion\\Application\\2007_100709</scenario_directory>
      <generic_directory type="string">C:\\projects\\ompo\\Conversion\\Application\\generic</generic_directory>
      <ui_file type="string">C:\\projects\\ompo\\Conversion\\Application\\2007_100709\\scripts\ompo5</ui_file>
      <urbansim_to_tm_variable_mapping type="dictionary">
        <DataTable type="string">TAZ Data Table</DataTable>
        <JoinField type="string">ZoneID</JoinField>
        <variable_mapping type="dictionary">
          <variable name="zone.zone_id" type="string">ZoneID</variable>
          <variable name="urbansim_parcel.zone.zone_id&lt;100" type="string">dummy</variable>
        </variable_mapping>
      </urbansim_to_tm_variable_mapping>
      <tm_to_urbansim_variable_mapping type="dictionary">
        <row_index_name type="string">ZoneID</row_index_name>
        <col_index_name type="string">ZoneID</col_index_name>
        <matrix name="AMHwySkims" type="dictionary">
          <variable name="Miles" type="string">highway_distance</variable>
          <variable name="Trav_Time" type="string">highway_travel_time</variable>
        </matrix>
        <matrix name="AMTransitSkim" type="dictionary">
          <variable name="Generalized Cost" type="string">generalized_cost</variable>
        </matrix>
      </tm_to_urbansim_variable_mapping>
      <macro type="dictionary">
        <get_cache_data_into_transcad type="string">ImportxlsFile</get_cache_data_into_transcad>
        <get_transcad_data_into_cache type="string">ExportMatrices</get_transcad_data_into_cache>
        <run_transcad_travel_model type="string">BatchRun</run_transcad_travel_model>
      </macro>
      <locations_to_disaggregate type="list">['parcel', 'building']</locations_to_disaggregate>
      <models type="selectable_list">
        <selectable name="honolulu_parcel.transcad.get_cache_data_into_transcad" type="selectable">False</selectable>
        <selectable name="honolulu_parcel.transcad.run_transcad_travel_model" type="selectable">True</selectable>
        <selectable name="opus_transcad.models.get_transcad_data_into_cache" type="selectable">True</selectable>
      </models>
    </travel_model_configuration>-->
  </model_manager>
  <scenario_manager>
    <scenario executable="True" name="Baseline" type="scenario">
      <parent type="scenario_name">urbansim_parcel_baseline</parent>
      <base_year type="integer">2010</base_year>
      <years_to_run config_name="years" type="tuple">
        <firstyear type="integer">2011</firstyear>
        <lastyear type="integer">2012</lastyear>
      </years_to_run>
      <models_to_run config_name="models" type="selectable_list">
        <selectable name="residential_price_model_1" return_value="residential_price_model" type="selectable">True</selectable>
        <selectable name="non_residential_price_model_1" return_value="non_residential_price_model" type="selectable">True</selectable>
        <selectable name="household_transition_model_with_persons_1" return_value="household_transition_model_with_persons" type="selectable">True</selectable>
        <selectable name="household_relocation_model_1" return_value="household_relocation_model" type="selectable">True</selectable>
        <selectable name="submarket_household_location_choice_model_1" return_value="submarket_household_location_choice_model" type="selectable">True</selectable>
        <selectable name="household_fast_allocation_to_building_model_1" return_value="household_fast_allocation_to_building_model" type="selectable">True</selectable>
        <selectable name="emp_transition_model_1" return_value="emp_transition_model" type="selectable">True</selectable>
        <selectable name="employment_relocation_model_1" return_value="employment_relocation_model" type="selectable">True</selectable>
        <selectable name="employment_location_choice_model" type="model_choice">True<group_members type="string">_all_</group_members>
        </selectable>
        <selectable name="job_allocation_to_building_model_1" return_value="job_allocation_to_building_model" type="selectable">True</selectable>
        <selectable name="mrcog_building_transition_model_1" return_value="mrcog_building_transition_model" type="selectable">True</selectable>
        <selectable name="sf_building_location_choice_model_1" return_value="sf_building_location_choice_model" type="selectable">True</selectable>
        <selectable name="mf_building_location_choice_model_1" return_value="mf_building_location_choice_model" type="selectable">True</selectable>
        <selectable name="commercial_building_location_choice_model_1" return_value="commercial_building_location_choice_model" type="selectable">True</selectable>
      </models_to_run>
      <cache_directory parser_action="prefix_with_opus_data_path" type="directory">mrcog/base_year_data</cache_directory>
      <creating_baseyear_cache_configuration type="class">
        <class_name hidden="True" type="string">CreatingBaseyearCacheConfiguration</class_name>
        <class_module hidden="True" type="string">urbansim.configurations.creating_baseyear_cache_configuration</class_module>
        <argument config_name="cache_directory_root" name="scenario_runs_directory" parser_action="prefix_with_opus_data_path" type="directory">mrcog/runs</argument>
        <argument name="baseyear_cache" type="class">
          <class_name hidden="True" type="string">BaseyearCacheConfiguration</class_name>
          <class_module hidden="True" type="string">opus_core.configurations.baseyear_cache_configuration</class_module>
          <argument name="existing_cache_to_copy" parser_action="prefix_with_opus_data_path" type="directory">mrcog/base_year_data</argument>
        </argument>
        <argument hidden="True" name="unroll_gridcells" type="boolean">False</argument>
        <argument name="advanced" type="category">
          <baseyear_database_configuration config_name="scenario_database_configuration" type="class">
            <class_name hidden="True" type="string">ScenarioDatabaseConfiguration</class_name>
            <class_module hidden="True" type="string">opus_core.database_management.configurations.scenario_database_configuration</class_module>
            <argument name="database_name" type="string">seattle_2010_parcel_baseyear_data</argument>
          </baseyear_database_configuration>
          <cache_from_database type="boolean">False</cache_from_database>
          <cache_scenario_database type="string">urbansim.model_coordinators.cache_scenario_database</cache_scenario_database>
          <tables_to_cache type="selectable_list">
            <selectable name="annual_employment_control_totals" type="selectable">False</selectable>
            <selectable name="annual_household_control_totals" type="selectable">False</selectable>
            <selectable name="annual_relocation_rates_for_households" type="selectable">False</selectable>
            <selectable name="annual_relocation_rates_for_jobs" type="selectable">False</selectable>
            <selectable name="building_sqft_per_job" type="selectable">False</selectable>
            <selectable name="building_types" type="selectable">True</selectable>
            <selectable name="buildings" type="selectable">True</selectable>
            <selectable name="cities" type="selectable">False</selectable>
            <selectable name="constant_taz_columns" type="selectable">False</selectable>
            <selectable name="counties" type="selectable">False</selectable>
            <selectable name="demolition_cost_per_sqft" type="selectable">False</selectable>
            <selectable name="development_constraints" type="selectable">False</selectable>
            <selectable name="development_template_components" type="selectable">False</selectable>
            <selectable name="development_templates" type="selectable">False</selectable>
            <selectable name="employment_adhoc_sector_group_definitions" type="selectable">False</selectable>
            <selectable name="employment_adhoc_sector_groups" type="selectable">False</selectable>
            <selectable name="employment_sectors" type="selectable">False</selectable>
            <selectable name="fazes" type="selectable">False</selectable>
            <selectable name="generic_land_use_types" type="selectable">False</selectable>
            <selectable name="gridcells" type="selectable">False</selectable>
            <selectable name="home_based_employment_location_choice_model_coefficients" type="selectable">False</selectable>
            <selectable name="home_based_employment_location_choice_model_specification" type="selectable">False</selectable>
            <selectable name="household_characteristics_for_ht" type="selectable">False</selectable>
            <selectable name="household_location_choice_model_coefficients" type="selectable">False</selectable>
            <selectable name="household_location_choice_model_specification" type="selectable">False</selectable>
            <selectable name="households" type="selectable">True</selectable>
            <selectable name="households_for_estimation" type="selectable">False</selectable>
            <selectable name="job_building_types" type="selectable">False</selectable>
            <selectable name="jobs" type="selectable">True</selectable>
            <selectable name="jobs_for_estimation" type="selectable">False</selectable>
            <selectable name="land_use_types" type="selectable">False</selectable>
            <selectable name="non_home_based_employment_location_choice_model_coefficients" type="selectable">False</selectable>
            <selectable name="non_home_based_employment_location_choice_model_specification" type="selectable">False</selectable>
            <selectable name="parcels" type="selectable">True</selectable>
            <selectable name="persons" type="selectable">False</selectable>
            <selectable name="real_estate_price_model_coefficients" type="selectable">False</selectable>
            <selectable name="real_estate_price_model_specification" type="selectable">False</selectable>
            <selectable name="target_vacancies" type="selectable">True</selectable>
            <selectable name="urbansim_constants" type="selectable">False</selectable>
            <selectable name="zones" type="selectable">False</selectable>
            <selectable name="residential_building_types" type="selectable">True</selectable>
          </tables_to_cache>
          <tables_to_cache_nchunks type="dictionary">
            <parcels type="integer">1</parcels>
          </tables_to_cache_nchunks>
        </argument>
      </creating_baseyear_cache_configuration>
      <advanced type="category">
        <dataset_pool_configuration type="class">
          <class_name hidden="True" type="string">DatasetPoolConfiguration</class_name>
          <class_module hidden="True" type="string">opus_core.configurations.dataset_pool_configuration</class_module>
          <argument name="package_order" type="list">[ 'mrcog','urbansim_parcel','urbansim', 'opus_core']</argument>
        </dataset_pool_configuration>
        <flush_dataset_to_cache_after_each_model type="boolean">False</flush_dataset_to_cache_after_each_model>
        <flush_variables type="boolean">False</flush_variables>
        <low_memory_run type="boolean">False</low_memory_run>
        <datasets_to_cache_after_each_model type="list">['parcel', 'building', 'household']</datasets_to_cache_after_each_model>
        <unroll_gridcells hidden="True" type="boolean">False</unroll_gridcells>
        <datasets_to_preload parser_action="list_to_dictionary" type="selectable_list">
          <selectable name="zone" type="selectable">False</selectable>
          <selectable name="household" type="selectable">True</selectable>
          <selectable name="building" type="selectable">True</selectable>
          <selectable name="building_type" type="selectable">True</selectable>
          <selectable name="parcel" type="selectable">True<package_name type="string">urbansim_parcel</package_name>
          </selectable>
          <selectable name="person" type="selectable">False<package_name type="string">urbansim_parcel</package_name>
          </selectable>
          <selectable name="development_template" type="selectable">False<package_name type="string">urbansim_parcel</package_name>
          </selectable>
          <selectable name="development_template_component" type="selectable">False<package_name type="string">urbansim_parcel</package_name>
          </selectable>
          <selectable name="establishment" type="selectable">False</selectable>
          <selectable name="building_type" type="selectable">False<package_name type="string">urbansim_parcel</package_name>
          </selectable>
          <selectable name="submarket" type="selectable">True</selectable>
          <selectable name="development_event_history" type="selectable">False</selectable>
          <selectable name="target_vacancy" type="selectable">False</selectable>
          <selectable name="residential_building_type" type="selectable">False</selectable>
        </datasets_to_preload>
      </advanced>
    </scenario>
  </scenario_manager>
  <results_manager>
    <indicator_batches name="Indicator Batches" setexpanded="True" type="group">
      <indicator_batch name="county">
        <batch_visualization hidden="Children" name="New visualization" type="batch_visualization">
          <indicators>['county_jobs', 'county_households', 'county_resunits', 'county_nonres_sqft']</indicators>
          <output_type>tab</output_type>
          <dataset_name>county</dataset_name>
          <visualization_type>tab</visualization_type>
          <settings>
            <setting name="append_col_type">False</setting>
            <setting name="output_style">1</setting>
          </settings>
        </batch_visualization>
      </indicator_batch>
    </indicator_batches>
  </results_manager>
</opus_project>
