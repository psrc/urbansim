# Opus/UrbanSim urban simulation software.
# Copyright (C) 2010-2011 University of California, Berkeley, 2005-2009 University of Washington
# See opus_core/LICENSE 

aliases = [
       "zone_id = building.disaggregate(parcel.zone_id)",
       "superdistrict_id = building.disaggregate((parcel.superdistrict_id)*(parcel.superdistrict_id>0)+(parcel.superdistrict_id<1))",
       "schooldistrict = building.disaggregate((parcel.schooldistrict_id)*(parcel.schooldistrict_id>0))",
       "neighborhood_type = building.disaggregate((parcel.neighborhood_type)*(parcel.neighborhood_type>0)+(parcel.neighborhood_type<1))",
       "residential_building_type_id = 1*((building.residential_units>0)*(building.building_type_id==1)) + 2*((building.residential_units>0)*(building.building_type_id==2)) + 3*((building.residential_units>0)*(building.building_type_id==3))+ 4*((building.residential_units>0)*(building.building_type_id==4))+ 5*((building.residential_units>0)*(building.building_type_id>4))+ 6*(building.residential_units==0)",
       "tenure_id = 1*(building.tenure<2) + 2*(building.tenure==2)",
       "building_type_id = building.building_type_id",
       "activity_constraint = building.disaggregate(parcel.activity_constraint)",
       "building_class_id=building.disaggregate(building_type_classification.class_id, intermediates=[building_type])",
       "building_group_id=building.disaggregate(building_type_classification.grouping_id, intermediates=[building_type])",
       "building_class_name=building.disaggregate(building_type_classification.name, intermediates=[building_type])",
       "building_sqft_per_unit=safe_array_divide(building.building_sqft, building.residential_units)",
       "employment = building.aggregate(business.employment)",
       "is_residential = building.disaggregate(building_type_classification.is_residential, intermediates=[building_type])",            
       "number_of_businesses=building.number_of_agents(business)",
       "number_of_households=building.number_of_agents(household)",
       "population=building.aggregate(sanfrancisco.household.persons)",
       #"occupied_sqft = numpy.clip(building.aggregate(business.sqft), 0, building.non_residential_sqft)",      
       "occupied_sqft = building.aggregate(business.sqft)",      
       "sum_business_sqft = building.aggregate(business.sqft)",
       "unit_name = building.disaggregate(sanfrancisco.building_type.unit_name)",
       "unit_capacity_name = building.disaggregate(sanfrancisco.building_type.unit_capacity_name)",
       "vacant_building_sqft=clip_to_zero(sanfrancisco.building.building_sqft - sanfrancisco.building.occupied_sqft)",
       "vacant_building_sqft_without_clip=sanfrancisco.building.building_sqft - sanfrancisco.building.occupied_sqft",
       "vacant_non_residential_building_sqft=clip_to_zero(building.non_residential_building_sqft - sanfrancisco.building.occupied_sqft)",
       "vacant_non_residential_sqft_without_clip=building.building.non_residential_sqft - sanfrancisco.building.occupied_sqft",
       "vacant_non_residential_sqft=building.building.non_residential_sqft - sanfrancisco.building.occupied_sqft",
       "vacant_residential_units=clip_to_zero(sanfrancisco.building.residential_units - sanfrancisco.building.number_of_households)",
       "vacant_residential_units_without_clip=sanfrancisco.building.residential_units - sanfrancisco.building.number_of_households",

       "vacant_units1=(building_type_id==1)*(building.residential_units - building.number_of_agents(household))",
       "vacant_units2=(building_type_id==2)*(building.residential_units - building.number_of_agents(household))",
       "vacant_units3=(building_type_id==3)*(building.residential_units - building.number_of_agents(household))",
       "vacant_units4=(building_type_id==4)*(building.residential_units - building.number_of_agents(household))",
       "vacant_units5=(building_type_id==5)*(building.residential_units - building.number_of_agents(household))",
       "vacant_units6=(building_type_id==6)*(building.residential_units - building.number_of_agents(household))",
       "vacant_units7=(building_type_id==7)*(building.non_residential_sqft - (1120*building.number_of_agents(job)))",
       "vacant_units8=(building_type_id==8)*(building.non_residential_sqft - (30*building.number_of_agents(job)))",
       "vacant_units9=(building_type_id==9)*(building.non_residential_sqft - (772*building.number_of_agents(job)))",
       "vacant_units10=(building_type_id==10)*(building.non_residential_sqft - (67*building.number_of_agents(job)))",
       "vacant_units11=(building_type_id==11)*(building.non_residential_sqft - (89*building.number_of_agents(job)))",
       "vacant_units12=(building_type_id==12)*(building.non_residential_sqft - (772*building.number_of_agents(job)))",
       "vacant_units13=(building_type_id==13)*(building.non_residential_sqft - (457*building.number_of_agents(job)))",
       "vacant_units14=(building_type_id==14)*(building.non_residential_sqft - (building.number_of_agents(job)))", 
       "vacant_units15=(building_type_id==15)*(building.non_residential_sqft - (877*building.number_of_agents(job)))",
       "vacant_units16=(building_type_id==16)*(building.non_residential_sqft - (877*building.number_of_agents(job)))",
       "vacant_units17=(building_type_id==17)*(building.non_residential_sqft - (building.number_of_agents(job)))", 
       "vacant_units18=(building_type_id==18)*(building.non_residential_sqft - (51*building.number_of_agents(job)))",
       "vacant_units19=(building_type_id==19)*(building.non_residential_sqft - (374*building.number_of_agents(job)))",
       "vacant_units20=(building_type_id==20)*(building.non_residential_sqft - (374*building.number_of_agents(job)))",
       "vacant_units21=(building_type_id==21)*(building.non_residential_sqft - (374*building.number_of_agents(job)))",
       "vacant_units22=(building_type_id==22)*(building.non_residential_sqft - (183*building.number_of_agents(job)))",
       "vacant_units23=(building_type_id==23)*(building.non_residential_sqft - (183*building.number_of_agents(job)))",
       "vacant_units24=(building_type_id==24)*(building.non_residential_sqft - (119*building.number_of_agents(job)))",
       "vacant_units25=(building_type_id==25)*(building.non_residential_sqft - (119*building.number_of_agents(job)))",
       "vacant_units26=(building_type_id==26)*(building.non_residential_sqft - (building.number_of_agents(job)))",
       "vacant_units27=(building_type_id==27)*(building.non_residential_sqft - (83*building.number_of_agents(job)))",
       "vacant_units28=(building_type_id==28)*(building.non_residential_sqft - (114*building.number_of_agents(job)))",
       "vacant_units29=(building_type_id==29)*(building.non_residential_sqft - (593*building.number_of_agents(job)))",
       "vacant_units30=(building_type_id==30)*(building.non_residential_sqft - (179*building.number_of_agents(job)))",
       "vacant_units31=(building_type_id==31)*(building.non_residential_sqft - (1511*building.number_of_agents(job)))",
       "vacant_units32=(building_type_id==32)*(building.non_residential_sqft - (1511*building.number_of_agents(job)))",
       "vacant_units33=(building_type_id==33)*(building.non_residential_sqft - (building.number_of_agents(job)))", 
       "vacant_units34=(building_type_id==34)*(building.non_residential_sqft - (building.number_of_agents(job)))", 
       "total_units1=(building_type_id==1)*(building.residential_units)",
       "total_units2=(building_type_id==2)*(building.residential_units)",
       "total_units3=(building_type_id==3)*(building.residential_units)",
       "total_units4=(building_type_id==4)*(building.residential_units)",
       "total_units5=(building_type_id==5)*(building.residential_units)",
       "total_units6=(building_type_id==6)*(building.residential_units)",
       "total_units7=(building_type_id==7)*(building.non_residential_sqft)",
       "total_units8=(building_type_id==8)*(building.non_residential_sqft)",
       "total_units9=(building_type_id==9)*(building.non_residential_sqft)",
       "total_units10=(building_type_id==10)*(building.non_residential_sqft)",
       "total_units11=(building_type_id==11)*(building.non_residential_sqft)",
       "total_units12=(building_type_id==12)*(building.non_residential_sqft)",
       "total_units13=(building_type_id==13)*(building.non_residential_sqft)",
       "total_units14=(building_type_id==14)*(building.non_residential_sqft)", 
       "total_units15=(building_type_id==15)*(building.non_residential_sqft)",
       "total_units16=(building_type_id==16)*(building.non_residential_sqft)",
       "total_units17=(building_type_id==17)*(building.non_residential_sqft)", 
       "total_units18=(building_type_id==18)*(building.non_residential_sqft)",
       "total_units19=(building_type_id==19)*(building.non_residential_sqft)",
       "total_units20=(building_type_id==20)*(building.non_residential_sqft)",
       "total_units21=(building_type_id==21)*(building.non_residential_sqft)",
       "total_units22=(building_type_id==22)*(building.non_residential_sqft)",
       "total_units23=(building_type_id==23)*(building.non_residential_sqft)",
       "total_units24=(building_type_id==24)*(building.non_residential_sqft)",
       "total_units25=(building_type_id==25)*(building.non_residential_sqft)",
       "total_units26=(building_type_id==26)*(building.non_residential_sqft)",
       "total_units27=(building_type_id==27)*(building.non_residential_sqft)",
       "total_units28=(building_type_id==28)*(building.non_residential_sqft)",
       "total_units29=(building_type_id==29)*(building.non_residential_sqft)",
       "total_units30=(building_type_id==30)*(building.non_residential_sqft)",
       "total_units31=(building_type_id==31)*(building.non_residential_sqft)",
       "total_units32=(building_type_id==32)*(building.non_residential_sqft)",
       "total_units33=(building_type_id==33)*(building.non_residential_sqft)", 
       "total_units34=(building_type_id==34)*(building.non_residential_sqft)", 
       "zone_id=building.disaggregate(parcel.zone_id)",
      #dupe "building_class_id = building.disaggregrate(building_type.class_id)",
       "tprice=building.structure_value+building.disaggregate(parcel.land_value)",
       "occupied_mixed_spaces = sanfrancisco.building.occupied_sqft + safe_array_divide(sanfrancisco.building.number_of_households, (building.residential_units).astype('float')) * building.residential_sqft",
       "total_mixed_spaces = building.non_residential_sqft + building.residential_sqft",
       "is_placed_type = (sanfrancisco.building.building_type_id < 3)+" +
                        "(sanfrancisco.building.building_type_id == 5)+" +
                        "(sanfrancisco.building.building_type_id == 7)+" +
                        "(sanfrancisco.building.building_type_id == 8)+" +
                        "(sanfrancisco.building.building_type_id == 9)+" +
                        "(sanfrancisco.building.building_type_id == 13)+" +
                        "(sanfrancisco.building.building_type_id == 14)"
           ]
#"building_type = 1*(building.building_type_id==1) + 2*(building.building_type_id==2) + 3*(building.building_type_id>2)"
#+ 5*(building.building_type_id>4)