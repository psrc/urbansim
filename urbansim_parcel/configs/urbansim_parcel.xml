<opus_project>
    <xml_version>2.0</xml_version>
    <general>
        <description type="string">Refactored Default UrbanSim parcel project</description>
        <project_name hidden="True" type="string">urbansim_parcel</project_name>
        <parent type="file">urbansim/configs/urbansim.xml</parent>
        <expression_library type="dictionary">
            <variable dataset="zone" source="Python class" type="variable_definition" use="both" name="population_per_acre">urbansim_parcel.zone.population_per_acre</variable>
            <variable dataset="parcel" source="expression" type="variable_definition" use="model variable" name="constant">constant</variable>
            <variable dataset="building" source="expression" type="variable_definition" use="model variable" name="constant">constant</variable>
            <variable dataset="zone" source="expression" type="variable_definition" use="model variable" name="constant">constant</variable>
            <variable dataset="parcel" source="expression" type="variable_definition" use="model variable" name="hwy200">psrc.parcel.distance_to_highway_in_gridcell&lt;200</variable>
            <variable dataset="parcel" source="expression" type="variable_definition" use="model variable" name="hwy600">psrc.parcel.distance_to_highway_in_gridcell&lt;600</variable>
            <variable dataset="parcel" source="expression" type="variable_definition" use="model variable" name="hwy1000">psrc.parcel.distance_to_highway_in_gridcell&lt;1000</variable>
            <variable dataset="parcel" source="expression" type="variable_definition" use="model variable" name="hwy2000">psrc.parcel.distance_to_highway_in_gridcell&lt;2000</variable>
            <variable dataset="parcel" source="expression" type="variable_definition" use="model variable" name="art300">psrc.parcel.distance_to_arterial_in_gridcell&lt;300</variable>
            <variable dataset="parcel" source="expression" type="variable_definition" use="model variable" name="art600">psrc.parcel.distance_to_arterial_in_gridcell&lt;600</variable>
            <variable dataset="parcel" source="expression" type="variable_definition" use="model variable" name="ln_bldgage">(ln(parcel.aggregate(urbansim_parcel.building.age_masked, function=mean))).astype(float32)</variable>
            <variable dataset="parcel" source="expression" type="variable_definition" use="model variable" name="lnsqft">(ln(urbansim_parcel.parcel.building_sqft)).astype(float32)</variable>
            <variable dataset="parcel" source="expression" type="variable_definition" use="model variable" name="lnsqftunit">(ln(urbansim_parcel.parcel.building_sqft_per_unit)).astype(float32)</variable>
            <variable dataset="parcel" source="expression" type="variable_definition" use="model variable" name="lnlotsqft">(ln(parcel.parcel_sqft)).astype(float32)</variable>
            <variable dataset="parcel" source="expression" type="variable_definition" use="model variable" name="lnunits">(ln(urbansim_parcel.parcel.residential_units)).astype(float32)</variable>
            <variable dataset="parcel" source="expression" type="variable_definition" use="model variable" name="lnlotsqftunit">(ln(urbansim_parcel.parcel.parcel_sqft_per_unit)).astype(float32)</variable>
            <variable dataset="parcel" source="expression" type="variable_definition" use="model variable" name="far">(urbansim_parcel.parcel.building_sqft/(parcel.parcel_sqft).astype(float32)).astype(float32)</variable>
            <variable dataset="parcel" source="expression" type="variable_definition" use="model variable" name="ln_invfar">(ln(parcel.parcel_sqft/(urbansim_parcel.parcel.building_sqft).astype(float32))).astype(float32)</variable>
            <variable dataset="parcel" source="expression" type="variable_definition" use="model variable" name="lngcdacbd">(ln(parcel.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd))).astype(float32)</variable>
            <variable dataset="building" source="expression" type="variable_definition" use="model variable" name="blngcdacbd">(ln(building.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd))).astype(float32)</variable>
            <variable dataset="parcel" source="expression" type="variable_definition" use="model variable" name="lnemp30da">(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))).astype(float32)</variable>
            <variable dataset="parcel" source="expression" type="variable_definition" use="model variable" name="lnemp20da">(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_drive_alone))).astype(float32)</variable>
            <variable dataset="parcel" source="expression" type="variable_definition" use="model variable" name="lnemp10da">(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_10_minutes_travel_time_hbw_am_drive_alone))).astype(float32)</variable>
            <variable dataset="parcel" source="expression" type="variable_definition" use="model variable" name="lnemp30tw">(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_transit_walk))).astype(float32)</variable>
            <variable dataset="parcel" source="expression" type="variable_definition" use="model variable" name="lnemp20tw">(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_transit_walk))).astype(float32)</variable>
            <variable dataset="parcel" source="expression" type="variable_definition" use="model variable" name="lnemp10wa">(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_10_minutes_travel_time_hbw_am_walk))).astype(float32)</variable>
            <variable dataset="parcel" source="expression" type="variable_definition" use="model variable" name="lnemp20wa">(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_walk))).astype(float32)</variable>
            <variable dataset="parcel" source="expression" type="variable_definition" use="model variable" name="lnavginc">(ln(parcel.disaggregate(urbansim_parcel.zone.average_income))).astype(float32)</variable>
            <variable dataset="parcel" source="expression" type="variable_definition" use="model variable" name="lnempden">(ln(parcel.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))).astype(float32)</variable>
            <variable dataset="parcel" source="expression" type="variable_definition" use="model variable" name="lnpopden">(ln(parcel.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32)</variable>
            <variable dataset="parcel" source="expression" type="variable_definition" use="model variable" name="inugb">parcel.is_inside_urban_growth_boundary==True</variable>
            <variable dataset="parcel" source="expression" type="variable_definition" use="model variable" name="hbwavgtmda">parcel.disaggregate(psrc.zone.trip_weighted_average_time_hbw_from_home_am_drive_alone)</variable>
            <variable dataset="parcel" source="expression" type="variable_definition" use="model variable" name="is_pre_1940">parcel.aggregate(numpy.ma.masked_where(urbansim_parcel.building.has_valid_year_built == 0, building.year_built),function=mean) &lt; 1940</variable>
            <variable dataset="parcel" source="Python class" type="variable_definition" use="model variable" name="existing_units">urbansim_parcel.parcel.existing_units</variable>
            <variable dataset="building" source="expression" type="variable_definition" use="model variable" name="avg_unit_price">building.disaggregate(zone.aggregate(urbansim_parcel.building.unit_price,function=mean,intermediates=[parcel]))</variable>
            <variable dataset="building" source="expression" type="variable_definition" use="model variable" name="distance_to_art">building.disaggregate(psrc.parcel.distance_to_arterial_in_gridcell)</variable>
            <variable dataset="building" source="expression" type="variable_definition" use="model variable" name="distance_to_highway">building.disaggregate(psrc.parcel.distance_to_highway_in_gridcell)</variable>
            <variable dataset="building" source="Python class" type="variable_definition" use="model variable" name="is_commercial_building">urbansim.building.is_commercial</variable>
            <variable dataset="building" source="Python class" type="variable_definition" use="model variable" name="is_industrial_building">urbansim.building.is_industrial</variable>
            <variable dataset="building" source="Python class" type="variable_definition" use="model variable" name="is_mfh_building">urbansim.building.is_multi_family_residential</variable>
            <variable dataset="building" source="Python class" type="variable_definition" use="model variable" name="is_mixed_use_building">urbansim.building.is_mixed_use</variable>
            <variable dataset="building" source="expression" type="variable_definition" use="model variable" name="is_near_art">building.disaggregate(psrc.parcel.is_near_arterial_in_gridcell)</variable>
            <variable dataset="building" source="expression" type="variable_definition" use="model variable" name="is_near_highway">building.disaggregate(psrc.parcel.is_near_highway_in_gridcell)</variable>
            <variable dataset="building" source="Python class" type="variable_definition" use="model variable" name="is_office_building">urbansim.building.is_office</variable>
            <variable dataset="building" source="Python class" type="variable_definition" use="model variable" name="is_sfh_building">urbansim.building.is_single_family_residential</variable>
            <variable dataset="building" source="expression" type="variable_definition" use="model variable" name="is_unit_price_le_0">urbansim_parcel.building.unit_price &lt;= 0</variable>
            <variable dataset="building" source="expression" type="variable_definition" use="model variable" name="ln_bldage">ln(urbansim_parcel.building.age_masked)</variable>
            <variable dataset="building" source="expression" type="variable_definition" use="model variable" name="ln_empden_zone_1">ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_1)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))</variable>
            <variable dataset="building" source="expression" type="variable_definition" use="model variable" name="ln_empden_zone_10">ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_10)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))</variable>
            <variable dataset="building" source="expression" type="variable_definition" use="model variable" name="ln_empden_zone_11">ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_11)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))</variable>
            <variable dataset="building" source="expression" type="variable_definition" use="model variable" name="ln_empden_zone_12">ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_12)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))</variable>
            <variable dataset="building" source="expression" type="variable_definition" use="model variable" name="ln_empden_zone_13">ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_13)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))</variable>
            <variable dataset="building" source="expression" type="variable_definition" use="model variable" name="ln_empden_zone_14">ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_14)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))</variable>
            <variable dataset="building" source="expression" type="variable_definition" use="model variable" name="ln_empden_zone_15">ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_15)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))</variable>
            <variable dataset="building" source="expression" type="variable_definition" use="model variable" name="ln_empden_zone_16">ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_16)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))</variable>
            <variable dataset="building" source="expression" type="variable_definition" use="model variable" name="ln_empden_zone_17">ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_17)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))</variable>
            <variable dataset="building" source="expression" type="variable_definition" use="model variable" name="ln_empden_zone_18">ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_18)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))</variable>
            <variable dataset="building" source="expression" type="variable_definition" use="model variable" name="ln_empden_zone_19">ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_19)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))</variable>
            <variable dataset="building" source="expression" type="variable_definition" use="model variable" name="ln_empden_zone_2">ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_2)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))</variable>
            <variable dataset="building" source="expression" type="variable_definition" use="model variable" name="ln_empden_zone_3">ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_3)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))</variable>
            <variable dataset="building" source="expression" type="variable_definition" use="model variable" name="ln_empden_zone_4">ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_4)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))</variable>
            <variable dataset="building" source="expression" type="variable_definition" use="model variable" name="ln_empden_zone_5">ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_5)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))</variable>
            <variable dataset="building" source="expression" type="variable_definition" use="model variable" name="ln_empden_zone_6">ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_6)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))</variable>
            <variable dataset="building" source="expression" type="variable_definition" use="model variable" name="ln_empden_zone_7">ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_7)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))</variable>
            <variable dataset="building" source="expression" type="variable_definition" use="model variable" name="ln_empden_zone_8">ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_8)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))</variable>
            <variable dataset="building" source="expression" type="variable_definition" use="model variable" name="ln_empden_zone_9">ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_9)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))</variable>
            <variable dataset="building" source="expression" type="variable_definition" use="model variable" name="ln_empden_zone_retail">ln(building.disaggregate(zone.aggregate(urbansim.job.is_in_employment_sector_group_retail))/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))</variable>
            <variable dataset="building" source="expression" type="variable_definition" use="model variable" name="ln_empden_zone_service">ln(building.disaggregate(zone.aggregate(urbansim.job.is_in_employment_sector_group_service))/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))</variable>
            <variable dataset="building" source="expression" type="variable_definition" use="model variable" name="ln_unit_price_trunc">ln(where(building.disaggregate(urbansim_parcel.parcel.unit_price&lt;1500),where(building.disaggregate(urbansim_parcel.parcel.unit_price&lt;1),1,building.disaggregate(urbansim_parcel.parcel.unit_price)),1500))</variable>
            <variable dataset="building" source="Python class" type="variable_definition" use="model variable" name="unit_price">urbansim_parcel.building.unit_price</variable>
            <variable dataset="household_x_building" source="expression" type="variable_definition" use="model variable" name="has_children_x_is_single_family_residential">(household.children &gt; 0) * urbansim.building.is_single_family_residential</variable>
            <variable dataset="household_x_building" source="expression" type="variable_definition" use="model variable" name="has_children_x_percent_households_with_children_within_walking_distance">(household.children &gt; 0) * building.disaggregate(psrc_parcel.parcel.percent_households_with_children_within_walking_distance)</variable>
            <variable dataset="household_x_building" source="expression" type="variable_definition" use="model variable" name="is_high_income_x_ln_sqft_per_unit">urbansim.household.is_high_income * ln(psrc_parcel.building.sqft_per_unit)</variable>
            <variable dataset="household_x_building" source="expression" type="variable_definition" use="model variable" name="is_young_x_percent_young_households_within_walking_distance">urbansim.household.is_young * building.disaggregate(psrc_parcel.parcel.percent_young_households_within_walking_distance)</variable>
            <variable dataset="building" source="expression" type="variable_definition" use="model variable" name="ln_residential_units">ln_bounded(building.residential_units)</variable>
        </expression_library>
        <dataset_pool_configuration hidden="True" type="class">
            <class_name type="string">DatasetPoolConfiguration</class_name>
            <class_module type="string">opus_core.configurations.dataset_pool_configuration</class_module>
            <argument type="list" name="package_order">['urbansim_parcel','urbansim', 'opus_core']</argument>
        </dataset_pool_configuration>
        <available_datasets type="list">['parcel','building','household_x_building','zone','faz','large_area','gridcell','city','county','alldata']</available_datasets>
        <spatial_datasets type="list">['parcel','zone','faz','large_area','gridcell','city','county']</spatial_datasets>
    </general>
    <data_manager>
        <tool_library setexpanded="True">
            <tool_group setexpanded="True" name="opus_tools">
                <tool name="make_buildout_indicators">
                    <class_module>make_buildout_indicators</class_module>
                    <params>
                        <param name="output_type" required="True" param_type="string"/>
                        <param name="storage_location" required="True" param_type="dir_path"/>
                        <param name="cache_directory" required="True" param_type="dir_path"/>
                        <param name="year" required="True" param_type="string"/>
                    </params>
                </tool>
            </tool_group>
        </tool_library>
    <path_to_tool_modules>data_manager.run.tools</path_to_tool_modules>
            </data_manager>
    <model_manager>
        <models setexpanded="True" hidden="False" config_name="model_system" type="dictionary" name="Models"><model copyable="True" type="model" name="refinement_model">
                <structure type="dictionary">
                    <import hidden="True" type="dictionary" name="import">
                        <class_module type="string">urbansim.models.refinement_model</class_module>
                        <class_name>RefinementModel</class_name>
                    </import>
                    <init type="dictionary">
                        <name type="string" name="name">RefinementModel</name>
                    </init>
                    <prepare_for_run type="dictionary">
                        <name hidden="True" type="string" name="name">prepare_for_run</name>
                        <argument type="string" name="refinement_dataset_name" parser_action="quote_string">refinement            </argument>
                        <argument type="string" name="refinement_storage">base_cache_storage            </argument>
                        <argument type="string" name="refinement_table_name" parser_action="quote_string">refinements            </argument>
                        <output hidden="True" type="string" name="output">refinement</output>
                    </prepare_for_run>
                    <run type="dictionary">
                        <name hidden="True" type="string" name="name">run</name>
                        <argument type="string" name="refinement_dataset">refinement            </argument>
                        <argument hidden="True" type="string" name="dataset_pool">dataset_pool            </argument>
                    </run>
                </structure>

            </model>
            <model copyable="True" type="model" name="real_estate_price_model">
                <structure type="dictionary">
                    <import hidden="True" type="dictionary" name="import">
                        <class_module type="string">urbansim.models.real_estate_price_model</class_module>
                        <class_name>RealEstatePriceModel</class_name>
                    </import>
                    <init type="dictionary">
                        <name hidden="True" type="string" name="name">RealEstatePriceModel</name>
                        <argument type="string" name="submodel_string" parser_action="quote_string">land_use_type_id</argument>
                        <argument config_name="outcome_attribute" type="string" name="dependent_variable" parser_action="quote_string">ln_unit_price=ln(urbansim_parcel.parcel.unit_price)</argument>
                        <argument type="string" name="filter_attribute" parser_action="quote_string">numpy.logical_or(urbansim_parcel.parcel.building_sqft, urbansim_parcel.parcel.is_land_use_type_vacant)</argument>
                        <argument hidden="True" type="string" name="dataset_pool">dataset_pool</argument>
                        <argument type="string" name="estimate_config">Resources({'save_predicted_values_and_errors': False})</argument>
                    </init>
                    <prepare_for_run type="dictionary">
                        <name hidden="True" type="string" name="name">prepare_for_run</name>
                        <argument type="string" name="specification_storage">base_cache_storage</argument>
                        <argument type="string" name="specification_table" parser_action="quote_string">real_estate_price_model_specification</argument>
                        <argument type="string" name="coefficients_storage">base_cache_storage</argument>
                        <argument type="string" name="coefficients_table" parser_action="quote_string">real_estate_price_model_coefficients</argument>
                        <output hidden="True" type="string" name="output">(specification, coefficients)</output>
                    </prepare_for_run>
                    <run type="dictionary">
                        <argument hidden="True" type="string" name="specification">specification</argument>
                        <argument hidden="True" type="string" name="coefficients">coefficients</argument>
                        <argument type="string" name="dataset">parcel</argument>
                        <argument hidden="True" type="string" name="data_objects">datasets</argument>
                        <argument type="string" name="run_config">Resources({'exclude_outliers_from_initial_error': True, 'outlier_is_less_than':3, 'outlier_is_greater_than': 7})</argument>
                    </run>
                    <prepare_for_estimate type="dictionary">
                        <name hidden="True" type="string" name="name">prepare_for_estimate</name>
                        <argument type="string" name="specification_storage">base_cache_storage</argument>
                        <argument type="string" name="specification_table" parser_action="quote_string">real_estate_price_model_specification</argument>
                        <argument type="string" name="filter_variable" parser_action="quote_string">numpy.logical_and(urbansim_parcel.parcel.unit_price&gt;20.0855, urbansim_parcel.parcel.unit_price&lt;1096.63, urbansim_parcel.parcel.existing_units&gt;100)</argument>
                        <argument type="string" name="dataset">parcel</argument>
                        <argument type="integer" name="threshold">0</argument>
                        <output hidden="True" type="string" name="output">(specification, index)</output>
                    </prepare_for_estimate>
                    <estimate type="dictionary">
                        <argument hidden="True" type="string" name="specification">specification</argument>
                        <argument config_name="outcome_attribute" type="string" name="dependent_variable" parser_action="quote_string">ln_unit_price=ln(urbansim_parcel.parcel.unit_price)</argument>
                        <argument type="string" name="dataset">parcel</argument>
                        <argument hidden="True" type="string" name="index">index</argument>
                        <argument hidden="True" type="string" name="data_objects">datasets</argument>
                        <argument hidden="True" type="string" name="debuglevel">debuglevel</argument>
                        <argument type="string" name="procedure" parser_action="quote_string">opus_core.estimate_linear_regression</argument>
                        <output hidden="True" type="string" name="output">(coefficients, dummy)</output>
                    </estimate>
                </structure>

            </model>
            <model copyable="True" type="model" name="employment_transition_model">
                <structure type="dictionary">
                    <import hidden="True" type="dictionary" name="import">
                        <class_module type="string">urbansim.models.employment_transition_model</class_module>
                        <class_name>EmploymentTransitionModel</class_name>
                    </import>
                    <init type="dictionary">
                        <name hidden="True" type="string" name="name">EmploymentTransitionModel</name>
                        <argument hidden="True" type="string" name="debuglevel">debuglevel</argument>
                        <argument type="string" name="location_id_name" parser_action="quote_string">building_id</argument>
                    </init>
                    <prepare_for_run type="dictionary">
                        <name hidden="True" type="string" name="name">prepare_for_run</name>
                        <output hidden="True" type="string" name="output">control_totals</output>
                        <argument type="string" name="storage">base_cache_storage</argument>
                    </prepare_for_run>
                    <run type="dictionary">
                        <argument type="string" name="control_totals">control_totals</argument>
                        <argument type="string" name="job_building_types">job_building_type</argument>
                        <argument type="string" name="job_set">job</argument>
                        <argument type="string" name="year">year</argument>
                    </run>
                </structure>

            </model>
            <model copyable="True" type="model" name="employment_relocation_model">
                <structure type="dictionary">
                    <import hidden="True" type="dictionary" name="import">
                        <class_module type="string">urbansim.models.employment_relocation_model_creator</class_module>
                        <class_name>EmploymentRelocationModelCreator</class_name>
                    </import>
                    <init type="dictionary">
                        <name hidden="True" type="string" name="name">EmploymentRelocationModelCreator().get_model</name>
                        <argument hidden="True" type="string" name="debuglevel">debuglevel</argument>
                        <argument type="string" name="location_id_name" parser_action="quote_string">building_id</argument>
                        <argument type="string" name="probabilities" parser_action="quote_string">urbansim.employment_relocation_probabilities</argument>
                    </init>
                    <prepare_for_run type="dictionary">
                        <name hidden="True" type="string" name="name">prepare_for_run</name>
                        <output hidden="True" type="string" name="output">erm_resources</output>
                        <argument type="string" name="rate_storage">base_cache_storage</argument>
                        <argument type="string" name="rate_table" parser_action="quote_string">annual_relocation_rates_for_jobs</argument>
                        <argument type="string" name="what" parser_action="quote_string">jobs</argument>
                    </prepare_for_run>
                    <run type="dictionary">
                        <output hidden="True" type="string" name="output">erm_index</output>
                        <argument hidden="True" type="string" name="resources">erm_resources</argument>
                        <argument type="string" name="agent_set">job</argument>
                    </run>
                </structure>

            </model>
            <model copyable="True" type="model" name="employment_location_choice_model">
                <structure type="dictionary">
                    <estimate type="dictionary">
                        <argument type="string" name="agent_set">job</argument>
                        <argument hidden="True" type="string" name="agents_index">index</argument>
                        <argument type="string" name="data_objects">datasets</argument>
                        <argument hidden="True" type="string" name="debuglevel">debuglevel</argument>
                        <argument hidden="True" type="string" name="specification">specification</argument>
                        <output hidden="True" type="string" name="output">(coefficients, _)</output>
                    </estimate>
                    <group_by_attribute type="tuple">
                        <argument type="string" name="grouping_table">job_building_type</argument>
                        <argument type="string" name="grouping_column">name</argument>
                    </group_by_attribute>
                    <import hidden="True" type="dictionary" name="import">
                        <class_module type="string">urbansim.models.employment_location_choice_model</class_module>
                        <class_name>EmploymentLocationChoiceModel</class_name>
                    </import>
                    <init type="dictionary">
                        <name hidden="True" type="string" name="name">EmploymentLocationChoiceModel</name>
                        <argument type="string" name="sampler" parser_action="quote_string">opus_core.samplers.weighted_sampler</argument>
                        <argument type="string" name="choices" parser_action="quote_string">urbansim.lottery_choices</argument>
                        <argument type="string" name="estimation" parser_action="quote_string">opus_core.bhhh_mnl_estimation</argument>
                        <argument hidden="True" type="string" name="dataset_pool">dataset_pool</argument>
                        <argument type="string" name="location_set">building</argument>
                        <argument type="integer" name="sample_size_locations">30</argument>
                        <argument type="string" name="capacity_string" parser_action="quote_string">vacant_SSS_job_space</argument>
                        <argument type="string" name="estimation_weight_string" parser_action="quote_string">vacant_SSS_job_space</argument>
                        <argument type="string" name="filter" parser_action="quote_string">building.non_residential_sqft</argument>
                        <argument type="float" name="estimation_size_agents">1.</argument>
                        <argument type="boolean" name="compute_capacity_flag">True</argument>
                        <argument type="string" name="number_of_units_string" parser_action="quote_string">total_SSS_job_space</argument>
                        <argument type="dictionary" name="run_config">
                            <key type="string" name="agent_units_string" convert_blank_to_none="True"/>
                            <key type="integer" name="lottery_max_iterations">10</key>
                        </argument>
                        <argument type="string" name="variable_package" parser_action="quote_string">urbansim_parcel</argument>
                    </init>
                    <prepare_for_estimate type="dictionary">
                        <name hidden="True" type="string" name="name">prepare_for_estimate</name>
                        <output hidden="True" type="string" name="output">(specification, index)</output>
                        <argument type="string" name="agent_set">job</argument>
                        <argument type="string" name="agents_for_estimation_storage">base_cache_storage</argument>
                        <argument type="string" name="agents_for_estimation_table" parser_action="quote_string">jobs_for_estimation</argument>
                        <argument type="string" name="data_objects">datasets</argument>
                        <argument type="float" name="portion_to_unplace">0</argument>
                        <argument type="string" name="specification_storage">base_cache_storage</argument>
                        <argument type="string" name="specification_table" parser_action="quote_string">employment_location_choice_model_specification</argument>
                        <argument type="string" name="filter" parser_action="quote_string">numpy.logical_and(job.building_id&gt;0, job.disaggregate(building.non_residential_sqft) &gt; 0)</argument>
                    </prepare_for_estimate>
                    <prepare_for_run type="dictionary">
                        <name hidden="True" type="string" name="name">prepare_for_run</name>
                        <output hidden="True" type="string" name="output">(specification, coefficients)</output>
                        <argument type="string" name="coefficients_storage">base_cache_storage</argument>
                        <argument type="string" name="coefficients_table" parser_action="quote_string">employment_location_choice_model_coefficients</argument>
                        <argument type="string" name="specification_storage">base_cache_storage</argument>
                        <argument type="string" name="specification_table" parser_action="quote_string">employment_location_choice_model_specification</argument>
                    </prepare_for_run>
                    <run type="dictionary">
                        <argument type="string" name="agent_set">job</argument>
                        <argument hidden="True" type="string" name="agents_index">erm_index</argument>
                        <argument type="string" name="chunk_specification">{'records_per_chunk':50000}</argument>
                        <argument type="string" name="coefficients">coefficients</argument>
                        <argument type="string" name="data_objects">datasets</argument>
                        <argument hidden="True" type="string" name="debuglevel">debuglevel</argument>
                        <argument hidden="True" type="string" name="specification">specification</argument>
                        <argument type="integer" name="maximum_runs">3</argument>
                    </run>
                </structure>

            </model>
            <model copyable="True" type="model" name="distribute_unplaced_jobs_model">
                <structure type="dictionary">
                    <import hidden="True" type="dictionary" name="import">
                        <class_module type="string">urbansim_parcel.models.distribute_unplaced_jobs_model</class_module>
                        <class_name>DistributeUnplacedJobsModel</class_name>
                    </import>
                    <init type="dictionary">
                        <name hidden="True" type="string" name="name">DistributeUnplacedJobsModel</name>
                        <argument hidden="True" type="string" name="debuglevel">debuglevel</argument>
                        <argument type="string" name="filter" parser_action="quote_string">urbansim_parcel.building.is_governmental</argument>
                        <argument hidden="True" type="string" name="dataset_pool">dataset_pool</argument>
                    </init>
                    <run type="dictionary">
                        <argument type="string" name="agent_set">job</argument>
                        <argument type="string" name="data_objects">datasets</argument>
                        <argument type="string" name="location_set">building</argument>
                        <argument type="string" name="agents_filter" parser_action="quote_string">urbansim.job.is_in_employment_sector_group_scalable_sectors</argument>
                    </run>
                </structure>

            </model>
            <model copyable="True" type="model" name="governmental_employment_location_choice_model">
                <structure type="dictionary">
                    <import hidden="True" type="dictionary" name="import">
                        <class_module type="string">urbansim_parcel.models.scaling_jobs_model</class_module>
                        <class_name>ScalingJobsModel</class_name>
                    </import>
                    <init type="dictionary">
                        <name hidden="True" type="string" name="name">ScalingJobsModel</name>
                        <argument hidden="True" type="string" name="debuglevel">debuglevel</argument>
                        <argument type="string" name="filter" parser_action="quote_string">urbansim_parcel.building.is_governmental</argument>
                        <argument hidden="True" type="string" name="dataset_pool">dataset_pool</argument>
                    </init>
                    <run type="dictionary">
                        <argument type="string" name="agent_set">job</argument>
                        <argument hidden="True" type="string" name="agents_index">erm_index</argument>
                        <argument type="string" name="data_objects">datasets</argument>
                        <argument type="string" name="location_set">building</argument>
                    </run>
                </structure>

            </model>
            <model copyable="True" type="model" name="household_relocation_model">
                <structure type="dictionary">
                    <import hidden="True" type="dictionary" name="import">
                        <class_module type="string">urbansim.models.household_relocation_model_creator</class_module>
                        <class_name>HouseholdRelocationModelCreator</class_name>
                    </import>
                    <init type="dictionary">
                        <name hidden="True" type="string" name="name">HouseholdRelocationModelCreator().get_model</name>
                        <argument hidden="True" type="string" name="debuglevel">debuglevel</argument>
                        <argument type="string" name="location_id_name" parser_action="quote_string">building_id</argument>
                        <argument type="string" name="probabilities" parser_action="quote_string">urbansim.household_relocation_probabilities</argument>
                    </init>
                    <prepare_for_run type="dictionary">
                        <argument type="string" name="rate_storage">base_cache_storage</argument>
                        <argument type="string" name="rate_table" parser_action="quote_string">annual_relocation_rates_for_households</argument>
                        <argument type="string" name="what" parser_action="quote_string">households</argument>
                    </prepare_for_run>
                    <run type="dictionary">
                        <output hidden="True" type="string" name="output">hrm_index</output>
                        <argument type="string" name="agent_set">household</argument>
                        <argument hidden="True" type="string" name="resources">hrm_resources</argument>
                    </run>
                </structure>

            </model>
            <model copyable="True" type="model" name="process_pipeline_events">
                <structure type="dictionary">
                    <import hidden="True" type="dictionary" name="import">
                        <class_module type="string">urbansim_parcel.models.process_pipeline_events</class_module>
                        <class_name>ProcessPipelineEvents</class_name>
                    </import>
                    <init hidden="True" type="dictionary">
                        <name hidden="True" type="string" name="name">ProcessPipelineEvents</name>
                    </init>
                    <run type="dictionary">
                        <argument type="string" name="building_dataset">building</argument>
                        <argument hidden="True" type="string" name="year">year</argument>
                        <argument hidden="True" type="string" name="storage">base_cache_storage</argument>
                        <output hidden="True" type="string" name="output">scheduled_development_events</output>
                    </run>
                </structure>

            </model>
            <model copyable="True" type="model" name="expected_sale_price_model">
                <structure type="dictionary">
                    <import hidden="True" type="dictionary" name="import">
                        <class_module type="string">urbansim_parcel.models.development_project_proposal_regression_model</class_module>
                        <class_name>DevelopmentProjectProposalRegressionModel</class_name>
                    </import>
                    <init type="dictionary">
                        <name hidden="True" type="string" name="name">DevelopmentProjectProposalRegressionModel</name>
                        <argument type="string" name="submodel_string" parser_action="quote_string">land_use_type_id=development_project_proposal.disaggregate(parcel.land_use_type_id)</argument>
                        <argument type="string" name="filter_attribute" parser_action="quote_string">urbansim_parcel.development_project_proposal.is_size_fit</argument>
                        <argument type="string" name="outcome_attribute_name" parser_action="quote_string">ln_unit_price_expected</argument>
                        <argument hidden="True" type="string" name="dataset_pool">dataset_pool</argument>
                    </init>
                    <prepare_for_run type="dictionary">
                        <name hidden="True" type="string" name="name">prepare_for_run</name>
                        <argument type="string" name="parcel_filter_for_new_development" parser_action="quote_string">has_vacant_land=urbansim_parcel.parcel.vacant_land_area &gt; 0</argument>
                        <argument type="string" name="parcel_filter_for_redevelopment" parser_action="quote_string">low_improvement_ratio=urbansim_parcel.parcel.improvement_value / ( urbansim_parcel.parcel.unit_price * urbansim_parcel.parcel.existing_units ) &lt; 0.1</argument>
                        <argument hidden="True" type="string" name="specification_storage">base_cache_storage</argument>
                        <argument type="string" name="specification_table" parser_action="quote_string">real_estate_price_model_specification</argument>
                        <argument hidden="True" type="string" name="coefficients_storage">base_cache_storage</argument>
                        <argument type="string" name="coefficients_table" parser_action="quote_string">real_estate_price_model_coefficients</argument>
                        <argument hidden="True" type="string" name="spec_replace_module_variable_pair">('psrc_parcel.estimation.repm_specification', 'variables_for_development_project_proposal')</argument>
                        <argument hidden="True" type="string" name="dataset_pool">dataset_pool</argument>
                        <output hidden="True" type="string" name="output">(development_project_proposal, specification, coefficients)</output>
                    </prepare_for_run>
                    <run type="dictionary">
                        <argument hidden="True" type="string" name="specification">specification</argument>
                        <argument hidden="True" type="string" name="coefficients">coefficients</argument>
                        <argument type="string" name="dataset">development_project_proposal</argument>
                        <argument hidden="True" type="string" name="data_objects">datasets</argument>
                        <output hidden="True" type="string" name="output">development_project_proposal</output>
                    </run>
                </structure>
            </model>
            <model copyable="True" type="model" name="development_proposal_choice_model">
                <structure type="dictionary">
                    <import hidden="True" type="dictionary" name="import">
                        <class_module type="string">urbansim_parcel.models.development_project_proposal_sampling_model</class_module>
                        <class_name>DevelopmentProjectProposalSamplingModel</class_name>
                    </import>
                    <init type="dictionary">
                        <name hidden="True" type="string" name="name">DevelopmentProjectProposalSamplingModel</name>
                        <argument type="string" name="proposal_set">development_project_proposal</argument>
                        <argument type="string" name="weight_string" parser_action="quote_string">exp_ROI = exp(urbansim_parcel.development_project_proposal.expected_rate_of_return_on_investment)</argument>
                        <argument type="string" name="filter_attribute" convert_blank_to_none="True"/>
                    </init>
                    <run type="dictionary">
                        <argument type="integer" name="n">500</argument>
                        <output hidden="True" type="string" name="output">(development_project_proposal, demolished_buildings)</output>
                    </run>
                </structure>

            </model>
            <model copyable="True" type="model" name="building_construction_model">
                <structure type="dictionary">
                    <import hidden="True" type="dictionary" name="import">
                        <class_module type="string">urbansim_parcel.models.building_construction_model</class_module>
                        <class_name>BuildingConstructionModel</class_name>
                    </import>
                    <init hidden="True" type="dictionary">
                        <name hidden="True" type="string" name="name">BuildingConstructionModel</name>
                    </init>
                    <run type="dictionary">
                        <argument type="string" name="development_proposal_set">development_project_proposal</argument>
                        <argument type="string" name="building_dataset">building</argument>
                        <argument hidden="True" type="string" name="buildings_to_be_demolished">demolished_buildings</argument>
                        <argument hidden="True" type="string" name="dataset_pool">dataset_pool</argument>
                    </run>
                </structure>

            </model>
            <model copyable="True" type="model" name="household_location_choice_model">
                <structure type="dictionary">
                    <estimate type="dictionary">
                        <output hidden="True" type="string" name="output">(coefficients, _)</output>
                        <argument type="string" name="agent_set">household</argument>
                        <argument hidden="True" type="string" name="agents_index">_index</argument>
                        <argument type="string" name="data_objects">datasets</argument>
                        <argument hidden="True" type="string" name="debuglevel">debuglevel</argument>
                        <argument hidden="True" type="string" name="specification">_specification</argument>
                    </estimate>
                    <import hidden="True" type="dictionary" name="import">
                        <class_module type="string">urbansim.models.household_location_choice_model</class_module>
                        <class_name>HouseholdLocationChoiceModel</class_name>
                    </import>
                    <init type="dictionary">
                        <name hidden="True" type="string" name="name">HouseholdLocationChoiceModel</name>
                        <argument type="string" name="sampler" parser_action="quote_string">opus_core.samplers.weighted_sampler</argument>
                        <argument type="string" name="choices" parser_action="quote_string">urbansim.lottery_choices</argument>
                        <argument type="string" name="estimation" parser_action="quote_string">opus_core.bhhh_wesml_mnl_estimation</argument>
                        <argument hidden="True" type="string" name="dataset_pool">dataset_pool</argument>
                        <argument type="string" name="location_set">building</argument>
                        <argument type="integer" name="sample_size_locations">30</argument>
                        <argument type="string" name="capacity_string" parser_action="quote_string">vacant_residential_units</argument>
                        <argument type="string" name="estimation_weight_string" parser_action="quote_string">residential_units</argument>
                        <argument type="string" name="number_of_units_string" parser_action="quote_string">residential_units</argument>
                        <argument type="string" name="number_of_agents_string" parser_action="quote_string">number_of_households</argument>
                        <argument type="string" name="location_id_string" parser_action="quote_string">building_id</argument>
                        <argument type="string" name="submodel_string" parser_action="quote_string">urbansim.household.income_category</argument>
                        <argument type="float" name="estimation_size_agents">0.5</argument>
                        <argument type="string" name="filter" parser_action="quote_string">numpy.logical_and(urbansim_parcel.building.is_residential, numpy.logical_and(numpy.logical_and(building.residential_units, building.sqft_per_unit), urbansim_parcel.building.unit_price &gt; 0))</argument>
                        <argument type="string" name="run_config">Resources({'lottery_max_iterations': 7, 'aaaa': 'bbbb',})</argument>
                        <argument type="string" name="estimate_config">Resources({'wesml_sampling_correction_variable':'psrc_parcel.building.wesml_sampling_correction_variable'})</argument>
                        <argument type="string" name="variable_package" parser_action="quote_string">urbansim_parcel</argument>
                    </init>
                    <prepare_for_estimate type="dictionary">
                        <name hidden="True" type="string" name="name">prepare_for_estimate</name>
                        <output hidden="True" type="string" name="output">(_specification, _index)</output>
                        <argument type="string" name="agent_set">household</argument>
                        <argument type="string" name="agents_for_estimation_storage">base_cache_storage</argument>
                        <argument type="string" name="agents_for_estimation_table" parser_action="quote_string">households_for_estimation</argument>
                        <argument type="string" name="data_objects">datasets</argument>
                        <argument type="string" name="index_to_unplace">None</argument>
                        <argument type="boolean" name="join_datasets">True</argument>
                        <argument type="string" name="portion_to_unplace">.1</argument>
                        <argument type="string" name="specification_storage">base_cache_storage</argument>
                        <argument type="string" name="specification_table" parser_action="quote_string">household_location_choice_model_specification</argument>
                        <argument type="string" name="filter" parser_action="quote_string">numpy.logical_and(household.building_id&gt;0, household.disaggregate(building.sqft_per_unit&gt;0))</argument>
                    </prepare_for_estimate>
                    <prepare_for_run type="dictionary">
                        <name hidden="True" type="string" name="name">prepare_for_run</name>
                        <output hidden="True" type="string" name="output">(_specification, _coefficients)</output>
                        <argument type="string" name="coefficients_storage">base_cache_storage</argument>
                        <argument type="string" name="coefficients_table" parser_action="quote_string">household_location_choice_model_coefficients</argument>
                        <argument type="string" name="specification_storage">base_cache_storage</argument>
                        <argument type="string" name="specification_table" parser_action="quote_string">household_location_choice_model_specification</argument>
                    </prepare_for_run>
                    <run type="dictionary">
                        <argument type="string" name="agent_set">household</argument>
                        <argument hidden="True" type="string" name="agents_index">hrm_index</argument>
                        <argument type="string" name="chunk_specification">{'records_per_chunk':50000}</argument>
                        <argument hidden="True" type="string" name="coefficients">_coefficients</argument>
                        <argument hidden="True" type="string" name="data_objects">datasets</argument>
                        <argument hidden="True" type="string" name="debuglevel">debuglevel</argument>
                        <argument hidden="True" type="string" name="specification">_specification</argument>
                        <argument type="integer" name="maximum_runs">10</argument>
                    </run>
                </structure>
            </model>
            <model type="model" name="household_transition_model">
              <structure type="dictionary">
                <import type="dictionary" name="import">
                    <class_module>urbansim.models.household_transition_model</class_module>
                    <class_name>HouseholdTransitionModel</class_name>
                </import>
                <init type="dictionary">
                  <name type="string" name="name">HouseholdTransitionModel</name>
                  <argument type="string" name="location_id_name">'building_id'</argument>
                  <argument type="string" name="debuglevel">debuglevel</argument>
                </init>
                <prepare_for_run type="dictionary">
                  <output type="string" name="output">(control_totals, characteristics)</output>
                  <name type="string" name="name">prepare_for_run</name>
                  <argument type="string" name="storage">base_cache_storage</argument>
                </prepare_for_run>
                <run type="dictionary">
                  <argument type="string" name="characteristics">characteristics</argument>
                  <argument type="string" name="household_set">household</argument>
                  <argument type="string" name="control_totals" convert_blank_to_none="True">control_totals</argument>
                  <argument type="string" name="year">year</argument>
                </run>
              </structure>
            </model>
        </models><templates hidden="True" parser_action="skip" name="Model Templates"/><estimation_config type="dictionary" config_name="estimation_config" name="Estimation Configuration">
                <datasets_to_preload parser_action="list_to_dictionary" type="selectable_list">
                    <selectable copyable="True" followers="my_dataset" type="selectable" name="building">True</selectable>
                    <selectable copyable="True" followers="my_dataset" type="selectable" name="household">True</selectable>
                    <selectable copyable="True" followers="my_dataset" type="selectable" name="job">True</selectable>
                    <selectable copyable="True" type="selectable" name="parcel">True</selectable>
                </datasets_to_preload>
            </estimation_config>
            </model_manager>
    <scenario_manager>
        <scenario type="scenario" name="urbansim_parcel_baseline">
            <parent_old_format type="dictionary">
                <Class_name type="string">UrbansimParcelConfiguration</Class_name>
                <Class_path type="string">urbansim_parcel.configs.controller_config</Class_path>
            </parent_old_format>
        </scenario>
    </scenario_manager>
</opus_project>