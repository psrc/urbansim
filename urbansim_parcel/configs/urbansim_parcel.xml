<opus_project>
  <xml_version>2.0</xml_version>
  <general>
    <description type="string">Refactored Default UrbanSim parcel project</description>
    <project_name hidden="True" type="string">urbansim_parcel</project_name>
    <parent type="file">urbansim/configs/urbansim.xml</parent>
    <expression_library type="dictionary">
      <variable name="zone.population_per_acre" source="Python class" type="variable_definition" use="both">urbansim_parcel.zone.population_per_acre</variable>
      <variable use="both" source="expression" name="zone.population" type="variable_definition">urbansim_parcel.zone.population</variable>
      <variable use="both" source="expression" name="zone.number_of_households" type="variable_definition">urbansim_parcel.zone.number_of_households</variable>
      <variable use="indicator" source="expression" name="faz.number_of_households" type="variable_definition">faz.aggregate(urbansim_parcel.zone.number_of_households)</variable>
      <variable use="indicator" source="expression" name="faz.population" type="variable_definition">faz.aggregate(urbansim_parcel.zone.population)</variable>
      <variable use="indicator" source="expression" name="large_area.number_of_households" type="variable_definition">large_area.aggregate(urbansim_parcel.zone.number_of_households, intermediates=[faz])</variable>
      <variable use="indicator" source="expression" name="large_area.population" type="variable_definition">large_area.aggregate(urbansim_parcel.zone.population, intermediates=[faz])</variable>     
      <variable name="parcel.hwy200" source="expression" type="variable_definition" use="model variable">psrc.parcel.distance_to_highway_in_gridcell&lt;200</variable>
      <variable name="parcel.hwy600" source="expression" type="variable_definition" use="model variable">psrc.parcel.distance_to_highway_in_gridcell&lt;600</variable>
      <variable name="parcel.hwy1000" source="expression" type="variable_definition" use="model variable">psrc.parcel.distance_to_highway_in_gridcell&lt;1000</variable>
      <variable name="parcel.hwy2000" source="expression" type="variable_definition" use="model variable">psrc.parcel.distance_to_highway_in_gridcell&lt;2000</variable>
      <variable name="parcel.art300" source="expression" type="variable_definition" use="model variable">psrc.parcel.distance_to_arterial_in_gridcell&lt;300</variable>
      <variable name="parcel.art600" source="expression" type="variable_definition" use="model variable">psrc.parcel.distance_to_arterial_in_gridcell&lt;600</variable>
      <variable name="parcel.ln_bldgage" source="expression" type="variable_definition" use="model variable">(ln(parcel.aggregate(urbansim_parcel.building.age_masked, function=mean))).astype(float32)</variable>
      <variable name="parcel.lnsqft" source="expression" type="variable_definition" use="model variable">(ln(urbansim_parcel.parcel.building_sqft)).astype(float32)</variable>
      <variable name="parcel.lnsqftunit" source="expression" type="variable_definition" use="model variable">(ln(urbansim_parcel.parcel.building_sqft_per_unit)).astype(float32)</variable>
      <variable name="parcel.lnlotsqft" source="expression" type="variable_definition" use="model variable">(ln(parcel.parcel_sqft)).astype(float32)</variable>
      <variable name="parcel.lnunits" source="expression" type="variable_definition" use="model variable">(ln(urbansim_parcel.parcel.residential_units)).astype(float32)</variable>
      <variable name="parcel.lnlotsqftunit" source="expression" type="variable_definition" use="model variable">(ln(urbansim_parcel.parcel.parcel_sqft_per_unit)).astype(float32)</variable>
      <variable name="parcel.far" source="expression" type="variable_definition" use="model variable">(urbansim_parcel.parcel.building_sqft/(parcel.parcel_sqft).astype(float32)).astype(float32)</variable>
      <variable name="parcel.ln_invfar" source="expression" type="variable_definition" use="model variable">(ln(parcel.parcel_sqft/(urbansim_parcel.parcel.building_sqft).astype(float32))).astype(float32)</variable>
      <variable name="parcel.lngcdacbd" source="expression" type="variable_definition" use="model variable">(ln(parcel.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd))).astype(float32)</variable>
      <variable name="building.blngcdacbd" source="expression" type="variable_definition" use="model variable">(ln(building.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd))).astype(float32)</variable>
      <variable name="parcel.lnemp30da" source="expression" type="variable_definition" use="model variable">(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))).astype(float32)</variable>
      <variable name="parcel.lnemp20da" source="expression" type="variable_definition" use="model variable">(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_drive_alone))).astype(float32)</variable>
      <variable name="parcel.lnemp10da" source="expression" type="variable_definition" use="model variable">(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_10_minutes_travel_time_hbw_am_drive_alone))).astype(float32)</variable>
      <variable name="parcel.lnemp30tw" source="expression" type="variable_definition" use="model variable">(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_transit_walk))).astype(float32)</variable>
      <variable name="parcel.lnemp20tw" source="expression" type="variable_definition" use="model variable">(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_transit_walk))).astype(float32)</variable>
      <variable name="parcel.lnemp10wa" source="expression" type="variable_definition" use="model variable">(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_10_minutes_travel_time_hbw_am_walk))).astype(float32)</variable>
      <variable name="parcel.lnemp20wa" source="expression" type="variable_definition" use="model variable">(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_walk))).astype(float32)</variable>
      <variable name="parcel.lnavginc" source="expression" type="variable_definition" use="model variable">(ln(parcel.disaggregate(urbansim_parcel.zone.average_income))).astype(float32)</variable>
      <variable name="parcel.lnempden" source="expression" type="variable_definition" use="model variable">(ln(parcel.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))).astype(float32)</variable>
      <variable name="parcel.lnpopden" source="expression" type="variable_definition" use="model variable">(ln(parcel.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32)</variable>
      <variable name="parcel.inugb" source="expression" type="variable_definition" use="model variable">parcel.is_inside_urban_growth_boundary==True</variable>
      <variable name="parcel.hbwavgtmda" source="expression" type="variable_definition" use="model variable">parcel.disaggregate(psrc.zone.trip_weighted_average_time_hbw_from_home_am_drive_alone)</variable>
      <variable name="parcel.is_pre_1940" source="expression" type="variable_definition" use="model variable">parcel.aggregate(numpy.ma.masked_where(urbansim_parcel.building.has_valid_year_built == 0, building.year_built),function=mean) &lt; 1940</variable>
      <variable name="parcel.existing_units" source="Python class" type="variable_definition" use="model variable">urbansim_parcel.parcel.existing_units</variable>
      <variable name="building.avg_unit_price" source="expression" type="variable_definition" use="model variable">building.disaggregate(zone.aggregate(urbansim_parcel.building.unit_price,function=mean,intermediates=[parcel]))</variable>
      <variable name="building.distance_to_art" source="expression" type="variable_definition" use="model variable">building.disaggregate(psrc.parcel.distance_to_arterial_in_gridcell)</variable>
      <variable name="building.distance_to_highway" source="expression" type="variable_definition" use="model variable">building.disaggregate(psrc.parcel.distance_to_highway_in_gridcell)</variable>
      <variable name="building.is_commercial_building" source="Python class" type="variable_definition" use="model variable">urbansim.building.is_commercial</variable>
      <variable name="building.is_industrial_building" source="Python class" type="variable_definition" use="model variable">urbansim.building.is_industrial</variable>
      <variable name="building.is_mfh_building" source="Python class" type="variable_definition" use="model variable">urbansim.building.is_multi_family_residential</variable>
      <variable name="building.is_mixed_use_building" source="Python class" type="variable_definition" use="model variable">urbansim.building.is_mixed_use</variable>
      <variable name="building.is_near_art" source="expression" type="variable_definition" use="model variable">building.disaggregate(psrc.parcel.is_near_arterial_in_gridcell)</variable>
      <variable name="building.is_near_highway" source="expression" type="variable_definition" use="model variable">building.disaggregate(psrc.parcel.is_near_highway_in_gridcell)</variable>
      <variable name="building.is_office_building" source="Python class" type="variable_definition" use="model variable">urbansim.building.is_office</variable>
      <variable name="building.is_sfh_building" source="Python class" type="variable_definition" use="model variable">urbansim.building.is_single_family_residential</variable>
      <variable name="building.is_unit_price_le_0" source="expression" type="variable_definition" use="model variable">urbansim_parcel.building.unit_price &lt;= 0</variable>
      <variable name="building.ln_bldage" source="expression" type="variable_definition" use="model variable">ln(urbansim_parcel.building.age_masked)</variable>
      <variable name="building.ln_empden_zone_1" source="expression" type="variable_definition" use="model variable">ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_1)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))</variable>
      <variable name="building.ln_empden_zone_10" source="expression" type="variable_definition" use="model variable">ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_10)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))</variable>
      <variable name="building.ln_empden_zone_11" source="expression" type="variable_definition" use="model variable">ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_11)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))</variable>
      <variable name="building.ln_empden_zone_12" source="expression" type="variable_definition" use="model variable">ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_12)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))</variable>
      <variable name="building.ln_empden_zone_13" source="expression" type="variable_definition" use="model variable">ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_13)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))</variable>
      <variable name="building.ln_empden_zone_14" source="expression" type="variable_definition" use="model variable">ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_14)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))</variable>
      <variable name="building.ln_empden_zone_15" source="expression" type="variable_definition" use="model variable">ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_15)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))</variable>
      <variable name="building.ln_empden_zone_16" source="expression" type="variable_definition" use="model variable">ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_16)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))</variable>
      <variable name="building.ln_empden_zone_17" source="expression" type="variable_definition" use="model variable">ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_17)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))</variable>
      <variable name="building.ln_empden_zone_18" source="expression" type="variable_definition" use="model variable">ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_18)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))</variable>
      <variable name="building.ln_empden_zone_19" source="expression" type="variable_definition" use="model variable">ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_19)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))</variable>
      <variable name="building.ln_empden_zone_2" source="expression" type="variable_definition" use="model variable">ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_2)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))</variable>
      <variable name="building.ln_empden_zone_3" source="expression" type="variable_definition" use="model variable">ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_3)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))</variable>
      <variable name="building.ln_empden_zone_4" source="expression" type="variable_definition" use="model variable">ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_4)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))</variable>
      <variable name="building.ln_empden_zone_5" source="expression" type="variable_definition" use="model variable">ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_5)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))</variable>
      <variable name="building.ln_empden_zone_6" source="expression" type="variable_definition" use="model variable">ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_6)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))</variable>
      <variable name="building.ln_empden_zone_7" source="expression" type="variable_definition" use="model variable">ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_7)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))</variable>
      <variable name="building.ln_empden_zone_8" source="expression" type="variable_definition" use="model variable">ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_8)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))</variable>
      <variable name="building.ln_empden_zone_9" source="expression" type="variable_definition" use="model variable">ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_9)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))</variable>
      <variable name="building.ln_empden_zone_retail" source="expression" type="variable_definition" use="model variable">ln(building.disaggregate(zone.aggregate(urbansim.job.is_in_employment_sector_group_retail))/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))</variable>
      <variable name="building.ln_empden_zone_service" source="expression" type="variable_definition" use="model variable">ln(building.disaggregate(zone.aggregate(urbansim.job.is_in_employment_sector_group_service))/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))</variable>
      <variable name="building.ln_unit_price_trunc" source="expression" type="variable_definition" use="model variable">ln(where(building.disaggregate(urbansim_parcel.parcel.unit_price&lt;1500),where(building.disaggregate(urbansim_parcel.parcel.unit_price&lt;1),1,building.disaggregate(urbansim_parcel.parcel.unit_price)),1500))</variable>
      <variable name="building.unit_price" source="Python class" type="variable_definition" use="model variable">urbansim_parcel.building.unit_price</variable>
      <variable name="building.ln_residential_units" source="expression" type="variable_definition" use="model variable">ln_bounded(building.residential_units)</variable>
      <variable use="model variable" source="expression" name="building.population_density" type="variable_definition">(ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32)</variable>
      <variable name="household_x_building.has_children_x_is_single_family_residential" source="expression" type="variable_definition" use="model variable">(household.children &gt; 0) * urbansim.building.is_single_family_residential</variable>
      <variable name="household_x_building.has_children_x_percent_households_with_children_within_walking_distance" source="expression" type="variable_definition" use="model variable">(household.children &gt; 0) * building.disaggregate(psrc_parcel.parcel.percent_households_with_children_within_walking_distance)</variable>
      <variable name="household_x_building.is_high_income_x_ln_sqft_per_unit" source="expression" type="variable_definition" use="model variable">urbansim.household.is_high_income * ln(psrc_parcel.building.sqft_per_unit)</variable>
      <variable name="household_x_building.is_young_x_percent_young_households_within_walking_distance" source="expression" type="variable_definition" use="model variable">urbansim.household.is_young * building.disaggregate(psrc_parcel.parcel.percent_young_households_within_walking_distance)</variable>
     <variable use="model variable" source="expression" name="household_x_building.disposable_inc" type="variable_definition">ln_bounded(household.income - ((urbansim_parcel.building.unit_price/10.) * urbansim_parcel.building.building_sqft_per_unit))</variable>
     <variable use="model variable" source="expression" name="household_x_building.inc_x_mfr" type="variable_definition">ln(household.income) * urbansim.building.is_multi_family_residential</variable>
     <variable use="model variable" source="expression" name="household_x_building.persons_x_size" type="variable_definition">(household.persons) * urbansim.building.sqft_per_unit</variable>
     <variable use="model variable" source="expression" name="household_x_building.income_x_size" type="variable_definition">ln_bounded(urbansim.household.income) * ln(psrc_parcel.building.sqft_per_unit)</variable>
      <variable use="model variable" source="expression" name="household_x_building.same_area_type" type="variable_definition">urbansim_parcel.household.residence_area_type_id_lag1 == building.disaggregate(zone.area_type_id)</variable>
      <variable use="model variable" source="expression" name="household_x_building.same_area" type="variable_definition">urbansim_parcel.household.residence_large_area_id_lag1 == building.disaggregate(faz.large_area_id)</variable>
     <variable use="model variable" source="expression" name="household_x_building.one_pers_x_not_sfr" type="variable_definition">(household.persons &lt; 2) * numpy.logical_not(urbansim.building.is_single_family_residential)</variable>
    </expression_library>
    <dataset_pool_configuration hidden="True" type="class">
      <class_name type="string">DatasetPoolConfiguration</class_name>
      <class_module type="string">opus_core.configurations.dataset_pool_configuration</class_module>
      <argument name="package_order" type="list">['urbansim_parcel','urbansim', 'opus_core']</argument>
    </dataset_pool_configuration>
    <available_datasets type="list">['parcel','building','household_x_building','zone','faz','large_area','gridcell','city','county','alldata']</available_datasets>
    <spatial_datasets type="list">['parcel','zone','faz','large_area','gridcell','city','county']</spatial_datasets>
  </general>
  <data_manager>
    <tool_library setexpanded="True">
      <tool_group name="opus_tools" setexpanded="True">
        <tool name="make_buildout_indicators">
          <class_module>make_buildout_indicators</class_module>
          <params>
            <param name="output_type" param_type="string" required="True"/>
            <param name="storage_location" param_type="dir_path" required="True"/>
            <param name="cache_directory" param_type="dir_path" required="True"/>
            <param name="year" param_type="string" required="True"/>
          </params>
        </tool>
      </tool_group>
    </tool_library>
    <path_to_tool_modules>data_manager.run.tools</path_to_tool_modules>
  </data_manager>
  <model_manager>
    <models config_name="model_system" hidden="False" name="Models" setexpanded="True" type="dictionary">
      <model name="refinement_model" type="model">
        <structure type="dictionary">
          <import hidden="True" name="import" type="dictionary">
            <class_module type="string">urbansim.models.refinement_model</class_module>
            <class_name>RefinementModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">RefinementModel</name>
          </init>
          <prepare_for_run type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_run</name>
            <argument name="refinement_dataset_name" parser_action="quote_string" type="string">refinement            </argument>
            <argument name="refinement_storage" type="string">base_cache_storage            </argument>
            <argument name="refinement_table_name" parser_action="quote_string" type="string">refinements            </argument>
            <output hidden="True" name="output" type="string">refinement</output>
          </prepare_for_run>
          <run type="dictionary">
            <name hidden="True" name="name" type="string">run</name>
            <argument name="refinement_dataset" type="string">refinement            </argument>
            <argument hidden="True" name="dataset_pool" type="string">dataset_pool            </argument>
          </run>
        </structure>
      </model>
      <model name="building_renovation_and_conversion_model" type="model">
        <structure type="dictionary">
          <import hidden="True" name="import" type="dictionary">
            <class_module type="string">urbansim.models.building_renovation_and_conversion_model</class_module>
            <class_name>BuildingRenovationAndConversionModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">BuildingRenovationAndConversionModel</name>
          </init>
          <prepare_for_run type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_run</name>
            <argument name="refinement_dataset_name" parser_action="quote_string" type="string">building_renovation_and_conversion</argument>
            <argument name="refinement_storage" type="string">base_cache_storage</argument>
            <argument name="refinement_table_name" parser_action="quote_string" type="string">building_renovation_and_conversion</argument>
            <output hidden="True" name="output" type="string">building_renovation_and_conversion</output>
          </prepare_for_run>
          <run type="dictionary">
            <name hidden="True" name="name" type="string">run</name>
            <argument name="refinement_dataset" type="string">building_renovation_and_conversion</argument>
            <argument hidden="True" name="dataset_pool" type="string">dataset_pool</argument>
          </run>
        </structure>
      </model>
      <model name="real_estate_price_model" type="model">
        <structure type="dictionary">
          <import hidden="True" name="import" type="dictionary">
            <class_module type="string">urbansim.models.real_estate_price_model</class_module>
            <class_name>RealEstatePriceModel</class_name>
          </import>
          <init type="dictionary">
            <name hidden="True" name="name" type="string">RealEstatePriceModel</name>
            <argument name="submodel_string" parser_action="quote_string" type="string">land_use_type_id</argument>
            <argument config_name="outcome_attribute" name="dependent_variable" parser_action="quote_string" type="string">ln_unit_price=ln(urbansim_parcel.parcel.unit_price)</argument>
            <argument name="filter_attribute" parser_action="quote_string" type="string">numpy.logical_or(urbansim_parcel.parcel.building_sqft, urbansim_parcel.parcel.is_land_use_type_vacant)</argument>
            <argument hidden="True" name="dataset_pool" type="string">dataset_pool</argument>
            <argument name="estimate_config" type="string">Resources({'save_predicted_values_and_errors': False})</argument>
          </init>
          <prepare_for_run type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_run</name>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">real_estate_price_model_specification</argument>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_table" parser_action="quote_string" type="string">real_estate_price_model_coefficients</argument>
            <output hidden="True" name="output" type="string">(specification, coefficients)</output>
          </prepare_for_run>
          <run type="dictionary">
            <argument hidden="True" name="specification" type="string">specification</argument>
            <argument hidden="True" name="coefficients" type="string">coefficients</argument>
            <argument name="dataset" type="string">parcel</argument>
            <argument hidden="True" name="data_objects" type="string">datasets</argument>
            <argument name="run_config" type="string">Resources({'exclude_outliers_from_initial_error': True, 'outlier_is_less_than':3, 'outlier_is_greater_than': 7})</argument>
          </run>
          <prepare_for_estimate type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_estimate</name>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">real_estate_price_model_specification</argument>
            <argument name="filter_variable" parser_action="quote_string" type="string">numpy.logical_and(urbansim_parcel.parcel.unit_price&gt;20.0855, urbansim_parcel.parcel.unit_price&lt;1096.63, urbansim_parcel.parcel.existing_units&gt;100)</argument>
            <argument name="dataset" type="string">parcel</argument>
            <argument name="threshold" type="integer">0</argument>
            <output hidden="True" name="output" type="string">(specification, index)</output>
          </prepare_for_estimate>
          <estimate type="dictionary">
            <argument hidden="True" name="specification" type="string">specification</argument>
            <argument config_name="outcome_attribute" name="dependent_variable" parser_action="quote_string" type="string">ln_unit_price=ln(urbansim_parcel.parcel.unit_price)</argument>
            <argument name="dataset" type="string">parcel</argument>
            <argument hidden="True" name="index" type="string">index</argument>
            <argument hidden="True" name="data_objects" type="string">datasets</argument>
            <argument hidden="True" name="debuglevel" type="string">debuglevel</argument>
            <argument name="procedure" parser_action="quote_string" type="string">opus_core.estimate_linear_regression</argument>
            <output hidden="True" name="output" type="string">(coefficients, dummy)</output>
          </estimate>
        </structure>
      </model>
      <model name="employment_transition_model" type="model">
        <structure type="dictionary">
          <import hidden="True" name="import" type="dictionary">
            <class_module type="string">urbansim.models.employment_transition_model</class_module>
            <class_name>EmploymentTransitionModel</class_name>
          </import>
          <init type="dictionary">
            <name hidden="True" name="name" type="string">EmploymentTransitionModel</name>
            <argument hidden="True" name="debuglevel" type="string">debuglevel</argument>
            <argument name="location_id_name" parser_action="quote_string" type="string">building_id</argument>
          </init>
          <prepare_for_run type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_run</name>
            <output hidden="True" name="output" type="string">control_totals</output>
            <argument name="storage" type="string">base_cache_storage</argument>
          </prepare_for_run>
          <run type="dictionary">
            <argument name="control_totals" type="string">control_totals</argument>
            <argument name="job_building_types" type="string">job_building_type</argument>
            <argument name="job_set" type="string">job</argument>
            <argument name="year" type="string">year</argument>
          </run>
        </structure>
      </model>
      <model name="employment_relocation_model" type="model">
        <structure type="dictionary">
          <import hidden="True" name="import" type="dictionary">
            <class_module type="string">urbansim.models.employment_relocation_model_creator</class_module>
            <class_name>EmploymentRelocationModelCreator</class_name>
          </import>
          <init type="dictionary">
            <name hidden="True" name="name" type="string">EmploymentRelocationModelCreator().get_model</name>
            <argument hidden="True" name="debuglevel" type="string">debuglevel</argument>
            <argument name="location_id_name" parser_action="quote_string" type="string">building_id</argument>
            <argument name="probabilities" parser_action="quote_string" type="string">urbansim.employment_relocation_probabilities</argument>
          </init>
          <prepare_for_run type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_run</name>
            <output hidden="True" name="output" type="string">erm_resources</output>
            <argument name="rate_storage" type="string">base_cache_storage</argument>
            <argument name="rate_table" parser_action="quote_string" type="string">annual_relocation_rates_for_jobs</argument>
            <argument name="what" parser_action="quote_string" type="string">jobs</argument>
          </prepare_for_run>
          <run type="dictionary">
            <output hidden="True" name="output" type="string">erm_index</output>
            <argument hidden="True" name="resources" type="string">erm_resources</argument>
            <argument name="agent_set" type="string">job</argument>
          </run>
        </structure>
      </model>
      <model name="employment_location_choice_model" type="model">
        <dependencies type="list">['employment_relocation_model']</dependencies>
        <structure type="dictionary">
          <estimate type="dictionary">
            <argument name="agent_set" type="string">job</argument>
            <argument hidden="True" name="agents_index" type="string">index</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument hidden="True" name="debuglevel" type="string">debuglevel</argument>
            <argument hidden="True" name="specification" type="string">specification</argument>
            <output hidden="True" name="output" type="string">(coefficients, _)</output>
          </estimate>
          <group_by_attribute type="tuple">
            <argument name="grouping_table" type="string">job_building_type</argument>
            <argument name="grouping_column" type="string">name</argument>
          </group_by_attribute>
          <import hidden="True" name="import" type="dictionary">
            <class_module type="string">urbansim.models.employment_location_choice_model</class_module>
            <class_name>EmploymentLocationChoiceModel</class_name>
          </import>
          <init type="dictionary">
            <name hidden="True" name="name" type="string">EmploymentLocationChoiceModel</name>
            <argument name="sampler" parser_action="quote_string" type="string">opus_core.samplers.weighted_sampler</argument>
            <argument name="choices" parser_action="quote_string" type="string">urbansim.lottery_choices</argument>
            <argument name="estimation" parser_action="quote_string" type="string">opus_core.bhhh_mnl_estimation</argument>
            <argument hidden="True" name="dataset_pool" type="string">dataset_pool</argument>
            <argument name="location_set" type="string">building</argument>
            <argument name="sample_size_locations" type="integer">30</argument>
            <argument name="capacity_string" parser_action="quote_string" type="string">vacant_SSS_job_space</argument>
            <argument name="estimation_weight_string" parser_action="quote_string" type="string">vacant_SSS_job_space</argument>
            <argument name="filter" parser_action="quote_string" type="string">building.non_residential_sqft</argument>
            <argument name="estimation_size_agents" type="float">1.</argument>
            <argument name="compute_capacity_flag" type="boolean">True</argument>
            <argument name="number_of_units_string" parser_action="quote_string" type="string">total_SSS_job_space</argument>
            <argument name="run_config" type="dictionary">
              <key convert_blank_to_none="True" name="agent_units_string" type="string"/>
              <key name="lottery_max_iterations" type="integer">10</key>
            </argument>
            <argument name="variable_package" parser_action="quote_string" type="string">urbansim_parcel</argument>
          </init>
          <prepare_for_estimate type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_estimate</name>
            <output hidden="True" name="output" type="string">(specification, index)</output>
            <argument name="agent_set" type="string">job</argument>
            <argument convert_blank_to_none="True" name="agents_for_estimation_storage" type="string">base_cache_storage</argument>
            <argument convert_blank_to_none="True" name="agents_for_estimation_table" parser_action="quote_string" type="string">jobs_for_estimation</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument name="portion_to_unplace" type="float">0</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">employment_location_choice_model_specification</argument>
            <argument convert_blank_to_none="True" name="filter" parser_action="quote_string" type="string">numpy.logical_and(job.building_id&gt;0, job.disaggregate(building.non_residential_sqft) &gt; 0)</argument>
          </prepare_for_estimate>
          <prepare_for_run type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_run</name>
            <output hidden="True" name="output" type="string">(specification, coefficients)</output>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_table" parser_action="quote_string" type="string">employment_location_choice_model_coefficients</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">employment_location_choice_model_specification</argument>
          </prepare_for_run>
          <run type="dictionary">
            <argument name="agent_set" type="string">job</argument>
            <argument hidden="True" name="agents_index" type="string">erm_index</argument>
            <argument name="chunk_specification" type="string">{'records_per_chunk':50000}</argument>
            <argument name="coefficients" type="string">coefficients</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument hidden="True" name="debuglevel" type="string">debuglevel</argument>
            <argument hidden="True" name="specification" type="string">specification</argument>
            <argument name="maximum_runs" type="integer">3</argument>
          </run>
        </structure>
      </model>
      <model name="distribute_unplaced_jobs_model" type="model">
        <structure type="dictionary">
          <import hidden="True" name="import" type="dictionary">
            <class_module type="string">urbansim_parcel.models.distribute_unplaced_jobs_model</class_module>
            <class_name>DistributeUnplacedJobsModel</class_name>
          </import>
          <init type="dictionary">
            <name hidden="True" name="name" type="string">DistributeUnplacedJobsModel</name>
            <argument hidden="True" name="debuglevel" type="string">debuglevel</argument>
            <argument name="filter" parser_action="quote_string" type="string">urbansim_parcel.building.is_governmental</argument>
            <argument hidden="True" name="dataset_pool" type="string">dataset_pool</argument>
          </init>
          <run type="dictionary">
            <argument name="agent_set" type="string">job</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument name="location_set" type="string">building</argument>
            <argument name="agents_filter" parser_action="quote_string" type="string">urbansim.job.is_in_employment_sector_group_scalable_sectors</argument>
          </run>
        </structure>
      </model>
      <model name="distribute_unplaced_mining_utilities_jobs_model" type="model">
        <structure type="dictionary">
          <import hidden="True" name="import" type="dictionary">
            <class_module type="string">urbansim_parcel.models.distribute_unplaced_jobs_model</class_module>
            <class_name>DistributeUnplacedJobsModel</class_name>
          </import>
          <init type="dictionary">
            <name hidden="True" name="name" type="string">DistributeUnplacedJobsModel</name>
            <argument hidden="True" name="debuglevel" type="string">debuglevel</argument>
            <argument name="filter" parser_action="quote_string" type="string">urbansim_parcel.building.is_governmental</argument>
            <argument hidden="True" name="dataset_pool" type="string">dataset_pool</argument>
          </init>
          <run type="dictionary">
            <argument name="agent_set" type="string">job</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument name="location_set" type="string">building</argument>
            <argument name="agents_filter" parser_action="quote_string" type="string">numpy.logical_or(job.sector_id==1, job.sector_id==9)</argument>
          </run>
        </structure>
      </model>      
      <model name="governmental_employment_location_choice_model" type="model">
        <structure type="dictionary">
          <import hidden="True" name="import" type="dictionary">
            <class_module type="string">urbansim_parcel.models.scaling_jobs_model</class_module>
            <class_name>ScalingJobsModel</class_name>
          </import>
          <init type="dictionary">
            <name hidden="True" name="name" type="string">ScalingJobsModel</name>
            <argument hidden="True" name="debuglevel" type="string">debuglevel</argument>
            <argument name="filter" parser_action="quote_string" type="string">urbansim_parcel.building.is_governmental</argument>
            <argument hidden="True" name="dataset_pool" type="string">dataset_pool</argument>
          </init>
          <run type="dictionary">
            <argument name="agent_set" type="string">job</argument>
            <argument hidden="True" name="agents_index" type="string">erm_index</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument name="location_set" type="string">building</argument>
          </run>
        </structure>
      </model>
      <model name="household_relocation_model" type="model">
        <structure type="dictionary">
          <import hidden="True" name="import" type="dictionary">
            <class_module type="string">urbansim.models.household_relocation_model_creator</class_module>
            <class_name>HouseholdRelocationModelCreator</class_name>
          </import>
          <init type="dictionary">
            <name hidden="True" name="name" type="string">HouseholdRelocationModelCreator().get_model</name>
            <argument hidden="True" name="debuglevel" type="string">debuglevel</argument>
            <argument name="location_id_name" parser_action="quote_string" type="string">building_id</argument>
            <argument name="probabilities" parser_action="quote_string" type="string">urbansim.household_relocation_probabilities</argument>
          </init>
          <prepare_for_run type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_run</name>
            <argument name="rate_storage" type="string">base_cache_storage</argument>
            <argument name="rate_table" parser_action="quote_string" type="string">annual_relocation_rates_for_households</argument>
            <argument name="what" parser_action="quote_string" type="string">households</argument>
            <output hidden="True" name="output" type="string">hrm_resources</output>
          </prepare_for_run>
          <run type="dictionary">
            <output hidden="True" name="output" type="string">hrm_index</output>
            <argument name="agent_set" type="string">household</argument>
            <argument hidden="True" name="resources" type="string">hrm_resources</argument>
          </run>
        </structure>
      </model>
      <model name="process_pipeline_events" type="model">
        <structure type="dictionary">
          <import hidden="True" name="import" type="dictionary">
            <class_module type="string">urbansim_parcel.models.process_pipeline_events</class_module>
            <class_name>ProcessPipelineEvents</class_name>
          </import>
          <init hidden="True" type="dictionary">
            <name hidden="True" name="name" type="string">ProcessPipelineEvents</name>
          </init>
          <run type="dictionary">
            <argument name="building_dataset" type="string">building</argument>
            <argument hidden="True" name="year" type="string">year</argument>
            <argument hidden="True" name="storage" type="string">base_cache_storage</argument>
            <output hidden="True" name="output" type="string">scheduled_development_events</output>
          </run>
        </structure>
      </model>
      <model name="expected_sale_price_model" type="model">
        <structure type="dictionary">
          <import hidden="True" name="import" type="dictionary">
            <class_module type="string">urbansim_parcel.models.development_project_proposal_regression_model</class_module>
            <class_name>DevelopmentProjectProposalRegressionModel</class_name>
          </import>
          <init type="dictionary">
            <name hidden="True" name="name" type="string">DevelopmentProjectProposalRegressionModel</name>
            <argument name="submodel_string" parser_action="quote_string" type="string">land_use_type_id=development_project_proposal.disaggregate(development_template.land_use_type_id)</argument>
            <argument name="filter_attribute" parser_action="quote_string" type="string">urbansim_parcel.development_project_proposal.is_size_fit</argument>
            <argument name="outcome_attribute_name" parser_action="quote_string" type="string">ln_unit_price_expected</argument>
            <argument hidden="True" name="dataset_pool" type="string">dataset_pool</argument>
          </init>
          <prepare_for_run type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_run</name>
            <argument name="parcel_filter_for_new_development" parser_action="quote_string" type="string">has_vacant_land=urbansim_parcel.parcel.vacant_land_area &gt; 0</argument>
            <argument name="parcel_filter_for_redevelopment" parser_action="quote_string" type="string">low_improvement_ratio=urbansim_parcel.parcel.improvement_value / ( urbansim_parcel.parcel.unit_price * urbansim_parcel.parcel.existing_units ) &lt; 0.1</argument>
            <argument name="template_filter" convert_blank_to_none="True" parser_action="quote_string" type="string"></argument>
            <argument hidden="True" name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">real_estate_price_model_specification</argument>
            <argument hidden="True" name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_table" parser_action="quote_string" type="string">real_estate_price_model_coefficients</argument>
            <argument hidden="True" name="spec_replace_module_variable_pair" type="string">('psrc_parcel.estimation.repm_specification', 'variables_for_development_project_proposal')</argument>
            <argument hidden="True" name="dataset_pool" type="string">dataset_pool</argument>
            <output hidden="True" name="output" type="string">(development_project_proposal, specification, coefficients)</output>
          </prepare_for_run>
          <run type="dictionary">
            <argument hidden="True" name="specification" type="string">specification</argument>
            <argument hidden="True" name="coefficients" type="string">coefficients</argument>
            <argument name="dataset" type="string">development_project_proposal</argument>
            <argument hidden="True" name="data_objects" type="string">datasets</argument>
            <output hidden="True" name="output" type="string">development_project_proposal</output>
          </run>
        </structure>
      </model>
      <model name="development_proposal_choice_model" type="model">
        <structure type="dictionary">
          <import hidden="True" name="import" type="dictionary">
            <class_module type="string">urbansim_parcel.models.development_project_proposal_sampling_model</class_module>
            <class_name>DevelopmentProjectProposalSamplingModel</class_name>
          </import>
          <init type="dictionary">
            <name hidden="True" name="name" type="string">DevelopmentProjectProposalSamplingModel</name>
            <argument name="proposal_set" type="string">development_project_proposal</argument>
            <argument name="weight_string" parser_action="quote_string" type="string">exp_ROI = exp(urbansim_parcel.development_project_proposal.expected_rate_of_return_on_investment)</argument>
            <argument convert_blank_to_none="True" name="filter_attribute" type="string"/>
          </init>
          <run type="dictionary">
            <argument name="n" type="integer">500</argument>
            <output hidden="True" name="output" type="string">(development_project_proposal, demolished_buildings)</output>
          </run>
        </structure>
      </model>
      <model name="building_construction_model" type="model">
        <dependencies type="list">['real_estate_price_model', "expected_sale_price_model", "development_proposal_choice_model"]</dependencies>
        <structure type="dictionary">
          <import hidden="True" name="import" type="dictionary">
            <class_module type="string">urbansim_parcel.models.building_construction_model</class_module>
            <class_name>BuildingConstructionModel</class_name>
          </import>
          <init hidden="True" type="dictionary">
            <name hidden="True" name="name" type="string">BuildingConstructionModel</name>
          </init>
          <run type="dictionary">
            <argument name="development_proposal_set" type="string">development_project_proposal</argument>
            <argument name="building_dataset" type="string">building</argument>
            <argument hidden="True" name="buildings_to_be_demolished" type="string">demolished_buildings</argument>
            <argument hidden="True" name="dataset_pool" type="string">dataset_pool</argument>
          </run>
        </structure>
      </model>
      <model name="household_location_choice_model" type="model">
        <dependencies type="list">['household_relocation_model']</dependencies>
        <structure type="dictionary">
          <estimate type="dictionary">
            <output hidden="True" name="output" type="string">(coefficients, _)</output>
            <argument name="agent_set" type="string">household</argument>
            <argument hidden="True" name="agents_index" type="string">_index</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument hidden="True" name="debuglevel" type="string">debuglevel</argument>
            <argument hidden="True" name="specification" type="string">_specification</argument>
          </estimate>
          <import hidden="True" name="import" type="dictionary">
            <class_module type="string">urbansim.models.household_location_choice_model</class_module>
            <class_name>HouseholdLocationChoiceModel</class_name>
          </import>
          <init type="dictionary">
            <name hidden="True" name="name" type="string">HouseholdLocationChoiceModel</name>
            <argument name="sampler" parser_action="quote_string" type="string">opus_core.samplers.weighted_sampler</argument>
            <argument name="choices" parser_action="quote_string" type="string">urbansim.lottery_choices</argument>
            <argument name="estimation" parser_action="quote_string" type="string">opus_core.bhhh_wesml_mnl_estimation</argument>
            <argument hidden="True" name="dataset_pool" type="string">dataset_pool</argument>
            <argument name="location_set" type="string">building</argument>
            <argument name="sample_size_locations" type="integer">30</argument>
            <argument name="capacity_string" parser_action="quote_string" type="string">vacant_residential_units</argument>
            <argument name="estimation_weight_string" parser_action="quote_string" type="string">residential_units</argument>
            <argument name="number_of_units_string" parser_action="quote_string" type="string">residential_units</argument>
            <argument name="number_of_agents_string" parser_action="quote_string" type="string">number_of_households</argument>
            <argument name="location_id_string" parser_action="quote_string" type="string">building_id</argument>
            <argument name="submodel_string" parser_action="quote_string" type="string">urbansim.household.income_category</argument>
            <argument name="estimation_size_agents" type="float">0.5</argument>
            <argument name="filter" parser_action="quote_string" type="string">numpy.logical_and(urbansim_parcel.building.is_residential, numpy.logical_and(numpy.logical_and(building.residential_units, building.sqft_per_unit), urbansim_parcel.building.unit_price &gt; 0))</argument>
            <argument name="run_config" type="string">Resources({'lottery_max_iterations': 7})</argument>
            <argument name="estimate_config" type="string">Resources({'wesml_sampling_correction_variable':'psrc_parcel.building.wesml_sampling_correction_variable'})</argument>
            <argument name="variable_package" parser_action="quote_string" type="string">urbansim_parcel</argument>
          </init>
          <prepare_for_estimate type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_estimate</name>
            <output hidden="True" name="output" type="string">(_specification, _index)</output>
            <argument name="agent_set" type="string">household</argument>
            <argument convert_blank_to_none="True" name="agents_for_estimation_storage" type="string">base_cache_storage</argument>
            <argument convert_blank_to_none="True" name="agents_for_estimation_table" parser_action="quote_string" type="string">households_for_estimation</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument name="index_to_unplace" type="string">None</argument>
            <argument name="join_datasets" type="boolean">True</argument>
            <argument name="portion_to_unplace" type="string">.1</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">household_location_choice_model_specification</argument>
            <argument convert_blank_to_none="True" name="filter" parser_action="quote_string" type="string">numpy.logical_and(household.building_id&gt;0, household.disaggregate(building.sqft_per_unit&gt;0))</argument>
          </prepare_for_estimate>
          <prepare_for_run type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_run</name>
            <output hidden="True" name="output" type="string">(_specification, _coefficients)</output>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_table" parser_action="quote_string" type="string">household_location_choice_model_coefficients</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">household_location_choice_model_specification</argument>
          </prepare_for_run>
          <run type="dictionary">
            <argument name="agent_set" type="string">household</argument>
            <argument hidden="True" name="agents_index" type="string">hrm_index</argument>
            <argument name="chunk_specification" type="string">{'records_per_chunk':50000}</argument>
            <argument hidden="True" name="coefficients" type="string">_coefficients</argument>
            <argument hidden="True" name="data_objects" type="string">datasets</argument>
            <argument hidden="True" name="debuglevel" type="string">debuglevel</argument>
            <argument hidden="True" name="specification" type="string">_specification</argument>
            <argument name="maximum_runs" type="integer">10</argument>
          </run>
        </structure>
      </model>
      <model name="household_transition_model" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module>urbansim_parcel.models.household_transition_model</class_module>
            <class_name>HouseholdTransitionModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">HouseholdTransitionModel</name>
            <argument name="debuglevel" type="string">debuglevel</argument>
          </init>
          <prepare_for_run type="dictionary">
            <output name="output" type="string">(control_totals, characteristics)</output>
            <name name="name" type="string">prepare_for_run</name>
            <argument name="storage" type="string">base_cache_storage</argument>
          </prepare_for_run>
          <run type="dictionary">
            <argument name="characteristics" type="string">characteristics</argument>
            <argument name="household_set" type="string">household</argument>            
            <argument name="person_set" type="string">person</argument>
            <argument convert_blank_to_none="True" name="control_totals" type="string">control_totals</argument>
            <argument name="year" type="string">year</argument>
          </run>
        </structure>
      </model>
      <model name="work_at_home_choice_model" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module>urbansim_parcel.models.work_at_home_choice_model</class_module>
            <class_name>WorkAtHomeChoiceModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">WorkAtHomeChoiceModel</name>
            <argument name="choice_set" type="string">job</argument>
            <argument name="filter" parser_action="quote_string" type="string">urbansim_parcel.job.is_untaken_home_based_job</argument>
          </init>
          <prepare_for_run type="dictionary">
            <name name="name" type="string">prepare_for_run</name>
            <output name="output" type="string">(specification, coefficients, _index)</output>
            <argument name="agent_set" type="string">person</argument>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_table" parser_action="quote_string" type="string">work_at_home_choice_model_coefficients</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">work_at_home_choice_model_specification</argument>
            <argument name="agents_filter" parser_action="quote_string" type="string">urbansim_parcel.person.is_worker_without_job</argument>
            <argument name="data_objects" type="string">datasets</argument>
          </prepare_for_run>
          <run type="dictionary">
            <argument name="agent_set" type="string">person</argument>
            <argument name="agents_index" type="string">_index</argument>
            <argument name="choose_job_only_in_residence_zone" type="string">False</argument>
            <argument name="chunk_specification" type="string">{'nchunks':1}</argument>
            <argument name="coefficients" type="string">coefficients</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument name="specification" type="string">specification</argument>
          </run>
          <prepare_for_estimate type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_estimate</name>
            <argument name="agent_set" type="string">person</argument>
            <argument name="household_set" type="string">household</argument>
            <argument name="join_datasets" type="string">True</argument>
            <argument name="filter" parser_action="quote_string" type="string">urbansim_parcel.person.is_worker</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument name="agents_for_estimation_storage" type="string">base_cache_storage</argument>
            <argument name="agents_for_estimation_table" parser_action="quote_string" type="string">persons_for_estimation</argument>
            <argument name="households_for_estimation_table" parser_action="quote_string" type="string">households_for_estimation</argument>
            <output hidden="True" name="output" type="string">(specification, agents_index)</output>
          </prepare_for_estimate>
          <estimate type="dictionary">
            <argument name="agent_set" type="string">person</argument>
            <argument name="agents_index" type="string">agents_index</argument>
            <argument hidden="True" name="data_objects" type="string">datasets</argument>
            <argument hidden="True" name="debuglevel" type="string">debuglevel</argument>
            <argument hidden="True" name="specification" type="string">specification</argument>
            <argument name="procedure" parser_action="quote_string" type="string">opus_core.bhhh_mnl_estimation</argument>
            <output hidden="True" name="output" type="string">(coefficients, _)</output>
          </estimate>
        </structure>
      </model>
      <model name="workplace_choice_model_for_resident" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module>urbansim_parcel.models.workplace_choice_model</class_module>
            <class_name>WorkplaceChoiceModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">WorkplaceChoiceModel</name>
            <argument name="location_set" type="string">job</argument>
            <argument name="model_name" parser_action="quote_string" type="string">Non-home-based Workplace Choice Model for residents</argument>
          <argument name="short_name" parser_action="quote_string" type="string">NHBWCM</argument>
          <argument name="choices" parser_action="quote_string" type="string">urbansim.lottery_choices</argument>
          <argument name="submodel_string" type="string">None</argument>
          <argument name="filter" parser_action="quote_string" type="string">urbansim_parcel.job.is_untaken_non_home_based_job</argument>
          <argument name="location_id_string" parser_action="quote_string" type="string">job_id</argument>
            <argument name="run_config" type="dictionary">
            <key name="sampler" parser_action="quote_string" type="string">opus_core.samplers.weighted_sampler</key>
            <key name="sample_size_locations" type="integer">30</key>
            <key name="weights_for_estimation_string" type="string">is_placed_job=(urbansim_parcel.job.zone_id &gt; 0).astype(int32)</key>
            <key name="compute_capacity_flag" type="string">True</key>
            <key name="capacity_string" type="string">urbansim_parcel.job.is_untaken_non_home_based_job</key>
            <key name="lottery_max_iterations" type="integer">10</key>
            <key name="number_of_units_string" type="string">(job.building_type==2).astype(int32)</key>
            <key name="number_of_agents_string" type="string">job.number_of_agents(person)</key>
        </argument>
          <argument name="estimate_config" type="dictionary">
          <key name="estimation" type="string">opus_core.bhhh_mnl_estimation</key>
          <key name="sampler" type="string">opus_core.samplers.weighted_sampler</key>
          <key name="sample_size_locations" type="integer">30</key>
          <key name="weights_for_estimation_string" type="string">is_placed_job=(urbansim_parcel.job.zone_id &gt; 0).astype(int32)</key>
          <key name="compute_capacity_flag" type="string">True</key>
          <key name="capacity_string" type="string">urbansim_parcel.job.is_untaken_non_home_based_job</key>
          </argument>
        </init>
          <prepare_for_run type="dictionary">
            <name name="name" type="string">prepare_for_run</name>
            <output name="output" type="string">(specification, coefficients)</output>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_table" parser_action="quote_string" type="string">workplace_choice_model_for_resident_coefficients</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">workplace_choice_model_for_resident_specification</argument>
          </prepare_for_run>
          <run type="dictionary">
            <argument name="agent_set" type="string">person</argument>
            <argument name="agents_index" type="string">None</argument>
            <argument name="agents_filter" parser_action="quote_string" type="string">urbansim_parcel.person.is_non_home_based_worker_without_job</argument>
            <argument name="coefficients" type="string">coefficients</argument>
            <argument name="specification" type="string">specification</argument>
            <argument name="chunk_specification" type="string">{'records_per_chunk':50000}</argument>
            <argument name="data_objects" type="string">datasets</argument>
          </run>
          <prepare_for_estimate type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_estimate</name>
            <argument name="agent_set" type="string">person</argument>
            <argument name="household_set" type="string">household</argument>
            <argument name="join_datasets" type="string">True</argument>
            <argument name="filter" parser_action="quote_string" type="string">urbansim_parcel.person.is_non_home_based_worker_with_job</argument>
            <argument name="agents_for_estimation_storage" type="string">base_cache_storage</argument>
            <argument name="agents_for_estimation_table" parser_action="quote_string" type="string">persons_for_estimation</argument>
            <argument name="households_for_estimation_table" parser_action="quote_string" type="string">households_for_estimation</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <output hidden="True" name="output" type="string">(specification, agents_index)</output>
          </prepare_for_estimate>
          <estimate type="dictionary">
            <argument name="agent_set" type="string">person</argument>
            <argument name="agents_index" type="string">agents_index</argument>
            <argument hidden="True" name="data_objects" type="string">datasets</argument>
            <argument hidden="True" name="debuglevel" type="string">debuglevel</argument>
            <argument hidden="True" name="specification" type="string">specification</argument>
            <output hidden="True" name="output" type="string">(coefficients, _)</output>
          </estimate>
        </structure>
      </model>      
      <model name="modify_workers_jobs_after_moving_households" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module>opus_core.join_attribute_modification_model</class_module>
            <class_name>JoinAttributeModificationModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">JoinAttributeModificationModel</name>
          </init>
          <run type="dictionary">
            <argument name="dataset" type="string">person</argument>
            <argument name="secondary_dataset" type="string">household</argument>
            <argument name="attribute_to_be_modified" parser_action="quote_string" type="string">job_id</argument>
            <argument name="value" type="integer">-1</argument>
            <argument name="filter" type="string">'household.building_id != urbansim.household.building_id_lag1'</argument>
          </run>
        </structure>
      </model>
      <model name="modify_workers_jobs_after_moving_jobs" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module>opus_core.join_attribute_modification_model</class_module>
            <class_name>JoinAttributeModificationModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">JoinAttributeModificationModel</name>
          </init>
          <run type="dictionary">
            <argument name="dataset" type="string">person</argument>
            <argument name="secondary_dataset" type="string">job</argument>
            <argument name="attribute_to_be_modified" parser_action="quote_string" type="string">job_id</argument>
            <argument name="value" type="integer">-1</argument>
            <argument name="filter" type="string">'job.building_id != urbansim.job.building_id_lag1'</argument>
          </run>
        </structure>
      </model>      
      <model name="job_person_consistency_keeper" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module>urbansim_parcel.models.persons_consistency_keeper_model</class_module>
            <class_name>PersonDatasetConsistencyKeeperModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">PersonDatasetConsistencyKeeperModel</name>
          </init>
          <run type="dictionary">
            <argument name="job_set" type="string">job</argument>
            <argument name="person_set" type="string">person</argument>
            <argument name="expand_person_set" type="string">False</argument>
          </run>
        </structure>
      </model>            
    </models>
    <templates hidden="True" name="Model Templates" parser_action="skip"/>
    <estimation_config config_name="estimation_config" name="Estimation Configuration" type="dictionary">
      <datasets_to_preload parser_action="list_to_dictionary" type="selectable_list">
        <selectable followers="my_dataset" name="building" type="selectable">True</selectable>
        <selectable followers="my_dataset" name="household" type="selectable">True</selectable>
        <selectable followers="my_dataset" name="job" type="selectable">True</selectable>
        <selectable name="parcel" type="selectable">True</selectable>
      </datasets_to_preload>
      <cache_directory parser_action="prefix_with_opus_data_path" type="directory" field_identifier="Cache Directory" field_description="Directory for base_year cache, relative to OPUS_DATA_PATH or OPUS_HOME/data, e.g. seattle_parcel/base_year_data">[Project Name]/base_year_data</cache_directory>
      <base_year type="integer" field_identifier="Base Year">2000</base_year>
      <years type="tuple">
        <firstyear type="integer" field_identifier="Base Year">2000</firstyear>
        <lastyear type="integer" field_identifier="Base Year">2000</lastyear>
      </years>
    </estimation_config>
  </model_manager>
  <scenario_manager>
    <scenario name="urbansim_parcel_baseline" type="scenario">
      <advanced type="category">
        <model_system type="string">urbansim.model_coordinators.model_system</model_system>
        <debuglevel type="integer">4</debuglevel>
        <flush_variables type="boolean">False</flush_variables>
        <seed type="integer" convert_blank_to_none="True">None</seed>
        <dataset_pool_configuration type="class">
          <class_name hidden="True" type="string">DatasetPoolConfiguration</class_name>
          <class_module hidden="True" type="string">opus_core.configurations.dataset_pool_configuration</class_module>
          <argument name="package_order" type="list">['urbansim_parcel', 'urbansim', 'opus_core']</argument>
        </dataset_pool_configuration>        
      </advanced>
      <cache_directory parser_action="prefix_with_opus_data_path" type="directory" field_identifier="Cache Directory" field_description="Parent Directory for simulation runs, relative to OPUS_DATA_PATH or OPUS_HOME/data, e.g. seattle_parcel/base_year_data">[Project Name]/base_year_data</cache_directory>
      <creating_baseyear_cache_configuration type="class">
        <class_name hidden="True" type="string">CreatingBaseyearCacheConfiguration</class_name>
        <class_module hidden="True" type="string">urbansim.configurations.creating_baseyear_cache_configuration</class_module>
        <argument config_name="cache_directory_root" name="cache_directory_root" parser_action="prefix_with_opus_data_path" type="directory"  field_identifier="Scenario Runs Directory" field_description="Directory for base_year cache, relative to OPUS_DATA_PATH or OPUS_HOME/data, e.g. seattle_parcel/runs">[Project Name]/runs</argument>
      <argument name="cache_from_database" type="boolean">False</argument>
        <argument name="baseyear_cache" type="class">
          <class_name hidden="True" type="string">BaseyearCacheConfiguration</class_name>
          <class_module hidden="True" type="string">opus_core.configurations.baseyear_cache_configuration</class_module>
          <argument name="existing_cache_to_copy" parser_action="prefix_with_opus_data_path" type="directory"  field_identifier="Cache Directory" field_description="Parent Directory for simulation runs, relative to OPUS_DATA_PATH or OPUS_HOME/data, e.g. seattle_parcel/base_year_data">[Project Name]/base_year_data</argument>
        </argument>
      </creating_baseyear_cache_configuration>
      <base_year type="integer" field_identifier="Base Year">2000</base_year>
      <years_to_run config_name="years" type="tuple">
        <firstyear type="integer" field_identifier="First Year of Simulation">2001</firstyear>
        <lastyear type="integer" field_identifier="Last Year of Simulation">2002</lastyear>
      </years_to_run>
    </scenario>
  </scenario_manager>
</opus_project>
