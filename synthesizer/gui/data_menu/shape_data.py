# PopGen 1.1 is A Synthetic Population Generator for Advanced# Microsimulation Models of Travel Demand# Copyright (C) 2009, Arizona State University# See PopGen/Licenseimport urllibimport osimport timefrom PyQt4.QtCore import *from PyQt4.QtGui import *from PyQt4.QtSql import *from misc.errors import FileErrorfrom misc.utils import UnzipFilefrom import_data import ImportUserProvData, FilePropertiesfrom global_vars import *class Shapes(object):    def __init__(self, project):        self.project = project        self.state = self.project.state        self.stateCode = self.project.stateCode[self.state]        self.loc = DATA_DOWNLOAD_LOCATION + os.path.sep + self.state + os.path.sep + 'shapefiles'        self.loc = os.path.realpath(self.loc)    def downloadShapes(self):        try:            os.makedirs(self.loc)            self.retrieveAndStoreShapes()        except WindowsError, e:            reply = QMessageBox.question(None, "Import",                                         QString("""Cannot download data when the data already exists.\n\n"""                                                 """Would you like to keep existing files?"""                                                 """\nSelect No if you would like to download the files again."""),                                         QMessageBox.Yes| QMessageBox.No)            if reply == QMessageBox.No:                confirm = QMessageBox.question(None, "Import",                                               QString("""Would you like to continue?"""),                                               QMessageBox.Yes|QMessageBox.No)                if confirm == QMessageBox.Yes:                    self.retrieveAndStoreShapes()        self.extractShapes()    def retrieveAndStoreShapes(self):        bgFilename = 'bg%s_d00_shp.zip' %(self.stateCode)        shapeBGLoc = self.loc + os.path.sep + bgFilename        shapeBGLoc = os.path.realpath(shapeBGLoc)        urllib.urlretrieve("""http://www.census.gov/geo/cob/bdy/bg/bg00shp/%s""" %(bgFilename), shapeBGLoc)        tractFilename = 'tr%s_d00_shp.zip' %(self.stateCode)        shapeTractLoc = self.loc + os.path.sep + tractFilename        shapeTractLoc = os.path.realpath(shapeTractLoc)        urllib.urlretrieve("""http://www.census.gov/geo/cob/bdy/tr/tr00shp/%s""" %(tractFilename), shapeTractLoc)        countyFilename = 'co%s_d00_shp.zip' %(self.stateCode)        shapeCountyLoc = self.loc + os.path.sep + countyFilename        shapeCountyLoc = os.path.realpath(shapeCountyLoc)        urllib.urlretrieve("""http://www.census.gov/geo/cob/bdy/co/co00shp/%s""" %(countyFilename), shapeCountyLoc)    def extractShapes(self):        bgFile = UnzipFile(self.loc, 'bg%s_d00_shp.zip' %(self.stateCode))        bgFile.unzip()        countyFile = UnzipFile(self.loc, 'co%s_d00_shp.zip' %(self.stateCode))        countyFile.unzip()        tractFile = UnzipFile(self.loc, 'tr%s_d00_shp.zip' %(self.stateCode))        tractFile.unzip()    def dummy(self):        passif __name__ == "__main__":    pass