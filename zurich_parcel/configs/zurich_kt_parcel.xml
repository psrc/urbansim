<opus_project>
  <xml_version>2.0</xml_version>
  <general>
    <description type="string">SustainCity: Zurich case study</description>
    <project_name hidden="True" type="string">zurich_kt_parcel</project_name>
    <parent type="file">urbansim_parcel/configs/urbansim_parcel.xml</parent>
    <expression_library type="dictionary">
      <variable use="both" source="expression" name="zone.SC_pop_ha_per_zone" type="variable_definition">zone.aggregate(zurich_parcel.parcel.persons_within_56_of_parcel)</variable>
      <variable use="both" source="expression" name="job.SC_is_placed_job" type="variable_definition">(urbansim_parcel.job.zone_id&gt;0).astype(int32)</variable>
      <variable use="both" source="expression" name="parcel.SC_unbuilt_parcel_area" type="variable_definition">parcel.parcel_sqft - parcel.aggregate(building.land_area, intermediates=[parcel])</variable>
      <variable use="both" source="Python class" name="building.Inwork_SC_building_type" type="variable_definition">zurich_parcel.building.is_building_type_3</variable>
      <variable use="both" source="expression" name="parcel.SC_is_built" type="variable_definition">zurich_parcel.parcel.number_of_buildings &gt; 0</variable>
      <variable use="both" source="expression" name="person.SC_dist_to_job" type="variable_definition">0.1629 * exp(-0.00008 * sqrt((person.disaggregate(parcel.x_coord_sp, intermediates=[building, household])-person.disaggregate(parcel.x_coord_sp, intermediates=[building, job]))^2+(person.disaggregate(parcel.y_coord_sp, intermediates=[building, household])-person.disaggregate(parcel.y_coord_sp, intermediates=[building, job]))^2))</variable>
      <variable use="both" source="expression" name="job.SC_job_xcoord" type="variable_definition">job.disaggregate(parcel.x_coord_sp, intermediates=[building])</variable>
      <variable use="both" source="expression" name="parcel.SC_is_generic_land_use_type_smaller_7" type="variable_definition">parcel.generic_land_use_type_id &lt; 7</variable>
      <variable use="model variable" source="expression" name="building.SC_logit_slope" type="variable_definition">ln(building.disaggregate(parcel.slope, intermediates=[parcel])) - ln(1 - building.disaggregate(parcel.slope, intermediates=[parcel]))</variable>
      <variable use="model variable" source="expression" name="parcel.SC_logit_foreigners_within_56_of_parcel" type="variable_definition">ln(zurich_parcel.parcel.households_foreign_within_56_of_parcel) - ln(1 - zurich_parcel.parcel.households_foreign_within_56_of_parcel)</variable>
      <variable use="model variable" source="expression" name="building.SC_ln_jobs_G52_H_within_1km" type="variable_definition">building.disaggregate(ln(urbansim_parcel.parcel.jobs_of_sector_5_within_1000_of_parcel), intermediates=[parcel])#urbansim_parcel.parcel.jobs_within_1000_of_parcel did work</variable>
      <variable use="both" source="Python class" name="zone.SC_number_of_housholds_in_zone" type="variable_definition">urbansim_parcel.zone.number_of_households#zone.number_of_agents(household)#zurich_parcel.parcel.number_of_households</variable>
      <variable use="both" source="expression" name="household.SC_building_pt_acc_X_dummy_nocar" type="variable_definition">household.disaggregate(parcel.acc_pt, intermediates=[building])* (numpy.ma.masked_where(household.cars==0, household.cars+1))</variable>
      <variable use="both" source="expression" name="building.SC_building_age" type="variable_definition">2050-(numpy.ma.masked_where(urbansim_parcel.building.has_valid_year_built==0, building.year_built))</variable>
      <variable use="model variable" source="expression" name="household.SC_hh_size1_X_hh1_density" type="variable_definition">numpy.ma.masked_where(household.persons == 1, household.persons * household.disaggregate(urbansim_parcel.parcel.households_within_1000_of_parcel, intermediates=[parcel, building]))</variable>
      <variable use="both" source="expression" name="building.SC_building_year_built" type="variable_definition">numpy.ma.masked_where(urbansim_parcel.building.has_valid_year_built==0,building.year_built)</variable>
      <variable use="both" source="expression" name="household_x_building.SC_pop_dens_within_1km_X_young_hh_dummy" type="variable_definition">(household.age_of_head &lt; 35)*(building.disaggregate(zurich_parcel.parcel.persons_within_1000_of_parcel))#(building.disaggregate(zuerich_parcel.urbansim_parcel.parcel.persons_within_1000_of_parcel, intermediates=[household])* (household.age_of_head &lt; 30)</variable>
      <variable use="model variable" source="expression" name="building.SC_rent_vacancy_per_municipality" type="variable_definition">building.disaggregate(city.aggregate(zone.aggregate(building.residential_units, intermediates=[parcel])- zone.number_of_agents(household)), intermediates=[parcel, building])#city.aggregate(zone.aggregate(building.residential_units, intermediates=[parcel])- zone.number_of_agents(household))</variable>
      <variable use="model variable" source="expression" name="building.SC_jobs_in_municipality" type="variable_definition">building.disaggregate(city.aggregate(zone.number_of_agents(job)),intermediates=[zone,parcel])</variable>
      <variable use="model variable" source="expression" name="building.SC_jobs_G52_H_within_1km" type="variable_definition">building.disaggregate(urbansim_parcel.parcel.jobs_of_sector_5_within_1000_of_parcel, intermediates=[parcel])#urbansim_parcel.parcel.jobs_within_1000_of_parcel did work</variable>
      <variable use="both" source="expression" name="building.SC_building_is_pre_1941" type="variable_definition">numpy.ma.masked_where(urbansim_parcel.building.has_valid_year_built == 0, building.year_built) &lt; 1921</variable>
      <variable use="model variable" source="expression" name="building.SC_jobs_within_1km" type="variable_definition">building.disaggregate(ln(parcel.bz05_g52_1km+parcel.bz05_h_1km+1)) #this uses the precalculated values out of GIS</variable>
      <variable use="both" source="expression" name="zones.SC_number_of_resid_units_in_zone" type="variable_definition">zones.aggregate(buildings.residential_units, intermediates=[parcels])</variable>
      <variable use="both" source="expression" name="building.SC_ln_dist_to_station" type="variable_definition">ln(building.disaggregate(parcel.dist_to_station))</variable>
      <variable use="both" source="primary attribute" name="parcel.SC_autobahn_within_100m" type="variable_definition">parcel.autobahn_100m</variable>
      <variable use="both" source="expression" name="building.SC_ln_taxlevel" type="variable_definition">ln(building.disaggregate(parcel.municipal_taxindex))</variable>
      <variable use="model variable" source="Python class" name="parcel.SC_households_within_500_of_parcel" type="variable_definition">urbansim_parcel.parcel.households_within_500_of_parcel</variable>
      <variable use="both" source="Python class" name="parcel.SC_pop_ha" type="variable_definition">zurich_parcel.parcel.persons_within_56_of_parcel</variable>
      <variable use="both" source="expression" name="building.SC_acc_pt" type="variable_definition">building.disaggregate(parcel.acc_pt)</variable>
      <variable use="both" source="expression" name="building.SC_acc_car" type="variable_definition">building.disaggregate(parcel.acc_car)</variable>
      <variable use="both" source="expression" name="building.SC_ln_sqm_per_unit" type="variable_definition">ln(building.sqft_per_unit)</variable>
      <variable use="both" source="expression" name="building.SC_is_house" type="variable_definition">building.building_quality_id == 1021</variable>
      <variable use="both" source="expression" name="building.SC_building_built91to05" type="variable_definition">numpy.logical_and(numpy.ma.masked_where(urbansim_parcel.building.has_valid_year_built == 0, building.year_built) &gt; 1991, numpy.ma.masked_where(urbansim_parcel.building.has_valid_year_built == 0, building.year_built) &lt; 2005)</variable>
      <variable use="both" source="expression" name="building.SC_building_built81to90" type="variable_definition">numpy.logical_and(numpy.ma.masked_where(urbansim_parcel.building.has_valid_year_built == 0, building.year_built) &gt; 1981, numpy.ma.masked_where(urbansim_parcel.building.has_valid_year_built == 0, building.year_built) &lt; 1990)</variable>
      <variable use="both" source="expression" name="building.SC_building_is_pre_1921" type="variable_definition">numpy.ma.masked_where(urbansim_parcel.building.has_valid_year_built == 0, building.year_built) &lt; 1921</variable>
      <variable use="both" source="expression" name="building.SC_building_built21to30" type="variable_definition">numpy.logical_and(numpy.ma.masked_where(urbansim_parcel.building.has_valid_year_built == 0, building.year_built) &gt; 1921, numpy.ma.masked_where(urbansim_parcel.building.has_valid_year_built == 0, building.year_built) &lt; 1930)</variable>
      <variable use="both" source="expression" name="building.SC_ln_dist_to_zh_cbd" type="variable_definition">ln(building.disaggregate(parcel.dist_to_zh_cbd))</variable>
      <variable use="both" source="expression" name="parcel.is_nearer_100_highway" type="variable_definition">parcel.dist_to_highwaynet&lt;100</variable>
      <variable use="both" source="primary attribute" name="parcel.SC_share_of_university_degrees" type="variable_definition">parcel.share_of_universitydegrees</variable>
      <variable use="both" source="expression" name="parcel.SC_noise" type="variable_definition">(parcel.dist_to_highwaynet&lt;100) * (parcel.dist_to_railnet&lt;100)</variable>
      <variable use="both" source="expression" name="building.SC_dist_to_zh_cbd" type="variable_definition">building.disaggregate(parcel.dist_to_zh_cbd)</variable>
      <variable use="both" source="expression" name="building.SC_dist_to_win_cbd" type="variable_definition">building.disaggregate(parcel.dist_to_win_cbd)</variable>
      <variable use="both" source="expression" name="building.SC_dist_to_station" type="variable_definition">building.disaggregate(parcel.dist_to_station)</variable>
      <variable use="both" source="expression" name="building.SC_dist_to_highway" type="variable_definition">building.disaggregate(parcel.dist_to_highwayaccess)</variable>
      <variable use="both" source="expression" name="household_x_building.SC_interaction_year_built_age_of_head" type="variable_definition">numpy.absolute(building.year_built - (household.age_of_head * 30))</variable>
      <variable use="both" source="expression" name="building.SC_rent_vacancy_per_zone" type="variable_definition">building.disaggregate((zone.aggregate(building.residential_units, intermediates=[parcel])-zone.number_of_agents(household)), intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="zone.SC_number_of_hh_in_zone" type="variable_definition">zone.number_of_agents(household)</variable>
      <variable use="both" source="expression" name="building.SC_highway_within_100m" type="variable_definition">building.disaggregate(parcel.autobahn_100m)</variable>
      <variable use="both" source="expression" name="building.SC_residential_units_per_zone" type="variable_definition">building.disaggregate(zone.aggregate(building.residential_units, intermediates=[parcel]), intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="building.SC_share_of_buildings_pre_1971_per_zone" type="variable_definition">building.disaggregate(zone.aggregate(numpy.ma.masked_where(urbansim_parcel.building.has_valid_year_built == 0, building.year_built) &lt; 1971, intermediates = [parcel])/(zone.number_of_agents(building)), intermediates = [parcel])</variable>
      <variable use="both" source="expression" name="zone.SC_number_of_buildings_per_zone" type="variable_definition">zone.number_of_agents(building)</variable>
      <variable use="both" source="expression" name="zone.SC_number_of_buildings_pre_1971_per_zone" type="variable_definition">zone.aggregate(numpy.ma.masked_where(urbansim_parcel.building.has_valid_year_built == 0, building.year_built) &lt; 1971, intermediates = [parcel])</variable>
      <variable use="both" source="expression" name="building.SC_mean_year_built_within_zone" type="variable_definition">building.disaggregate(zone.aggregate(building.year_built, function=mean, intermediates=[parcel]))</variable>
      <variable use="both" source="expression" name="&lt;unknown&gt;.SC_households_with_same_size" type="variable_definition">numpy.ma.masked_where(household.persons == household.persons, households.persons * households.persons)</variable>
      <variable use="model variable" source="expression" name="building.SC_households_within_1000_of_parcel" type="variable_definition">building.disaggregate(urbansim_parcel.parcel.households_within_1000_of_parcel)</variable>
      <variable use="both" source="expression" name="building.SC_building_is_pre_1971" type="variable_definition">numpy.ma.masked_where(urbansim_parcel.building.has_valid_year_built == 0, building.year_built) &lt; 1971</variable>
      <variable name="building.blngcdacbd" source="expression" type="variable_definition" use="model variable">(ln(building.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd))).astype(float32)</variable>
      <variable name="household_x_building.is_high_income_x_ln_sqft_per_unit" source="expression" type="variable_definition" use="model variable">urbansim.household.is_high_income * ln(psrc_parcel.building.sqft_per_unit)</variable>
      <variable use="model variable" source="expression" name="household_x_building.SC_population_density_interacted_young_household" type="variable_definition">(ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32) * (household.age_of_head &lt; 30)</variable>
      <variable name="parcel.is_pre_1971" source="expression" type="variable_definition" use="model variable">parcel.aggregate(numpy.ma.masked_where(urbansim_parcel.building.has_valid_year_built == 0, building.year_built),function=mean) &lt; 1971</variable>
      <variable use="model variable" source="expression" name="parcel.pop_density_within_1000_of_parcel" type="variable_definition">urbansim_parcel.parcel.persons_within_1000_of_parcel / (1000**2 * 3.1415926535897931)</variable>
      <variable use="model variable" source="Python class" name="parcel.SC_persons_within_1000_of_parcel" type="variable_definition">zurich_parcel.parcel.persons_within_1000_of_parcel</variable>
      <variable use="both" source="expression" name="household.pop_density_x_young_hh" type="variable_definition">ln(urbansim.household.is_young)</variable>
      <variable use="model variable" source="expression" name="building.RH_distance_to_CBD" type="variable_definition">building.disaggregate(parcel.dist_to_zh_cbd)</variable>
      <variable use="model variable" source="expression" name="building.RH_distance_to_HWnet" type="variable_definition"> building.disaggregate(parcel.dist_to_highwaynet)</variable>
      <variable use="model variable" source="expression" name="building.RH_distance_to_HW" type="variable_definition"> building.disaggregate(parcel.dist_to_highwayaccess)</variable>
      <variable use="model variable" source="expression" name="building.RH_distance_to_PT" type="variable_definition"> building.disaggregate(parcel.dist_to_station)</variable>
      <variable use="model variable" source="expression" name="building.RH_zonal_income" type="variable_definition"> building.disaggregate(zone.aggregate(household.income, function=mean))</variable>
      <variable use="model variable" source="expression" name="building.RH_pop_dens" type="variable_definition">  building.disaggregate(urbansim_parcel.zone.population_per_acre)</variable>
      <variable use="model variable" source="expression" name="building.RH_ln_surf" type="variable_definition">ln(building.non_residential_sqft)</variable>
      <variable use="model variable" source="expression" name="zone.RH_zone_jobs" type="variable_definition">(zone.number_of_agents(job))</variable>
      <variable use="model variable" source="expression" name="job_x_building.RH_zone_jobs_1" type="variable_definition">building.disaggregate(zone.aggregate(parcel.aggregate(building.aggregate(job.sector_id==1))))</variable>
      <variable use="model variable" source="expression" name="job_x_building.RH_zone_jobs_same" type="variable_definition">urbansim_parcel.job_x_building.same_sector_employment_in_zone</variable>
      <variable use="model variable" source="expression" name="job_x_building.RH_walk_jobs_same" type="variable_definition">urbansim_parcel.job_x_building.same_sector_employment_within_walking_distance</variable>
      <variable use="model variable" source="expression" name="zone.RH_zone_jobs_type1" type="variable_definition">building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_1)</variable>
      <variable use="model variable" source="expression" name="zone.RH_zone_jobs_type2" type="variable_definition">building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_2)</variable>
      <variable use="model variable" source="expression" name="zone.RH_zone_jobs_type3" type="variable_definition">building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_3)</variable>
      <variable use="model variable" source="expression" name="zone.RH_zone_jobs_type4" type="variable_definition">building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_4)</variable>
      <variable use="model variable" source="expression" name="zone.RH_zone_jobs_type5" type="variable_definition">building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_5)</variable>
      <variable use="model variable" source="expression" name="zone.RH_zone_jobs_type6" type="variable_definition">building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_6)</variable>
      <variable use="model variable" source="expression" name="zone.RH_zone_jobs_type7" type="variable_definition">building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_7)</variable>
      <variable use="model variable" source="expression" name="zone.RH_zone_jobs_type8" type="variable_definition">building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_8)</variable>
      <variable use="model variable" source="expression" name="building.RH_ln_surf" type="variable_definition">ln(building.non_residential_sqft)</variable>
      <variable use="model variable" source="expression" name="job_x_building.RH_distance_to_CBD_indust" type="variable_definition">(((job.sector_id == 1) + (job.sector_id == 2) + (job.sector_id == 6))&gt;0) * building.disaggregate(parcel.dist_to_zh_cbd)</variable>
      <variable use="model variable" source="expression" name="job_x_building.RH_distance_to_CBD_wtrade" type="variable_definition">(job.sector_id == 3) * building.disaggregate(parcel.dist_to_zh_cbd)</variable>
      <variable use="model variable" source="expression" name="job_x_building.RH_distance_to_CBD_trade" type="variable_definition">(job.sector_id == 4) * building.disaggregate(parcel.dist_to_zh_cbd)</variable>
      <variable use="model variable" source="expression" name="job_x_building.RH_distance_to_CBD_hotelbar" type="variable_definition">(job.sector_id == 5) * building.disaggregate(parcel.dist_to_zh_cbd)</variable>
      <variable use="model variable" source="expression" name="job_x_building.RH_distance_to_CBD_service" type="variable_definition">(((job.sector_id == 7)+(job.sector_id == 8))&gt;0) * building.disaggregate(parcel.dist_to_zh_cbd)</variable>
      <variable use="model variable" source="expression" name="job_x_building.RH_distance_to_HWnet_indust" type="variable_definition">(((job.sector_id == 1) + (job.sector_id == 2) + (job.sector_id == 6))&gt;0) * building.disaggregate(parcel.dist_to_highwaynet)</variable>
      <variable use="model variable" source="expression" name="job_x_building.RH_distance_to_HWnet_wtrade" type="variable_definition">(job.sector_id == 3) * building.disaggregate(parcel.dist_to_highwaynet)</variable>
      <variable use="model variable" source="expression" name="job_x_building.RH_distance_to_HWnet_trade" type="variable_definition">(job.sector_id == 4) * building.disaggregate(parcel.dist_to_highwaynet)</variable>
      <variable use="model variable" source="expression" name="job_x_building.RH_distance_to_HWnet_hotelbar" type="variable_definition">(job.sector_id == 5) * building.disaggregate(parcel.dist_to_highwaynet)</variable>
      <variable use="model variable" source="expression" name="job_x_building.RH_distance_to_HWnet_service" type="variable_definition">(((job.sector_id == 7)+(job.sector_id == 8))&gt;0) * building.disaggregate(parcel.dist_to_highwaynet)</variable>
      <variable use="model variable" source="expression" name="job_x_building.RH_distance_to_HW_indust" type="variable_definition">(((job.sector_id == 1) + (job.sector_id == 2) + (job.sector_id == 6))&gt;0) * building.disaggregate(parcel.dist_to_highwayaccess)</variable>
      <variable use="model variable" source="expression" name="job_x_building.RH_distance_to_HW_wtrade" type="variable_definition">(job.sector_id == 3) * building.disaggregate(parcel.dist_to_highwayaccess)</variable>
      <variable use="model variable" source="expression" name="job_x_building.RH_distance_to_HW_trade" type="variable_definition">(job.sector_id == 4) * building.disaggregate(parcel.dist_to_highwayaccess)</variable>
      <variable use="model variable" source="expression" name="job_x_building.RH_distance_to_HW_hotelbar" type="variable_definition">(job.sector_id == 5) * building.disaggregate(parcel.dist_to_highwayaccess)</variable>
      <variable use="model variable" source="expression" name="job_x_building.RH_distance_to_HW_service" type="variable_definition">(((job.sector_id == 7)+(job.sector_id == 8))&gt;0) * building.disaggregate(parcel.dist_to_highwayaccess)</variable>
      <variable use="model variable" source="expression" name="job_x_building.RH_distance_to_PT_indust" type="variable_definition">(((job.sector_id == 1) + (job.sector_id == 2) + (job.sector_id == 6))&gt;0) * building.disaggregate(parcel.dist_to_station)</variable>
      <variable use="model variable" source="expression" name="job_x_building.RH_distance_to_PT_wtrade" type="variable_definition">(job.sector_id == 3) * building.disaggregate(parcel.dist_to_station)</variable>
      <variable use="model variable" source="expression" name="job_x_building.RH_distance_to_PT_trade" type="variable_definition">(job.sector_id == 4) * building.disaggregate(parcel.dist_to_station)</variable>
      <variable use="model variable" source="expression" name="job_x_building.RH_distance_to_PT_hotelbar" type="variable_definition">(job.sector_id == 5) * building.disaggregate(parcel.dist_to_station)</variable>
      <variable use="model variable" source="expression" name="job_x_building.RH_distance_to_PT_service" type="variable_definition">(((job.sector_id == 7)+(job.sector_id == 8))&gt;0) * building.disaggregate(parcel.dist_to_station)</variable>
      <variable use="both" source="expression" name="job_x_building.RH_zonal_income_indust" type="variable_definition">(((job.sector_id == 1) + (job.sector_id == 2) + (job.sector_id == 6))&gt;0) * building.disaggregate(zone.aggregate(household.income, function=mean))</variable>
      <variable use="model variable" source="expression" name="job_x_building.RH_zonal_income_wtrade" type="variable_definition">(job.sector_id == 3) * building.disaggregate(zone.aggregate(household.income, function=mean))</variable>
      <variable use="model variable" source="expression" name="job_x_building.RH_zonal_income_trade" type="variable_definition">(job.sector_id == 4) * building.disaggregate(zone.aggregate(household.income, function=mean))</variable>
      <variable use="model variable" source="expression" name="job_x_building.RH_zonal_income_hotelbar" type="variable_definition">(job.sector_id == 5) * building.disaggregate(zone.aggregate(household.income, function=mean))</variable>
      <variable use="model variable" source="expression" name="job_x_building.RH_zonal_income_service" type="variable_definition">(((job.sector_id == 7)+(job.sector_id == 8))&gt;0) * building.disaggregate(zone.aggregate(household.income, function=mean))</variable>
      <variable use="model variable" source="expression" name="job_x_building.RH_pop_dens_indust" type="variable_definition">(((job.sector_id == 1) + (job.sector_id == 2) + (job.sector_id == 6))&gt;0) *  building.disaggregate(urbansim_parcel.zone.population_per_acre)</variable>
      <variable use="model variable" source="expression" name="job_x_building.RH_pop_dens_wtrade" type="variable_definition">(job.sector_id == 3) *  building.disaggregate(urbansim_parcel.zone.population_per_acre)</variable>
      <variable use="model variable" source="expression" name="job_x_building.RH_pop_dens_trade" type="variable_definition">(job.sector_id == 4) *  building.disaggregate(urbansim_parcel.zone.population_per_acre)</variable>
      <variable use="model variable" source="expression" name="job_x_building.RH_pop_dens_hotelbar" type="variable_definition">(job.sector_id == 5) *  building.disaggregate(urbansim_parcel.zone.population_per_acre)</variable>
      <variable use="model variable" source="expression" name="job_x_building.RH_pop_dens_service" type="variable_definition">(((job.sector_id == 7)+(job.sector_id == 8))&gt;0) *  building.disaggregate(urbansim_parcel.zone.population_per_acre)</variable>
      <variable use="model variable" source="expression" name="job_x_building.RH_parcel_land_indust" type="variable_definition">(((job.sector_id == 1) + (job.sector_id == 2) + (job.sector_id == 6))&gt;0) * building.disaggregate(parcel.parcel_sqft)</variable>
      <variable use="model variable" source="expression" name="job_x_building.RH_parcel_land_wtrade" type="variable_definition">(job.sector_id == 3) * building.disaggregate(parcel.parcel_sqft)</variable>
      <variable use="model variable" source="expression" name="job_x_building.RH_parcel_land_trade" type="variable_definition">(job.sector_id == 4) * building.disaggregate(parcel.parcel_sqft)</variable>
      <variable use="model variable" source="expression" name="job_x_building.RH_parcel_land_hotelbar" type="variable_definition">(job.sector_id == 5) * building.disaggregate(parcel.parcel_sqft)</variable>
      <variable use="model variable" source="expression" name="job_x_building.RH_parcel_land_service" type="variable_definition">(((job.sector_id == 7)+(job.sector_id == 8))&gt;0) * building.disaggregate(parcel.parcel_sqft)</variable>
      <variable use="model variable" source="expression" name="job_x_building.RH_ln_surf_indust" type="variable_definition">(((job.sector_id == 1) + (job.sector_id == 2) + (job.sector_id == 6))&gt;0) * ln(building.non_residential_sqft)</variable>
      <variable use="model variable" source="expression" name="job_x_building.RH_ln_surf_wtrade" type="variable_definition">(job.sector_id == 3) * ln(building.non_residential_sqft)</variable>
      <variable use="model variable" source="expression" name="job_x_building.RH_ln_surf_trade" type="variable_definition">(job.sector_id == 4) * ln(building.non_residential_sqft)</variable>
      <variable use="model variable" source="expression" name="job_x_building.RH_ln_surf_hotelbar" type="variable_definition">(job.sector_id == 5) * ln(building.non_residential_sqft)</variable>
      <variable use="model variable" source="expression" name="job_x_building.RH_ln_surf_service" type="variable_definition">(((job.sector_id == 7)+(job.sector_id == 8))&gt;0) * ln(building.non_residential_sqft)</variable>
      <variable use="model variable" source="expression" name="job_x_building.RH_imp_value_indust" type="variable_definition">(((job.sector_id == 1) + (job.sector_id == 2) + (job.sector_id == 6))&gt;0) * building.improvement_value</variable>
      <variable use="model variable" source="expression" name="job_x_building.RH_imp_value_wtrade" type="variable_definition">(job.sector_id == 3) * building.improvement_value</variable>
      <variable use="model variable" source="expression" name="job_x_building.RH_imp_value_trade" type="variable_definition">(job.sector_id == 4) * building.improvement_value</variable>
      <variable use="model variable" source="expression" name="job_x_building.RH_imp_value_hotelbar" type="variable_definition">(job.sector_id == 5) * building.improvement_value</variable>
      <variable use="model variable" source="expression" name="job_x_building.RH_imp_value_service" type="variable_definition">(((job.sector_id == 7)+(job.sector_id == 8))&gt;0) * building.improvement_value</variable>
      <variable use="model variable" source="expression" name="job_x_building.RH_land_surfb_indust" type="variable_definition">(((job.sector_id == 1) + (job.sector_id == 2) + (job.sector_id == 6))&gt;0) * building.land_area</variable>
      <variable use="model variable" source="expression" name="job_x_building.RH_land_surfb_wtrade" type="variable_definition">(job.sector_id == 3) * building.land_area</variable>
      <variable use="model variable" source="expression" name="job_x_building.RH_land_surfb_trade" type="variable_definition">(job.sector_id == 4) * building.land_area</variable>
      <variable use="model variable" source="expression" name="job_x_building.RH_land_surfb_hotelbar" type="variable_definition">(job.sector_id == 5) * building.land_area</variable>
      <variable use="model variable" source="expression" name="job_x_building.RH_land_surfb_service" type="variable_definition">(((job.sector_id == 7)+(job.sector_id == 8))&gt;0) * building.land_area</variable>
      <variable use="model variable" source="expression" name="building.SC_logit_foreigners_within_56_of_building" type="variable_definition">building.disaggregate(ln(zurich_parcel.parcel.households_foreign_within_56_of_parcel) - ln(1 - zurich_parcel.parcel.households_foreign_within_56_of_parcel))</variable>
      <variable use="both" source="expression" name="building.SC_pop_ha_per_building" type="variable_definition">building.disaggregate(zurich_parcel.parcel.persons_within_56_of_parcel)</variable>
      <variable use="both" source="expression" name="parcel.SC_is_unbuilt" type="variable_definition">zurich_parcel.parcel.number_of_buildings == 0</variable>
      <variable use="both" source="expression" name="building_x_parcel.SC_building_fit_parcel" type="variable_definition">building.land_area - parcel.parcel_sqft</variable>
      <variable use="both" source="expression" name="parcel.SC_plan_type_id_smaller_7000" type="variable_definition">parcel.plan_type_id &lt; 7000</variable>
      <variable use="both" source="expression" name="parcel.SC_ln_jobs_within_56" type="variable_definition">ln(urbansim_parcel.parcel.jobs_within_56_of_parcel)</variable>
      <variable use="both" source="Python class" name="parcel.SC_jobs_within_56" type="variable_definition">urbansim_parcel.parcel.jobs_within_56_of_parcel</variable>
      <variable use="both" source="expression" name="parcel.SC_ln_pop_ha" type="variable_definition">ln(zurich_parcel.parcel.persons_within_56_of_parcel)</variable>
      <variable use="both" source="expression" name="parcel.SC_dist_to_station" type="variable_definition">parcel.dist_to_station</variable>
      <variable use="both" source="primary attribute" name="parcel.SC_slope" type="variable_definition">parcel.slope</variable>
      <variable use="both" source="primary attribute" name="parcel.SC_dist_to_zh_cbd" type="variable_definition">parcel.dist_to_zh_cbd</variable>
    </expression_library>
    <available_datasets type="list">['building_x_parcel','building','parcel','household','business','household_x_building','zone','tract','district14','district24','alldata','pdist','buildings_for_estimation', 'development_event_history', 'job_x_building']</available_datasets>
    <spatial_datasets type="list">['parcel','zone','tract','district24','district14','city','county']</spatial_datasets>
    <dataset_pool_configuration type="class" hidden="False">
      <class_name type="string">DatasetPoolConfiguration</class_name>
      <class_module type="string">opus_core.configurations.dataset_pool_configuration</class_module>
      <argument name="package_order" type="list">['zurich_parcel','urbansim_parcel','urbansim','opus_core']</argument>
    </dataset_pool_configuration>
  </general>
  <data_manager>
    <tool_library setexpanded="True">
      <tool_group name="opus_data_import_export_tools" setexpanded="True">
        <tool name="sql_data_to_opus_tool">
          <class_module>sql_data_to_opus</class_module>
          <params>
            <param name="database_server_connection" param_type="db_connection_hook" required="True">scenario_database_server</param>
            <param name="database_name" param_type="string" required="True">baseyear_v1_copy</param>
            <param name="table_name" param_type="string" required="True">persons</param>
            <param name="opus_data_directory" param_type="dir_path" required="True">data/zurich_parcel/base_year_data</param>
            <param name="opus_data_year" param_type="string" required="True">2000</param>
            <param name="overwrite" param_type="boolean" required="True">True</param>
          </params>
        </tool>
        <tool name="esri_data_to_opus_tool">
          <class_module>esri_data_to_opus</class_module>
          <params>
            <param name="esri_data_path" param_type="dir_path" required="True">data/zurich_parcel/shapefiles</param>
            <param name="esri_table_name" param_type="dir_path" required="True">zonen_kvm</param>
            <param name="opus_data_directory" param_type="dir_path" required="True">data/zurich_parcel/base_year_data</param>
            <param name="opus_data_year" param_type="string" required="True">2000</param>
          </params>
        </tool>
        <tool name="opus_data_to_sql_tool">
          <params>
            <param name="database_server_connection" param_type="db_connection_hook" required="True">scenario_database_server</param>
            <param name="database_name" param_type="string" required="True">results_testrun</param>
            <param name="opus_data_directory" param_type="dir_path" required="True">/home/schirpat/00_UrbanSim_workspace/data/zurich_li_parcel/runs/run_39.run_120221_1419/indicators/_stored_data</param>
            <param name="opus_data_year" param_type="string" required="True">2000</param>
            <param name="opus_table_name" param_type="string" required="True">zone</param>
          </params>
        </tool>
        <tool name="opus_data_to_csv_tool">
          <params>
            <param name="csv_data_path" param_type="dir_path" required="True">C:/Users/hurtubia/Documents/UrbanSim_Zurich</param>
            <param name="opus_data_directory" param_type="dir_path" required="True">C:/opus/data/zurich_li_parcel/base_year_data</param>
            <param name="opus_data_year" param_type="string" required="True">2002</param>
            <param name="opus_table_name" param_type="string" required="True">zone</param>
          </params>
        </tool>
        <tool name="csv_data_to_opus_tool">
          <class_module>csv_data_to_opus</class_module>
          <params>
            <param name="csv_data_path" param_type="dir_path" required="True">C:/Users/hurtubia/Documents/UrbanSim_Zurich</param>
            <param name="csv_table_name" param_type="string" required="True">annual_employment_control_totals</param>
            <param name="opus_data_directory" param_type="dir_path" required="True">C:/opus/data/zurich_li_parcel/base_year_data</param>
            <param name="opus_data_year" param_type="string" required="True">2000</param>
          </params>
        </tool>
      </tool_group>
    </tool_library>
  </data_manager>
  <model_manager>
    <models config_name="model_system" hidden="False" name="Models" setexpanded="True" type="dictionary">
      <model name="new_employment_transition_model" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module>urbansim.models.transition_model</class_module>
            <class_name>TransitionModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">TransitionModel</name>
            <argument name="dataset" type="string">job</argument>
            <argument name="model_name" parser_action="quote_string" type="string">Employment Transition Model</argument>
            <argument name="model_short_name" parser_action="quote_string" type="string">ETM</argument>
          </init>
          <prepare_for_run type="dictionary">
            <name name="name" type="string">prepare_for_run</name>
            <argument name="control_total_table" parser_action="quote_string" type="string">annual_employment_control_totals</argument>
            <argument name="control_total_storage" type="string">base_cache_storage</argument>
          </prepare_for_run>
          <run type="dictionary">
            <argument name="control_totals" type="string" model_dependency_type="dataset">control_totals</argument>
            <argument name="job_set" type="string" model_dependency_type="dataset">job</argument>
            <argument name="year" type="string">year</argument>
            <argument name="target_attribute_name" parser_action="quote_string" type="string">number_of_jobs</argument>
            <argument name="reset_dataset_attribute_value" type="string">{'building_id':-1}</argument>
          </run>
        </structure>
      </model>
      <model name="SC_building_transition_model" type="model">
        <structure type="dictionary">
          <import hidden="False" name="import" type="dictionary">
            <class_module type="string">urbansim.models.real_estate_transition_model</class_module>
            <class_name>RealEstateTransitionModel</class_name>
          </import>
          <init type="dictionary">
            <name hidden="False" name="name" type="string">RealEstateTransitionModel</name>
          </init>
          <prepare_for_run type="dictionary">
            <output name="output" type="string">_DISCARD</output>
            <argument name="storage" type="string">base_cache_storage</argument>
            <argument name="dataset_name" parser_action="quote_string" type="string">target_vacancy</argument>
            <argument name="table_name" parser_action="quote_string" type="string">target_vacancies</argument>
            <name name="name" type="string">prepare_for_run</name>
          </prepare_for_run>
          <run type="dictionary">
            <output name="output" type="string">building, new_building_index</output>
            <argument name="realestate_dataset" type="string">building</argument>
            <argument name="year" type="string">year</argument>
            <argument name="occupied_spaces_variable" parser_action="quote_string" type="string">occupied_spaces</argument>
            <argument name="total_spaces_variable" parser_action="quote_string" type="string">total_spaces</argument>
            <argument name="sample_from_dataset" type="string">building</argument>
            <argument name="reset_attribute_value" type="string">{'parcel_id':-1}</argument>.
            <argument name="append_to_realestate_dataset" type="string">True</argument>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
            <argument name="sample_filter" type="string">"numpy.logical_and(building.year_built &gt; 1990, building.building_type_id&lt;&gt;7)"</argument>
            <argument name="resources" type="string">model_resources</argument>
          </run>
        </structure>
      </model>
      <model name="SC_building_location_choice_model_from_template" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">urbansim.models.agent_location_choice_model</class_module>
            <class_name type="string">AgentLocationChoiceModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">AgentLocationChoiceModel</name>
            <argument name="location_set" type="string" model_dependency_type="dataset">parcel</argument>
            <argument name="sampler" parser_action="quote_string" type="string">opus_core.samplers.weighted_sampler</argument>
            <argument name="utilities" parser_action="quote_string" type="string">opus_core.linear_utilities</argument>
            <argument name="probabilities" parser_action="quote_string" type="string">opus_core.mnl_probabilities</argument>
            <argument name="choices" parser_action="quote_string" type="string">opus_core.random_choices_from_index</argument>
            <argument convert_blank_to_none="True" name="filter" parser_action="quote_string" type="string" model_dependency_type="variable">numpy.logical_and(SC_plan_type_id_smaller_7000, SC_is_unbuilt)</argument>
            <argument convert_blank_to_none="True" name="submodel_string" parser_action="quote_string" type="string" model_dependency_type="variable"/>
            <argument convert_blank_to_none="True" name="location_id_string" parser_action="quote_string" type="string" model_dependency_type="variable">parcel_id</argument>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
            <argument name="model_name" parser_action="quote_string" type="string">BuildingLocationChoiceModel</argument>
            <argument name="short_name" parser_action="quote_string" type="string">BLCM</argument>
            <argument name="variable_package" parser_action="quote_string" type="string">urbansim</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
            <argument name="run_config" type="dictionary">
              <key name="sample_size_locations" type="integer">30</key>
              <key convert_blank_to_none="True" name="sample_proportion_locations" type="integer"/>
              <key name="compute_capacity_flag" type="boolean">True</key>
              <key convert_blank_to_none="True" name="capacity_string" parser_action="quote_string" type="string" model_dependency_type="variable">area_capacity</key>
              <key convert_blank_to_none="True" name="number_of_units_string" parser_action="quote_string" type="string" model_dependency_type="variable">land_area</key>
              <key convert_blank_to_none="True" name="number_of_agents_string" parser_action="quote_string" type="string" model_dependency_type="variable">built_area</key>
              <key name="lottery_max_iterations" type="integer">3</key>
            </argument>
            <argument name="estimate_config" type="dictionary">
              <key convert_blank_to_none="True" name="weights_for_estimation_string" parser_action="quote_string" type="string" model_dependency_type="variable"/>
              <key name="sample_size_locations" type="integer">30</key>
              <key convert_blank_to_none="True" name="sample_proportion_locations" type="integer"/>
              <key name="estimation_size_agents" type="float">1.0</key>
            </argument>
          </init>
          <prepare_for_estimate type="dictionary">
            <name name="name" type="string">prepare_for_estimate</name>
            <output name="output" type="string">(alcm_specification, alcm_index)</output>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string" model_dependency_type="table">SC_building_location_choice_model_from_template_specification</argument>
            <argument name="agent_set" type="string" model_dependency_type="dataset">building</argument>
            <argument name="agents_for_estimation_storage" type="string">base_cache_storage</argument>
            <argument name="agents_for_estimation_table" parser_action="quote_string" type="string" model_dependency_type="table">buildings</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument convert_blank_to_none="True" name="index_to_unplace" type="string"/>
            <argument name="join_datasets" type="boolean">True</argument>
            <argument name="portion_to_unplace" type="string">1.0</argument>
            <argument convert_blank_to_none="True" name="filter" parser_action="quote_string" type="string" model_dependency_type="variable">building.year_built&gt;1999</argument>
            <argument convert_blank_to_none="True" name="location_id_variable" parser_action="quote_string" type="string" model_dependency_type="variable">parcel_id</argument>
          </prepare_for_estimate>
          <estimate type="dictionary">
            <output name="output" type="string">(alcm_coefficients, dummy)</output>
            <argument name="agent_set" type="string" model_dependency_type="dataset">building</argument>
            <argument name="agents_index" type="string">alcm_index</argument>
            <argument name="procedure" parser_action="quote_string" type="string">opus_core.bhhh_mnl_estimation</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
            <argument name="specification" type="string">alcm_specification</argument>
          </estimate>
          <prepare_for_run type="dictionary">
            <name name="name" type="string">prepare_for_run</name>
            <output name="output" type="string">(alcm_specification, alcm_coefficients)</output>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_table" parser_action="quote_string" type="string" model_dependency_type="table">SC_building_location_choice_model_from_template_coefficients</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string" model_dependency_type="table">SC_building_location_choice_model_from_template_specification</argument>
          </prepare_for_run>
          <run type="dictionary">
            <argument name="agent_set" type="string" model_dependency_type="dataset">building</argument>
            <argument convert_blank_to_none="True" name="agents_index" type="string">new_building_index</argument>
            <argument name="chunk_specification" type="string">{'records_per_chunk':50000}</argument>
            <argument name="coefficients" type="string">alcm_coefficients</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
            <argument name="specification" type="string">alcm_specification</argument>
            <argument name="maximum_runs" type="integer">10</argument>
          </run>
        </structure>
        <specification type="dictionary" inherit_parent_values="False">
          <submodel hidden="Children" name="submodel" submodel_id="-2" type="submodel">
            <description type="string">A sample submodel. In order to estimate the model, please add at least one variable.</description>
            <variable_list type="variable_list">
              <variable_spec name="building_x_parcel.SC_building_fit_parcel"/>
              <variable_spec name="parcel.SC_jobs_within_56"/>
              <variable_spec name="parcel.SC_ln_pop_ha"/>
              <variable_spec name="parcel.SC_logit_foreigners_within_56_of_parcel"/>
              <variable_spec name="parcel.SC_slope"/>
            </variable_list>
          </submodel>
        </specification>
        <estimation_config name="Estimation Configuration" parser_action="skip">
          <config_override config_name="models" name="Models to run before estimation" type="list">[]</config_override>
        </estimation_config>
      </model>
      <model name="employment_location_choice_model" type="model">
        <dependencies type="list">['employment_relocation_model']</dependencies>
        <structure type="dictionary">
          <group_by_attribute type="list">('home_based_status', 'name')</group_by_attribute>
          <estimate type="dictionary">
            <argument name="agent_set" type="string" model_dependency_type="dataset">job</argument>
            <argument hidden="True" name="agents_index" type="string">index</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument hidden="True" name="debuglevel" type="string">debuglevel</argument>
            <argument hidden="True" name="specification" type="string">specification</argument>
            <output hidden="True" name="output" type="string">(coefficients, _)</output>
          </estimate>
          <init type="dictionary">
            <argument name="sample_size_locations" type="integer">10</argument>
            <argument name="estimation_size_agents" type="float">.05</argument>
          </init>
          <prepare_for_estimate type="dictionary">
            <argument convert_blank_to_none="True" name="agents_for_estimation_table" parser_action="quote_string" type="string" model_dependency_type="table">jobs</argument>
            <argument convert_blank_to_none="True" name="filter" parser_action="quote_string" type="string" model_dependency_type="variable">(job.building_id&gt;0)</argument>
          </prepare_for_estimate>
        </structure>
        <specification type="dictionary">
          <submodel_group name="home_based" type="submodel_group">
            <submodel hidden="Children" name="submodel" submodel_id="-2" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list">
                <variable_spec name="building.SC_ln_dist_to_station"/>
              </variable_list>
            </submodel>
          </submodel_group>
          <submodel_group name="non_home_based" type="submodel_group">
            <submodel hidden="Children" name="manufacturing" submodel_id="1" type="submodel">
              <description type="string">manufacturing</description>
              <variable_list type="variable_list">
                <variable_spec name="building.RH_zonal_income"/>
                <variable_spec name="job_x_building.RH_zone_jobs_same"/>
                <variable_spec name="zone.RH_zone_jobs_type2"/>
                <variable_spec name="zone.RH_zone_jobs_type3"/>
                <variable_spec name="zone.RH_zone_jobs_type4"/>
                <variable_spec name="zone.RH_zone_jobs_type5"/>
                <variable_spec name="zone.RH_zone_jobs_type6"/>
                <variable_spec name="zone.RH_zone_jobs_type7"/>
                <variable_spec name="zone.RH_zone_jobs_type8"/>
                <variable_spec name="building.SC_dist_to_highway"/>
                <variable_spec name="building.SC_dist_to_station"/>
                <variable_spec name="building.RH_ln_surf"/>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="construction" submodel_id="2" type="submodel">
              <description type="string">construction</description>
              <variable_list type="variable_list">
                <variable_spec name="building.RH_zonal_income"/>
                <variable_spec name="job_x_building.RH_zone_jobs_same"/>
                <variable_spec name="zone.RH_zone_jobs_type1"/>
                <variable_spec name="zone.RH_zone_jobs_type3"/>
                <variable_spec name="zone.RH_zone_jobs_type4"/>
                <variable_spec name="zone.RH_zone_jobs_type5"/>
                <variable_spec name="zone.RH_zone_jobs_type6"/>
                <variable_spec name="zone.RH_zone_jobs_type7"/>
                <variable_spec name="zone.RH_zone_jobs_type8"/>
                <variable_spec name="building.SC_dist_to_highway"/>
                <variable_spec name="building.SC_dist_to_station"/>
                <variable_spec name="building.RH_ln_surf"/>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="trade" submodel_id="3" type="submodel">
              <description type="string">trade</description>
              <variable_list type="variable_list">
                <variable_spec name="building.RH_zonal_income"/>
                <variable_spec name="job_x_building.RH_zone_jobs_same"/>
                <variable_spec name="zone.RH_zone_jobs_type1"/>
                <variable_spec name="zone.RH_zone_jobs_type2"/>
                <variable_spec name="zone.RH_zone_jobs_type4"/>
                <variable_spec name="zone.RH_zone_jobs_type5"/>
                <variable_spec name="zone.RH_zone_jobs_type6"/>
                <variable_spec name="zone.RH_zone_jobs_type7"/>
                <variable_spec name="zone.RH_zone_jobs_type8"/>
                <variable_spec name="building.SC_dist_to_highway"/>
                <variable_spec name="building.SC_dist_to_station"/>
                <variable_spec name="building.RH_ln_surf"/>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="retail" submodel_id="4" type="submodel">
              <description type="string">retail</description>
              <variable_list type="variable_list">
                <variable_spec name="building.RH_zonal_income"/>
                <variable_spec name="job_x_building.RH_zone_jobs_same"/>
                <variable_spec name="zone.RH_zone_jobs_type1"/>
                <variable_spec name="zone.RH_zone_jobs_type2"/>
                <variable_spec name="zone.RH_zone_jobs_type3"/>
                <variable_spec name="zone.RH_zone_jobs_type5"/>
                <variable_spec name="zone.RH_zone_jobs_type6"/>
                <variable_spec name="zone.RH_zone_jobs_type7"/>
                <variable_spec name="zone.RH_zone_jobs_type8"/>
                <variable_spec name="building.SC_dist_to_highway"/>
                <variable_spec name="building.SC_dist_to_station"/>
                <variable_spec name="building.RH_ln_surf"/>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="hotels_restaurants" submodel_id="5" type="submodel">
              <description type="string">hotels_restaurants</description>
              <variable_list type="variable_list">
                <variable_spec name="building.RH_zonal_income"/>
                <variable_spec name="job_x_building.RH_zone_jobs_same"/>
                <variable_spec name="zone.RH_zone_jobs_type1"/>
                <variable_spec name="zone.RH_zone_jobs_type2"/>
                <variable_spec name="zone.RH_zone_jobs_type3"/>
                <variable_spec name="zone.RH_zone_jobs_type4"/>
                <variable_spec name="zone.RH_zone_jobs_type6"/>
                <variable_spec name="zone.RH_zone_jobs_type7"/>
                <variable_spec name="zone.RH_zone_jobs_type8"/>
                <variable_spec name="building.SC_dist_to_highway"/>
                <variable_spec name="building.SC_dist_to_station"/>
                <variable_spec name="building.RH_ln_surf"/>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="transport" submodel_id="6" type="submodel">
              <description type="string">transport</description>
              <variable_list type="variable_list">
                <variable_spec name="building.RH_zonal_income"/>
                <variable_spec name="job_x_building.RH_zone_jobs_same"/>
                <variable_spec name="zone.RH_zone_jobs_type1"/>
                <variable_spec name="zone.RH_zone_jobs_type2"/>
                <variable_spec name="zone.RH_zone_jobs_type3"/>
                <variable_spec name="zone.RH_zone_jobs_type4"/>
                <variable_spec name="zone.RH_zone_jobs_type5"/>
                <variable_spec name="zone.RH_zone_jobs_type7"/>
                <variable_spec name="zone.RH_zone_jobs_type8"/>
                <variable_spec name="building.SC_dist_to_highway"/>
                <variable_spec name="building.SC_dist_to_station"/>
                <variable_spec name="building.RH_ln_surf"/>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="services" submodel_id="7" type="submodel">
              <description type="string">services</description>
              <variable_list type="variable_list">
                <variable_spec name="building.RH_zonal_income"/>
                <variable_spec name="job_x_building.RH_zone_jobs_same"/>
                <variable_spec name="zone.RH_zone_jobs_type1"/>
                <variable_spec name="zone.RH_zone_jobs_type2"/>
                <variable_spec name="zone.RH_zone_jobs_type3"/>
                <variable_spec name="zone.RH_zone_jobs_type4"/>
                <variable_spec name="zone.RH_zone_jobs_type5"/>
                <variable_spec name="zone.RH_zone_jobs_type6"/>
                <variable_spec name="zone.RH_zone_jobs_type8"/>
                <variable_spec name="building.SC_dist_to_highway"/>
                <variable_spec name="building.SC_dist_to_station"/>
                <variable_spec name="building.RH_ln_surf"/>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="health" submodel_id="8" type="submodel">
              <description type="string">health</description>
              <variable_list type="variable_list">
                <variable_spec name="building.RH_zonal_income"/>
                <variable_spec name="job_x_building.RH_zone_jobs_same"/>
                <variable_spec name="zone.RH_zone_jobs_type1"/>
                <variable_spec name="zone.RH_zone_jobs_type2"/>
                <variable_spec name="zone.RH_zone_jobs_type3"/>
                <variable_spec name="zone.RH_zone_jobs_type4"/>
                <variable_spec name="zone.RH_zone_jobs_type5"/>
                <variable_spec name="zone.RH_zone_jobs_type6"/>
                <variable_spec name="zone.RH_zone_jobs_type7"/>
                <variable_spec name="building.SC_dist_to_highway"/>
                <variable_spec name="building.SC_dist_to_station"/>
                <variable_spec name="building.RH_ln_surf"/>
              </variable_list>
            </submodel>
          </submodel_group>
        </specification>
      </model>
      <model name="SC_household_relocation_model" type="model">
        <structure type="dictionary">
          <import hidden="True" name="import" type="dictionary">
            <class_module type="string">urbansim.models.household_relocation_model_creator</class_module>
            <class_name>HouseholdRelocationModelCreator</class_name>
          </import>
          <init type="dictionary">
            <name hidden="True" name="name" type="string">HouseholdRelocationModelCreator().get_model</name>
            <argument hidden="True" name="debuglevel" type="string">debuglevel</argument>
            <argument name="location_id_name" parser_action="quote_string" type="string">building_id</argument>
            <argument name="probabilities" parser_action="quote_string" type="string">opus_core.upc.rate_based_probabilities</argument>
          </init>
          <prepare_for_run type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_run</name>
            <argument name="rate_storage" type="string">base_cache_storage</argument>
            <argument name="rate_table" parser_action="quote_string" type="string" model_dependency_type="table">annual_relocation_rates_for_households</argument>
            <argument name="what" parser_action="quote_string" type="string">households</argument>
            <output hidden="True" name="output" type="string">hrm_resources</output>
          </prepare_for_run>
          <run type="dictionary">
            <output hidden="True" name="output" type="string">hrm_index</output>
            <argument name="agent_set" type="string" model_dependency_type="dataset">household</argument>
            <argument hidden="True" name="resources" type="string">hrm_resources</argument>
          </run>
        </structure>
      </model>
      <model name="SC_household_transition_model" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module>urbansim_parcel.models.household_transition_model</class_module>
            <class_name>HouseholdTransitionModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">HouseholdTransitionModel</name>
            <argument name="debuglevel" type="string">debuglevel</argument>
          </init>
          <prepare_for_run type="dictionary">
            <output name="output" type="string">(control_totals, characteristics)</output>
            <name name="name" type="string">prepare_for_run</name>
            <argument name="storage" type="string">base_cache_storage</argument>
          </prepare_for_run>
          <run type="dictionary">
            <argument name="characteristics" type="string">characteristics</argument>
            <argument name="household_set" type="string" model_dependency_type="dataset">household</argument>
            <argument name="person_set" type="string" model_dependency_type="dataset">person</argument>
            <argument convert_blank_to_none="True" name="control_totals" type="string">control_totals</argument>
            <argument name="year" type="string">year</argument>
          </run>
        </structure>
      </model>
      <model name="SC_household_location_choice_model" type="model">
        <dependencies type="list">['SC_household_relocation_model', 'SC_household_transition_model']</dependencies>
        <structure type="dictionary">
          <estimate type="dictionary">
            <output name="output" type="string">(alcm_coefficients, dummy)</output>
            <argument name="agent_set" type="string">household</argument>
            <argument name="agents_index" type="string">alcm_index</argument>
            <argument name="procedure" parser_action="quote_string" type="string">opus_core.bhhh_mnl_estimation</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
            <argument name="specification" type="string">alcm_specification</argument>
          </estimate>
          <import hidden="True" name="import" type="dictionary">
            <class_module type="string">urbansim.models.household_location_choice_model</class_module>
            <class_name>HouseholdLocationChoiceModel</class_name>
          </import>
          <init type="dictionary">
            <name hidden="True" name="name" type="string">HouseholdLocationChoiceModel</name>
            <argument name="sampler" parser_action="quote_string" type="string">opus_core.samplers.weighted_sampler</argument>
            <argument name="choices" parser_action="quote_string" type="string">urbansim.lottery_choices</argument>
            <argument name="estimation" parser_action="quote_string" type="string">opus_core.bhhh_wesml_mnl_estimation</argument>
            <argument hidden="True" name="dataset_pool" type="string">dataset_pool</argument>
            <argument name="location_set" type="string">building</argument>
            <argument name="sample_size_locations" type="integer">30</argument>
            <argument name="capacity_string" parser_action="quote_string" type="string">vacant_residential_units</argument>
            <argument name="estimation_weight_string" parser_action="quote_string" type="string">residential_units</argument>
            <argument name="number_of_units_string" parser_action="quote_string" type="string">residential_units</argument>
            <argument name="number_of_agents_string" parser_action="quote_string" type="string">number_of_households</argument>
            <argument name="location_id_string" parser_action="quote_string" type="string">building_id</argument>
            <argument name="submodel_string" parser_action="quote_string" type="string">urbansim.household.income_category</argument>
            <argument name="estimation_size_agents" type="float">0.5</argument>
            <argument name="filter" parser_action="quote_string" type="string">numpy.logical_and(urbansim_parcel.building.is_residential, numpy.logical_and(building.residential_units, building.sqft_per_unit))</argument>
            <argument name="run_config" type="string">Resources({'lottery_max_iterations': 7})</argument>
            <argument name="estimate_config" type="string">Resources({'wesml_sampling_correction_variable':'psrc_parcel.building.wesml_sampling_correction_variable'})</argument>
            <argument name="variable_package" parser_action="quote_string" type="string">urbansim_parcel</argument>
          </init>
          <prepare_for_estimate type="dictionary">
            <name name="name" type="string">prepare_for_estimate</name>
            <output name="output" type="string">(alcm_specification, alcm_index)</output>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">SC_household_location_choice_model_specification</argument>
            <argument name="agent_set" type="string">household</argument>
            <argument name="agents_for_estimation_storage" type="string">base_cache_storage</argument>
            <argument name="agents_for_estimation_table" parser_action="quote_string" type="string">households</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument convert_blank_to_none="True" name="index_to_unplace" type="string"/>
            <argument name="join_datasets" type="boolean">True</argument>
            <argument name="portion_to_unplace" type="string">1.0</argument>
            <argument convert_blank_to_none="True" name="filter" parser_action="quote_string" type="string"/>
            <argument convert_blank_to_none="True" name="location_id_variable" parser_action="quote_string" type="string">building_id</argument>
          </prepare_for_estimate>
          <prepare_for_run type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_run</name>
            <output hidden="True" name="output" type="string">(_specification, _coefficients)</output>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_table" parser_action="quote_string" type="string">SC_household_location_choice_model_coefficients</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">SC_household_location_choice_model_specification</argument>
          </prepare_for_run>
          <run type="dictionary">
            <argument name="agent_set" type="string">household</argument>
            <argument hidden="True" name="agents_index" type="string">hrm_index</argument>
            <argument name="chunk_specification" type="string">{'records_per_chunk':50000}</argument>
            <argument hidden="True" name="coefficients" type="string">_coefficients</argument>
            <argument hidden="True" name="data_objects" type="string">datasets</argument>
            <argument hidden="True" name="debuglevel" type="string">debuglevel</argument>
            <argument hidden="True" name="specification" type="string">_specification</argument>
            <argument name="maximum_runs" type="integer">10</argument>
          </run>
        </structure>
        <specification type="dictionary">
          <submodel hidden="Children" name="submodel" submodel_id="-2" type="submodel">
            <description type="string">A first model to run.</description>
            <variable_list type="variable_list">
              <variable_spec name="building.SC_acc_pt"/>
              <variable_spec name="building.SC_building_age"/>
              <variable_spec name="building.SC_building_is_pre_1941"/>
              <variable_spec name="building.SC_dist_to_station"/>
              <variable_spec name="building.SC_dist_to_zh_cbd"/>
              <variable_spec name="building.SC_jobs_G52_H_within_1km"/>
              <variable_spec name="household_x_building.SC_pop_dens_within_1km_X_young_hh_dummy"/>
              <variable_spec name="building.SC_rent_vacancy_per_municipality"/>
            </variable_list>
          </submodel>
        </specification>
        <estimation_config name="Estimation Configuration" parser_action="skip">
          <config_override config_name="models" name="Models to run before estimation" type="list">[]</config_override>
        </estimation_config>
      </model>
      <model name="SC_workplace_location_choice" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">urbansim.models.agent_location_choice_model</class_module>
            <class_name type="string">AgentLocationChoiceModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">AgentLocationChoiceModel</name>
            <argument name="location_set" type="string" model_dependency_type="dataset">job</argument>
            <argument name="sampler" parser_action="quote_string" type="string">opus_core.samplers.weighted_sampler</argument>
            <argument name="utilities" parser_action="quote_string" type="string">opus_core.linear_utilities</argument>
            <argument name="probabilities" parser_action="quote_string" type="string">opus_core.mnl_probabilities</argument>
            <argument name="choices" parser_action="quote_string" type="string">urbansim.lottery_choices</argument>
            <argument convert_blank_to_none="True" name="filter" parser_action="quote_string" type="string" model_dependency_type="variable">job.number_of_agents(person)==0</argument>
            <argument convert_blank_to_none="True" name="submodel_string" parser_action="quote_string" type="string" model_dependency_type="variable"/>
            <argument convert_blank_to_none="True" name="location_id_string" parser_action="quote_string" type="string" model_dependency_type="variable">job_id</argument>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
            <argument name="model_name" parser_action="quote_string" type="string">WorkplaceLocationChoiceModel</argument>
            <argument name="short_name" parser_action="quote_string" type="string">WLCM</argument>
            <argument name="variable_package" parser_action="quote_string" type="string">urbansim_parcel.person</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
            <argument name="run_config" type="dictionary">
              <key name="sample_size_locations" type="integer">30</key>
              <key convert_blank_to_none="True" name="sample_proportion_locations" type="integer"/>
              <key name="compute_capacity_flag" type="boolean">True</key>
              <key convert_blank_to_none="True" name="capacity_string" type="string" model_dependency_type="variable">(zurich_parcel.job.is_untaken_non_home_based_job).astype(int32)</key>
              <key convert_blank_to_none="True" name="number_of_units_string" type="string" model_dependency_type="variable">(job.disaggregate(building.building_type_id)&lt;&gt;1).astype(int32)</key>
              <key convert_blank_to_none="True" name="number_of_agents_string" type="string" model_dependency_type="variable">job.number_of_agents(person)</key>
              <key name="lottery_max_iterations" type="integer">10</key>
            </argument>
            <argument name="estimate_config" type="dictionary">
              <key convert_blank_to_none="True" name="weights_for_estimation_string" type="string" model_dependency_type="variable">SC_is_placed_job = (urbansim_parcel.job.zone_id&gt;0).astype(int32)</key>
              <key name="sample_size_locations" type="integer">30</key>
              <key convert_blank_to_none="True" name="sample_proportion_locations" type="integer"/>
              <key name="estimation_size_agents" type="float">0.1</key>
            </argument>
          </init>
          <prepare_for_estimate type="dictionary">
            <name name="name" type="string">prepare_for_estimate</name>
            <output name="output" type="string">(alcm_specification, wlcm_index)</output>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string" model_dependency_type="table">SC_workplace_location_choice_specification</argument>
            <argument name="agent_set" type="string" model_dependency_type="dataset">person</argument>
            <argument name="agents_for_estimation_storage" type="string">base_cache_storage</argument>
            <argument name="agents_for_estimation_table" parser_action="quote_string" type="string" model_dependency_type="table">persons</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument convert_blank_to_none="True" name="index_to_unplace" type="string"/>
            <argument name="join_datasets" type="boolean">True</argument>
            <argument name="portion_to_unplace" type="string">1.0</argument>
            <argument convert_blank_to_none="True" name="filter" parser_action="quote_string" type="string" model_dependency_type="variable">zurich_parcel.person.is_non_home_based_worker_with_job</argument>
            <argument convert_blank_to_none="True" name="location_id_variable" parser_action="quote_string" type="string" model_dependency_type="variable"/>
          </prepare_for_estimate>
          <estimate type="dictionary">
            <output name="output" type="string">(alcm_coefficients, dummy)</output>
            <argument name="agent_set" type="string" model_dependency_type="dataset">person</argument>
            <argument name="agents_index" type="string">wlcm_index</argument>
            <argument name="procedure" parser_action="quote_string" type="string">opus_core.bhhh_mnl_estimation</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
            <argument name="specification" type="string">alcm_specification</argument>
          </estimate>
          <prepare_for_run type="dictionary">
            <name name="name" type="string">prepare_for_run</name>
            <output name="output" type="string">(alcm_specification, alcm_coefficients)</output>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_table" parser_action="quote_string" type="string" model_dependency_type="table">SC_workplace_location_choice_coefficients</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string" model_dependency_type="table">SC_workplace_location_choice_specification</argument>
          </prepare_for_run>
          <run type="dictionary">
            <argument name="agent_set" type="string" model_dependency_type="dataset">person</argument>
            <argument convert_blank_to_none="True" name="agents_index" type="string"/>
            <argument name="agents_filter" parser_action="quote_string" type="string" model_dependency_type="variable">zurich_parcel.person.is_in_labour_market_without_job</argument>
            <argument name="chunk_specification" type="string">{'records_per_chunk':50000}</argument>
            <argument name="coefficients" type="string">alcm_coefficients</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
            <argument name="specification" type="string">alcm_specification</argument>
            <argument name="maximum_runs" type="integer">10</argument>
          </run>
        </structure>
        <specification type="dictionary">
          <submodel hidden="Children" name="submodel" submodel_id="-2" type="submodel">
            <description type="string">A sample submodel. In order to estimate the model, please add at least one variable.</description>
            <variable_list type="variable_list">
              <variable_spec name="person.SC_dist_to_job"/>
            </variable_list>
          </submodel>
        </specification>
        <estimation_config name="Estimation Configuration" parser_action="skip">
          <config_override config_name="models" name="Models to run before estimation" type="list">[]</config_override>
        </estimation_config>
      </model>
      <model name="SC_real_estate_price_model" type="model">
        <structure type="dictionary">
          <import hidden="True" name="import" type="dictionary">
            <class_module type="string">urbansim.models.real_estate_price_model</class_module>
            <class_name>RealEstatePriceModel</class_name>
          </import>
          <init type="dictionary">
            <name hidden="True" name="name" type="string">RealEstatePriceModel</name>
            <argument name="submodel_string" parser_action="quote_string" type="string" model_dependency_type="variable">building_type_id</argument>
            <argument config_name="outcome_attribute" name="dependent_variable" parser_action="quote_string" type="string" model_dependency_type="variable">ln(zurich_parcel.building.building_cost)</argument>
            <argument name="filter_attribute" parser_action="quote_string" type="string" model_dependency_type="variable">numpy.logical_or(zurich_parcel.building.is_building_type_1, zurich_parcel.building.is_building_type_5)</argument>
            <argument hidden="True" name="dataset_pool" type="string">dataset_pool</argument>
            <argument name="estimate_config" type="string">Resources({'save_predicted_values_and_errors':True})</argument>
          </init>
          <prepare_for_run type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_run</name>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string" model_dependency_type="table">SC_real_estate_price_model_specification</argument>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_table" parser_action="quote_string" type="string" model_dependency_type="table">SC_real_estate_price_model_coefficients</argument>
            <output hidden="True" name="output" type="string">(specification, coefficients)</output>
          </prepare_for_run>
          <run type="dictionary">
            <argument hidden="True" name="specification" type="string">specification</argument>
            <argument hidden="True" name="coefficients" type="string">coefficients</argument>
            <argument name="dataset" type="string" model_dependency_type="dataset">building</argument>
            <argument hidden="True" name="data_objects" type="string">datasets</argument>
            <argument name="run_config" type="string">Resources({'exclude_outliers_from_initial_error': True, 'outlier_is_less_than':3, 'outlier_is_greater_than': 7})</argument>
          </run>
          <prepare_for_estimate type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_estimate</name>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string" model_dependency_type="table">SC_real_estate_price_model_specification</argument>
            <argument name="filter_variable" parser_action="quote_string" type="string" model_dependency_type="variable">numpy.logical_or(zurich_parcel.building.is_building_type_1, zurich_parcel.building.is_building_type_5)</argument>
            <argument name="dataset" type="string" model_dependency_type="dataset">building</argument>
            <argument name="threshold" type="integer">0</argument>
            <output hidden="True" name="output" type="string">(specification, index)</output>
          </prepare_for_estimate>
          <estimate type="dictionary">
            <argument hidden="True" name="specification" type="string">specification</argument>
            <argument config_name="outcome_attribute" name="dependent_variable" parser_action="quote_string" type="string" model_dependency_type="variable">ln(zurich_parcel.building.building_cost)</argument>
            <argument name="dataset" type="string" model_dependency_type="dataset">building</argument>
            <argument hidden="True" name="index" type="string">index</argument>
            <argument hidden="True" name="data_objects" type="string">datasets</argument>
            <argument hidden="True" name="debuglevel" type="string">debuglevel</argument>
            <argument name="procedure" parser_action="quote_string" type="string">opus_core.estimate_linear_regression</argument>
            <output hidden="True" name="output" type="string">(coefficients, dummy)</output>
          </estimate>
        </structure>
        <specification type="dictionary" inherit_parent_values="False">
          <submodel hidden="Children" name="rent" submodel_id="1" type="submodel">
            <description type="string">A sample submodel. In order to estimate the model, please add at least one variable.</description>
            <variable_list type="variable_list">
              <variable_spec name="building.SC_acc_car"/>
              <variable_spec name="building.SC_acc_pt"/>
              <variable_spec name="building.SC_building_built21to30"/>
              <variable_spec name="building.SC_building_built81to90"/>
              <variable_spec name="building.SC_building_built91to05"/>
              <variable_spec name="building.SC_building_is_pre_1921"/>
              <variable_spec name="building.SC_highway_within_100m"/>
              <variable_spec name="building.SC_is_house"/>
              <variable_spec name="building.SC_ln_sqm_per_unit"/>
              <variable_spec name="building.SC_ln_taxlevel"/>
              <variable_spec name="building.SC_logit_foreigners_within_56_of_building"/>
              <variable_spec name="building.SC_logit_slope"/>
              <variable_spec name="building.SC_pop_ha_per_building"/>
              <variable_spec name="constant"/>
            </variable_list>
          </submodel>
        </specification>
      </model>
    </models>
    <estimation_config name="Estimation Configuration" config_name="estimation_config" type="dictionary">
      <datasets_to_preload parser_action="list_to_dictionary" type="selectable_list">
        <selectable name="building" type="selectable">True</selectable>
        <selectable name="household" type="selectable">True</selectable>
        <selectable name="job" type="selectable">True</selectable>
        <selectable name="parcel" type="selectable">True</selectable>
        <selectable name="buildings_for_estimation" type="selectable">False</selectable>
      </datasets_to_preload>
      <save_estimation_results type="boolean">True</save_estimation_results>
      <dataset_pool_configuration type="class">
        <argument name="package_order" type="list">['zurich_parcel', 'urbansim_parcel', 'urbansim', 'opus_core']</argument>
      </dataset_pool_configuration>
      <cache_directory name="" parser_action="prefix_with_opus_data_path" type="directory" field_identifier="Cache Directory" field_description="Directory for base_year cache, relative to OPUS_DATA_PATH or OPUS_HOME/data, e.g. seattle_parcel/base_year_data">zurich_li_parcel/base_year_data</cache_directory>
      <base_year name="" type="integer" field_identifier="Base Year">2000</base_year>
      <years type="tuple">
        <firstyear name="" type="integer" field_identifier="Base Year">2000</firstyear>
        <lastyear name="" type="integer" field_identifier="Base Year">2000</lastyear>
      </years>
    </estimation_config>
  </model_manager>
  <scenario_manager>
    <scenario name="test_run" type="scenario" executable="True">
      <advanced type="category">
        <model_system type="string">urbansim.model_coordinators.model_system</model_system>
        <debuglevel type="integer">4</debuglevel>
        <flush_variables type="boolean">False</flush_variables>
        <seed type="integer" convert_blank_to_none="True">None</seed>
        <dataset_pool_configuration type="class">
          <class_name hidden="True" type="string">DatasetPoolConfiguration</class_name>
          <class_module hidden="True" type="string">opus_core.configurations.dataset_pool_configuration</class_module>
          <argument name="package_order" type="list">['zurich_parcel','urbansim_parcel', 'urbansim', 'opus_core']</argument>
        </dataset_pool_configuration>
        <datasets_to_preload parser_action="list_to_dictionary" type="selectable_list">
          <selectable name="zone" type="selectable">False</selectable>
          <selectable name="household" type="selectable">True</selectable>
          <selectable name="building" type="selectable">True</selectable>
          <selectable name="buildings_for_estimation" type="selectable">False</selectable>
          <selectable name="parcel" type="selectable">True<package_name type="string">urbansim_parcel</package_name>
          </selectable>
          <selectable name="person" type="selectable">True<package_name type="string">zurich_parcel</package_name>
          </selectable>
          <selectable name="development_template" type="selectable">False<package_name type="string">urbansim_parcel</package_name>
          </selectable>
          <selectable name="development_template_component" type="selectable">False<package_name type="string">urbansim_parcel</package_name>
          </selectable>
          <selectable name="job" type="selectable">True</selectable>
          <selectable name="building_type" type="selectable">True<package_name type="string">zurich_parcel</package_name>
          </selectable>
          <selectable name="travel_data" type="selectable">False</selectable>
          <selectable name="development_event_history" type="selectable">False</selectable>
        </datasets_to_preload>
        <run_in_same_process type="boolean">False</run_in_same_process>
      </advanced>
      <cache_directory name="" parser_action="prefix_with_opus_data_path" type="directory" field_identifier="Cache Directory" field_description="Parent Directory for simulation runs, relative to OPUS_DATA_PATH or OPUS_HOME/data, e.g. seattle_parcel/base_year_data">zurich_li_parcel/base_year_data</cache_directory>
      <creating_baseyear_cache_configuration type="class">
        <class_name hidden="True" type="string">CreatingBaseyearCacheConfiguration</class_name>
        <class_module hidden="True" type="string">urbansim.configurations.creating_baseyear_cache_configuration</class_module>
        <argument name="cache_directory_root" config_name="cache_directory_root" parser_action="prefix_with_opus_data_path" type="directory" field_identifier="Scenario Runs Directory" field_description="Directory for base_year cache, relative to OPUS_DATA_PATH or OPUS_HOME/data, e.g. seattle_parcel/runs">zurich_li_parcel/runs</argument>
        <argument name="cache_from_database" type="boolean">False</argument>
        <argument name="baseyear_cache" type="class">
          <class_name hidden="True" type="string">BaseyearCacheConfiguration</class_name>
          <class_module hidden="True" type="string">opus_core.configurations.baseyear_cache_configuration</class_module>
          <argument name="existing_cache_to_copy" parser_action="prefix_with_opus_data_path" type="directory" field_identifier="Cache Directory" field_description="Parent Directory for simulation runs, relative to OPUS_DATA_PATH or OPUS_HOME/data, e.g. seattle_parcel/base_year_data">zurich_li_parcel/base_year_data</argument>
        </argument>
      </creating_baseyear_cache_configuration>
      <base_year name="" type="integer" field_identifier="Base Year">2000</base_year>
      <years_to_run config_name="years" type="tuple">
        <firstyear name="" type="integer" field_identifier="First Year of Simulation">2001</firstyear>
        <lastyear name="" type="integer" field_identifier="Last Year of Simulation">2002</lastyear>
      </years_to_run>
      <models_to_run config_name="models" type="selectable_list">
        <selectable return_value="SC_real_estate_price_model" type="selectable" name="SC_real_estate_price_model_1">False</selectable>
        <selectable return_value="SC_building_transition_model" type="selectable" name="SC_building_transition_model_1">False</selectable>
        <selectable return_value="SC_building_location_choice_model_from_template" type="selectable" name="SC_building_location_choice_model_from_template_1">False</selectable>
        <selectable return_value="SC_household_transition_model" type="selectable" name="SC_household_transition_model_1">False</selectable>
        <selectable return_value="SC_household_relocation_model" type="selectable" name="SC_household_relocation_model_1">False</selectable>
        <selectable return_value="SC_household_location_choice_model" type="selectable" name="SC_household_location_choice_model_1">False</selectable>
        <selectable return_value="new_employment_transition_model" type="selectable" name="new_employment_transition_model_1">True</selectable>
        <selectable return_value="employment_relocation_model" type="selectable" name="employment_relocation_model">True</selectable>
        <selectable name="employment_location_choice_model" type="selectable">True
          <group_members type="string">non_home_based</group_members>
        </selectable>
        <selectable return_value="SC_workplace_location_choice" type="selectable" name="SC_workplace_location_choice_1">False</selectable>
      </models_to_run>
    </scenario>
  </scenario_manager>
  <results_manager>
    <indicator_batches name="Indicator Batches" setexpanded="True" type="group">
      <indicator_batch name="hh_per_ha">
        <batch_visualization hidden="Children" type="batch_visualization" name="pop_ha_per_bldg">
          <settings>
            <setting name="mapnik_bucket_labels">range_labels</setting>
            <setting name="mapnik_legend_lower_left">6.5,0.5</setting>
            <setting name="mapnik_map_lower_left">0.5,0.5</setting>
            <setting name="mapnik_page_dims">8.5,5.5</setting>
            <setting name="mapnik_bucket_colors">#e0eee0, #c7e9c0, #a1d99b, #7ccd7c, #74c476, #41ab5d, #238b45, #006400, #00441b, #00340b</setting>
            <setting name="mapnik_map_upper_right">6.0,5.0</setting>
            <setting name="mapnik_resolution">96</setting>
            <setting name="mapnik_bucket_ranges">linear_scale</setting>
            <setting name="mapnik_legend_upper_right">6.9,5.0</setting>
          </settings>
          <visualization_type>mapnik_animated_map</visualization_type>
          <indicators>['SC_pop_ha_per_zone']</indicators>
          <output_type>mapnik_animated_map</output_type>
          <dataset_name>zone</dataset_name>
        </batch_visualization>
      </indicator_batch>
    </indicator_batches>
  </results_manager>
</opus_project>

