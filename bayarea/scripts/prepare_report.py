# Prepare an output report
from optparse import OptionParser
import sqlite3
import sys, os
import urbansim.tools.make_indicators
import shutil
from lxml import etree
import textwrap

def main():
    parser = OptionParser()
    parser.add_option("-x", "--xml-configuration", dest="xml_configuration", default=None,
                      help="File name of xml configuration")
    parser.add_option("-y", "--years", dest="years",
                      help="List of years to make indicators for (e.g., range(2010,2012)).")
    parser.add_option("-o", "--output-directory", dest="output",
                      help="Output directory for results")
    parser.add_option("-c", "--cache-directory", dest="cache_directory", default=None,
                      help="Directory of UrbanSim cache to make indicators from (Defaults to most recent)")
    parser.add_option("-s", "--scenario", dest="scenario", default=None,
                      help="Scenario (Defaults to most recent)")
    (options, args) = parser.parse_args()

    if not options.xml_configuration or \
           not options.years or \
           not options.output:
        print "ERROR: -x, -y, and -o are required options"
        sys.exit(1)

    tree = etree.parse(open(options.xml_configuration))
    project = tree.xpath('/opus_project/general/project_name')[0].text
    if options.cache_directory or options.scenario:
        cache_directory = options.cache_directory
        scenario = options.scenario
        if not cache_directory or not scenario:
            print "ERROR: cache directory and scenario must both be specified"
            sys.exit(1)
    elif os.getenv("OPUS_HOME"):
        # Start by opening up the sqlite db
        db_path = os.getenv("OPUS_HOME")
        db_path = os.path.join(db_path, "local_databases", project, "services.txt")
        conn = sqlite3.connect(db_path)
        c = conn.cursor()
        c.execute("SELECT max(date_time), cache_directory, scenario_name FROM run_activity")
        results = c.fetchone()
        cache_directory = results[1]
        scenario = results[2]
    else:
        print "Couldn't figure out scenario and cache directory"
        sys.exit(1)

    # prepare the report staging directory
    if os.path.exists(options.output):
        shutil.rmtree(options.output)
    os.makedirs(options.output)
    f = open(os.path.join(options.output, "README.txt"), 'w')
    text = "\n".join(textwrap.wrap(
"""This report has been auto-generated by urbansim for the following model run:
"""
)) + """
project: %s
scenario: %s
cached data: %s
""" % (project, scenario, os.sep.join(cache_directory.split(os.sep)[-3:]))
    f.write(text.replace("\n", "\r\n"))
    f.close()

    # prepare the indicators
    urbansim.tools.make_indicators.run(options.xml_configuration,
                                       "regional_indicators",
                                       None,
                                       cache_directory,
                                       options.years)
    shutil.copy(os.path.join(cache_directory, "indicators", "regional_indicators.xls"), options.output)

if __name__ == '__main__':
    try:
        main()
    except:
        print "report generation failed"
        sys.exit(1)
