# Prepare an output report
from optparse import OptionParser
import sqlite3
import sys, os
import urbansim.tools.make_indicators
import shutil
from lxml import etree
import textwrap
import traceback

def main():
    parser = OptionParser()
    parser.add_option("-x", "--xml-configuration", dest="xml_configuration", default=None,
                      help="File name of xml configuration")
    parser.add_option("-y", "--years", dest="years",
                      help="List of years to make indicators for (e.g., range(2010,2012)).")
    parser.add_option("-o", "--output-directory", dest="output",
                      help="Output directory for results")
    parser.add_option("-c", "--cache-directory", dest="cache_directory", default=None,
                      help="Directory of UrbanSim cache to make indicators from (Defaults to most recent successful run)")
    parser.add_option("-s", "--scenario", dest="scenario", default=None,
                      help="Scenario (Defaults to most recent)")
    (options, args) = parser.parse_args()

    if not options.xml_configuration or \
           not options.years or \
           not options.output:
        print "ERROR: -x, -y, and -o are required options"
        sys.exit(1)

    tree = etree.parse(open(options.xml_configuration))
    project = tree.xpath('/opus_project/general/project_name')[0].text
    if options.cache_directory or options.scenario:
        cache_directory = options.cache_directory
        scenario = options.scenario
        if not cache_directory or not scenario:
            print "ERROR: cache directory and scenario must both be specified"
            sys.exit(1)
        try:
            run_id = cache_directory.split(os.sep)[-1].split('.')[0].split('_')[1]
        except:
            print "Failed to parse run ID from cache directory name"
            sys.exit(1)
    elif os.getenv("OPUS_HOME"):
        # Start by opening up the sqlite db
        db_path = os.getenv("OPUS_HOME")
        db_path = os.path.join(db_path, "local_databases", project, "services.txt")
        conn = sqlite3.connect(db_path)
        c = conn.cursor()
        c.execute("SELECT max(date_time), cache_directory, scenario_name, run_id FROM run_activity where status='done'")
        results = c.fetchone()
        cache_directory = results[1]
        scenario = results[2]
        # Hudson appends "_hudson" to the scenario names.  Peel this off if
        # it's present.
        scenario = scenario.replace("_hudson", "")
        run_id = str(results[3])
    else:
        print "Couldn't figure out scenario and cache directory"
        sys.exit(1)

    # prepare the report staging directory
    output_dir = os.path.join(options.output, scenario, "run_" + run_id)
    if os.path.exists(output_dir):
        shutil.rmtree(output_dir)
    os.makedirs(output_dir)
    f = open(os.path.join(output_dir, "README.txt"), 'w')
    text = "\n".join(textwrap.wrap(
"""This report has been auto-generated by urbansim for the following model run:
"""
)) + """
project: %s
scenario: %s
cached data: %s
""" % (project, scenario, os.sep.join(cache_directory.split(os.sep)[-3:]))
    comment = os.getenv("HUDSON_COMMENT")
    if comment:
        text += "\n".join(textwrap.wrap("comment: " + comment)) + "\n"
    f.write(text.replace("\n", "\r\n"))
    f.close()

    # prepare the indicators
    shutil.rmtree(os.path.join(output_dir, "indicators"), True)
    for indicator_batch in ["regional_indicators", "county_indicators",
                            "diagnostic_indicators", "zone_data"]:
        urbansim.tools.make_indicators.run(options.xml_configuration,
                                           indicator_batch,
                                           None,
                                           cache_directory,
                                           options.years)

    my_location = os.path.split(__file__)[0]
    pdf_script = os.path.join(my_location, "summarize_county_indicators.R")
    years = eval(options.years)
    cmd = "Rscript %s %s %d %d" % (pdf_script,
                                   os.path.join(cache_directory, "indicators"),
                                   years[0], years[-1])
    print "Summarizing county indicators: " + cmd
    if os.system(cmd) != 0:
        print "ERROR: Failed to generate county indicators"
        sys.exit(1)

    shutil.copytree(os.path.join(cache_directory, "indicators"),
                    os.path.join(output_dir, "indicators"),
                    ignore=shutil.ignore_patterns("*_stored_data*", "*.log"))

if __name__ == '__main__':
    try:
        main()
    except Exception, e:
        tb = traceback.format_exc()
        print tb
        print "report generation failed"
        sys.exit(1)
