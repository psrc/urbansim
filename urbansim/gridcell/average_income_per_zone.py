# Opus/UrbanSim urban simulation software.
# Copyright (C) 2005-2009 University of Washington
# See opus_core/LICENSE 

from opus_core.variables.variable import Variable
from variable_functions import my_attribute_label
from urbansim.functions import attribute_label

class average_income_per_zone(Variable):
    """Replicates an average income for a given zone_id across a gridcell in that zone"""

    zone_average_income = "average_income"
    zone_id = "zone_id"
    
    def dependencies(self):
        return [attribute_label("zone", self.zone_average_income), 
                attribute_label("zone", "zone_id"), 
                my_attribute_label(self.zone_id)]
        
    def compute(self, dataset_pool):
        zones = dataset_pool.get_dataset('zone')
        return self.get_dataset().get_join_data(zones, self.zone_average_income)


from opus_core.tests import opus_unittest
from opus_core.tests.utils.variable_tester import VariableTester
from numpy import array
class Tests(opus_unittest.OpusTestCase):
    #in this example, the "zone_id" is actually auto-generated by variable_test_toolbox, 
    #enumeration beginning with 1.
    
    def test_my_inputs(self):
        average_income = array([1000.0, 5000.0, 10000.0])
        locations_in_zoneid = array([1, 1, 3, 2, 2])
        
        tester = VariableTester(
            __file__,
            package_order=['urbansim'],
            test_data={
                "zone":{ 
                    "zone_id": array([1,2,3]),
                    "average_income":average_income
                    }, 
                "gridcell":{ 
                    "grid_id": array([1,2,3,4,5]),
                    "zone_id":locations_in_zoneid
                }
            }
        )
        
        should_be = array([1000.0, 1000.0, 10000.0, 5000.0, 5000.0])        
        tester.test_is_equal_for_variable_defined_by_this_module(self, should_be)


if __name__=='__main__':
    opus_unittest.main()