{\rtf1\adeflang1025\ansi\ansicpg1252\uc1\adeff0\deff0\stshfdbch0\stshfloch0\stshfhich0\stshfbi0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}{\f10\fnil\fcharset2\fprq2{\*\panose 05000000000000000000}Wingdings;}{\f37\fswiss\fcharset0\fprq2{\*\panose 020b0602030504020204}Lucida Sans Unicode;}
{\f38\froman\fcharset238\fprq2 Times New Roman CE;}{\f39\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f41\froman\fcharset161\fprq2 Times New Roman Greek;}{\f42\froman\fcharset162\fprq2 Times New Roman Tur;}
{\f43\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f44\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\f45\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f46\froman\fcharset163\fprq2 Times New Roman (Vietnamese);}
{\f58\fmodern\fcharset238\fprq1 Courier New CE;}{\f59\fmodern\fcharset204\fprq1 Courier New Cyr;}{\f61\fmodern\fcharset161\fprq1 Courier New Greek;}{\f62\fmodern\fcharset162\fprq1 Courier New Tur;}
{\f63\fbidi \fmodern\fcharset177\fprq1 Courier New (Hebrew);}{\f64\fbidi \fmodern\fcharset178\fprq1 Courier New (Arabic);}{\f65\fmodern\fcharset186\fprq1 Courier New Baltic;}{\f66\fmodern\fcharset163\fprq1 Courier New (Vietnamese);}
{\f408\fswiss\fcharset238\fprq2 Lucida Sans Unicode CE;}{\f409\fswiss\fcharset204\fprq2 Lucida Sans Unicode Cyr;}{\f411\fswiss\fcharset161\fprq2 Lucida Sans Unicode Greek;}{\f412\fswiss\fcharset162\fprq2 Lucida Sans Unicode Tur;}
{\f413\fbidi \fswiss\fcharset177\fprq2 Lucida Sans Unicode (Hebrew);}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;
\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{
\ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs24\alang1025 \ltrch\fcs0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext0 \styrsid15286197 Normal;}{\*\cs10 \additive \ssemihidden 
Default Paragraph Font;}{\*\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\trcbpat1\trcfpat1\tblind0\tblindtype3\tscellwidthfts0\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv 
\ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs20 \ltrch\fcs0 \fs20\lang1024\langfe1024\cgrid\langnp1024\langfenp1024 \snext11 \ssemihidden Normal Table;}}
{\*\latentstyles\lsdstimax156\lsdlockeddef0}{\*\listtable{\list\listtemplateid701145528\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\leveltemplateid1644181032
\'01\u-3986 ?;}{\levelnumbers;}\loch\af10\hich\af10\dbch\af0\fbias0 \fi-360\li720\jclisttab\tx720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\lvltentative\levelspace0\levelindent0{\leveltext
\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0 \fi-360\li1440\jclisttab\tx1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\lvltentative\levelspace0\levelindent0{\leveltext\leveltemplateid67698693
\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0 \fi-360\li2160\jclisttab\tx2160\lin2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\lvltentative\levelspace0\levelindent0{\leveltext\leveltemplateid67698689
\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li2880\jclisttab\tx2880\lin2880 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\lvltentative\levelspace0\levelindent0{\leveltext\leveltemplateid67698691
\'01o;}{\levelnumbers;}\f2\fbias0 \fi-360\li3600\jclisttab\tx3600\lin3600 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\lvltentative\levelspace0\levelindent0{\leveltext\leveltemplateid67698693
\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0 \fi-360\li4320\jclisttab\tx4320\lin4320 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\lvltentative\levelspace0\levelindent0{\leveltext\leveltemplateid67698689
\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li5040\jclisttab\tx5040\lin5040 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\lvltentative\levelspace0\levelindent0{\leveltext\leveltemplateid67698691
\'01o;}{\levelnumbers;}\f2\fbias0 \fi-360\li5760\jclisttab\tx5760\lin5760 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\lvltentative\levelspace0\levelindent0{\leveltext\leveltemplateid67698693
\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0 \fi-360\li6480\jclisttab\tx6480\lin6480 }{\listname ;}\listid143007505}}{\*\listoverridetable{\listoverride\listid143007505\listoverridecount0\ls1}}{\*\revtbl {Unknown;}}{\*\rsidtbl \rsid4605\rsid90202\rsid162019\rsid205297
\rsid222180\rsid226680\rsid481454\rsid670467\rsid989635\rsid1008276\rsid1058578\rsid1137319\rsid1142264\rsid1203528\rsid1445758\rsid1447044\rsid1450784\rsid1469844\rsid1526753\rsid1579276\rsid1580549\rsid1640642\rsid1649517\rsid1796003\rsid1848762
\rsid1932242\rsid1974879\rsid1984198\rsid2098316\rsid2100081\rsid2233261\rsid2240546\rsid2258668\rsid2369003\rsid2390969\rsid2435125\rsid2439283\rsid2635245\rsid2650350\rsid2651643\rsid2688087\rsid2715238\rsid2717267\rsid2894927\rsid2958426\rsid2968739
\rsid3033071\rsid3038827\rsid3174057\rsid3178455\rsid3211356\rsid3410521\rsid3411156\rsid3412434\rsid3416343\rsid3436647\rsid3628933\rsid3699970\rsid3700333\rsid3743451\rsid3884413\rsid3938335\rsid3939742\rsid4076929\rsid4199846\rsid4225940\rsid4475064
\rsid4604976\rsid4613870\rsid4675942\rsid4866945\rsid4879197\rsid5056442\rsid5137307\rsid5142895\rsid5254058\rsid5314190\rsid5325654\rsid5332718\rsid5446566\rsid5456763\rsid5472056\rsid5531648\rsid5585636\rsid5656146\rsid5709292\rsid5773327\rsid5861540
\rsid5929861\rsid5992149\rsid6041791\rsid6050799\rsid6058245\rsid6118689\rsid6186157\rsid6239833\rsid6306597\rsid6371677\rsid6384229\rsid6424963\rsid6711562\rsid6902286\rsid6974015\rsid7044004\rsid7105567\rsid7149461\rsid7284334\rsid7306301\rsid7363926
\rsid7406777\rsid7543828\rsid7556331\rsid7621338\rsid7692618\rsid7742482\rsid7753342\rsid7764038\rsid7805623\rsid7829230\rsid7947698\rsid7947989\rsid7996542\rsid8002446\rsid8150008\rsid8264655\rsid8282662\rsid8454745\rsid8474061\rsid8523425\rsid8525824
\rsid8600865\rsid8717575\rsid8794501\rsid8990367\rsid9133605\rsid9141733\rsid9189900\rsid9306132\rsid9308412\rsid9326732\rsid9332813\rsid9337717\rsid9380619\rsid9441021\rsid9508949\rsid9534396\rsid9638447\rsid9729956\rsid9765204\rsid10045529\rsid10182610
\rsid10231556\rsid10252639\rsid10304692\rsid10381176\rsid10424364\rsid10518139\rsid10687753\rsid10694925\rsid10779005\rsid10881918\rsid10967657\rsid11031962\rsid11284328\rsid11286429\rsid11411917\rsid11415288\rsid11479922\rsid11483792\rsid11534619
\rsid11632216\rsid11668356\rsid11687943\rsid11695384\rsid11748393\rsid11807502\rsid11862754\rsid11894464\rsid11940529\rsid12004003\rsid12265508\rsid12269193\rsid12336391\rsid12338904\rsid12344072\rsid12401855\rsid12405315\rsid12476020\rsid12604074
\rsid12612328\rsid12715779\rsid12716399\rsid12734943\rsid12805623\rsid12848332\rsid12860469\rsid12864281\rsid12913938\rsid12928372\rsid12935610\rsid13122657\rsid13125805\rsid13182087\rsid13199804\rsid13245447\rsid13268632\rsid13704689\rsid13718137
\rsid13786036\rsid13787799\rsid13839470\rsid13965430\rsid13987784\rsid14057344\rsid14098776\rsid14158001\rsid14318027\rsid14318564\rsid14370649\rsid14428739\rsid14448210\rsid14488959\rsid14489615\rsid14762123\rsid14838950\rsid14885334\rsid14886292
\rsid14890678\rsid15009829\rsid15030253\rsid15079939\rsid15158385\rsid15272209\rsid15275299\rsid15286197\rsid15296370\rsid15297151\rsid15486563\rsid15609997\rsid15626838\rsid15627293\rsid15683689\rsid15745618\rsid15803371\rsid15820262\rsid15824337
\rsid15872732\rsid16000872\rsid16056371\rsid16084837\rsid16087855\rsid16134979\rsid16322011\rsid16391921\rsid16451454\rsid16478876\rsid16532135\rsid16541582}{\*\generator Microsoft Word 11.0.8125;}{\info
{\title -- ----------------------------------------------------------------------}{\operator abjorn}{\creatim\yr2007\mo2\dy28\hr16\min15}{\revtim\yr2007\mo4\dy4\hr12\min13}{\version23}{\edmins21601}{\nofpages35}{\nofwords19161}{\nofchars109223}
{\nofcharsws128128}{\vern24611}{\*\password 00000000}}{\*\xmlnstbl {\xmlns1 http://schemas.microsoft.com/office/word/2003/wordml}{\xmlns2 urn:schemas-microsoft-com:office:smarttags}}
\paperw12240\paperh15840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect 
\widowctrl\ftnbj\aenddoc\donotembedsysfont0\donotembedlingdata1\grfdocevents0\validatexml0\showplaceholdtext0\ignoremixedcontent0\saveinvalidxml0\showxmlerrors0\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\horzdoc\dghspace120\dgvspace120
\dghorigin1701\dgvorigin1984\dghshow0\dgvshow3\jcompress\viewkind4\viewscale150\nolnhtadjtbl\rsidroot14890678 \fet0{\*\wgrffmtfilter 013f}\ilfomacatclnup0\ltrpar \sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang 
{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}
{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl9
\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}\pard\plain \ltrpar\ql \li0\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0\pararsid2098316 \rtlch\fcs1 \af0\afs24\alang1025 \ltrch\fcs0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 
{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid2098316\charrsid2098316 -- ----------------------------------------------------------------------
\par -- DEFINE INITIAL TABLES
\par -- ----------------------------------------------------------------------
\par 
\par --
\par -- INITIALIZE
\par --
\par 
\par FLUSH TABLES;
\par CREATE DATABASE IF NOT EXISTS workspace;
\par USE workspace;
\par 
\par --
\par -- BUILDINGS
\par --
\par 
\par DROP TABLE IF EXISTS all_buildings;
\par 
\par CREATE TABLE all_buildings (
\par   all_buildings_id INT(10) unsigned NOT NULL AUTO_INCREMENT,
\par   County VARCHAR(5) NULL,
\par   AccountID VARCHAR(25) NULL,
\par   BuildingID VARCHAR(25) NULL,
\par   BuildingFlag INT(3) NOT NULL DEFAULT '0',
\par   OutbuildingFlag INT(3) NOT NULL DEFAULT '0',
\par   BuildingUseCode VARCHAR(50) NOT NULL DEFAULT '0',
\par   BldgSF INT(11) NOT NULL DEFAULT '0',
\par   Stories DOUBLE(5,2) NOT NULL DEFAULT '0',
\par   Footprint INT(11) NOT NULL DEFAULT '0',
\par   YearBuilt INT(11) NOT NULL DEFAULT '0',
\par   BldgQuality VARCHAR(50) NOT NULL DEFAULT '0',
\par   BldgCondition VARCHAR(50) NOT NULL DEFAULT '0',
\par   NumberofUnits INT(11) NOT NULL DEFAULT '0',
\par   Bedrooms INT(3) NOT NULL DEFAULT '0',
\par   BathFull INT(3) NOT NULL DEFAULT '0',
\par   Bath3Qtr INT(3) NOT NULL DEFAULT '0',
\par   BathHalf INT(3) NOT NULL DEFAULT '0',
\par   Bathrooms DOUBLE(5,2) NOT NULL DEFAULT '0.00',
\par   BuildingUseDescription VARCHAR(100) NOT NULL DEFAULT '0',
\par   GeneralCategory VARCHAR(50) NOT NULL DEFAULT '0',
\par   GeneralCategoryCode INT(5) NOT NULL DEFAULT '0',
\par   BuildingType INT(1) NOT NULL DEFAULT '0', 
\par   BuildingTypeDesc VARCHAR(50) NOT NULL DEFAULT '0',
\par   ID_SUBPARCEL VARCHAR(30) NULL,
\par   PRIMARY KEY (all_buildings_id),
\par   INDEX id_buildings (ID_SUBPARCEL)
\par )
\par ENGINE = MyISAM
\par ROW_FORMAT = Dynamic
\par CHARACTER SET latin1 COLLATE latin1_swedish_ci;
\par 
\par --
\par -- SUBPARCELS
\par --
\par 
\par DROP TABLE IF EXISTS all_subparcels;
\par 
\par CREATE TABLE all_subparcels (
\par   all_subparcels_id INT(10) unsigned NOT NULL AUTO_INCREMENT,
\par   {\*\xmlopen\xmlns2{\factoidname PlaceType}}{\*\xmlopen\xmlns2{\factoidname place}}County{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname PlaceName}}CHAR{\*\xmlclose}{\*\xmlclose}(3) NULL,
\par   PARCEL_ID VARCHAR(25) NULL,
\par   AccountID VARCHAR(25) NULL,
\par   SubparcelFlag INT(1) NULL,
\par   NumberofBuildings INT(3) NOT NULL DEFAULT '0',
\par   NumberofOutbuildings INT(3) NOT NULL DEFAULT '0',
\par   LandValue INT(12) NOT NULL DEFAULT 0,
\par   ImprValue INT(12) NOT NULL DEFAULT 0,
\par   TaxExempt INT(5) NOT NULL DEFAULT 0,
\par   }{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\lang1046\langfe1033\langnp1046\insrsid2098316\charrsid2098316 ID_SUBPARCEL VARCHAR(28) NULL,
\par   ID_PARCEL VARCHAR(28) NULL,
\par   }{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid2098316\charrsid2098316 PRIMARY KEY (all_subparcels_id),
\par   }{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\lang1046\langfe1033\langnp1046\insrsid2098316\charrsid2098316 INDEX id_subparcel (ID_SUBPARCEL),
\par   INDEX id_parcel (ID_PARCEL)
\par }{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid2098316\charrsid2098316 )
\par ENGINE = MyISAM
\par ROW_FORMAT = Dynamic
\par CHARACTER SET latin1 COLLATE latin1_swedish_ci;
\par 
\par --
\par -- PARCELS
\par --
\par 
\par DROP TABLE IF EXISTS all_parcels;
\par CREATE TABLE all_parcels (
\par   all_parcels_id INT(10) unsigned NOT NULL AUTO_INCREMENT,
\par   {\*\xmlopen\xmlns2{\factoidname PlaceType}}{\*\xmlopen\xmlns2{\factoidname place}}County{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname PlaceName}}CHAR{\*\xmlclose}{\*\xmlclose}(3) NULL,
\par   PARCEL_ID VARCHAR(25) NULL,
\par   PLAT_ID VARCHAR(10) NULL,
\par   NumberofAccounts INT(11) NOT NULL DEFAULT '0',
\par   LandValueParcel INT(12) NOT NULL DEFAULT 0,
\par   ImprValueParcel INT(12) NOT NULL DEFAULT 0,
\par   TaxExemptParcel INT(5) NOT NULL DEFAULT 0,
\par   Jurisdiction VARCHAR(50) NOT NULL DEFAULT '0',
\par   Size_Acres DOUBLE(22,2) NOT NULL DEFAULT '0.00',
\par   Size_SF INT(11) NOT NULL DEFAULT '0',
\par   Land_Use VARCHAR(50) NOT NULL,
\par   Zoning VARCHAR(50) NOT NULL,
\par   LandUseDescription VARCHAR(100) NOT NULL DEFAULT '0',
\par   GenericLandUse1 VARCHAR(50) NOT NULL DEFAULT '0',
\par   GenericLandUse2 VARCHAR(50) NOT NULL DEFAULT '0',
\par   res_nonres VARCHAR(10) NOT NULL DEFAULT '0',
\par   ID_PARCEL VARCHAR(28) NULL,
\par   ID_PLAT VARCHAR(13) NULL,
\par   PRIMARY KEY (all_parcels_id),
\par   }{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\lang1046\langfe1033\langnp1046\insrsid2098316\charrsid2098316 INDEX id_parcel (ID_PARCEL)
\par }{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid2098316\charrsid2098316 )
\par ENGINE = MyISAM
\par ROW_FORMAT = Dynamic
\par CHARACTER SET latin1 COLLATE latin1_swedish_ci;
\par 
\par 
\par --
\par -- SALES
\par --
\par 
\par DROP TABLE IF EXISTS all_sales;
\par CREATE TABLE all_sales (
\par   all_sales_id INT(10) unsigned NOT NULL AUTO_INCREMENT,
\par   {\*\xmlopen\xmlns2{\factoidname PlaceType}}{\*\xmlopen\xmlns2{\factoidname place}}County{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname PlaceName}}CHAR{\*\xmlclose}{\*\xmlclose}(3) NULL,
\par   AccountID VARCHAR(25) NULL,
\par   ExciseTaxNumber VARCHAR(25) NULL,
\par   NumberofAccounts INT(5) NOT NULL DEFAULT '0',
\par   SaleDate DATE NULL,
\par   SalePrice INT(11) NOT NULL DEFAULT '0',
\par   PPropPrice INT(11) NOT NULL DEFAULT '0',
\par   BuyerName VARCHAR(255) NOT NULL DEFAULT '0',
\par   SellerName VARCHAR(255) NOT NULL DEFAULT '0',
\par   DeedType VARCHAR(50) NOT NULL DEFAULT '0',
\par   SaleWarnings VARCHAR(50) NOT NULL DEFAULT '0',
\par   InstrumentDescr VARCHAR(50) NOT NULL DEFAULT '0',
\par   ValidInstrument INT(11) NOT NULL DEFAULT '0',
\par   SWarnDescr VARCHAR(150) NOT NULL DEFAULT '0',
\par   ValidSale INT(1) NOT NULL DEFAULT '0',
\par   ID_SUBPARCEL VARCHAR(28) NULL,
\par   ID_SALE VARCHAR(53) NULL,
\par   PRIMARY KEY (all_sales_id),
\par   INDEX id_sales (ID_SALE),
\par   }{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\lang1046\langfe1033\langnp1046\insrsid2098316\charrsid2098316 INDEX id_subparcel (ID_SUBPARCEL)
\par }{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid2098316\charrsid2098316 )
\par ENGINE = MyISAM
\par ROW_FORMAT = Dynamic
\par CHARACTER SET latin1 COLLATE latin1_swedish_ci;
\par 
\par FLUSH TABLES;
\par 
\par -- ----------------------------------------------------------------------
\par 
\par 
\par 
\par 
\par -- ----------------------------------------------------------------------
\par -- KING COUNTY DATA
\par -- ----------------------------------------------------------------------
\par 
\par --
\par -- Copy raw data to working directory
\par --
\par 
\par FLUSH TABLES;
\par USE workspace;
\par 
\par CREATE TEMPORARY TABLE king_aptcomplex_temp
\par SELECT * FROM king_20060127.extr_aptcomplex;
\par 
\par CREATE TEMPORARY TABLE king_commbldg_temp
\par SELECT * FROM king_20060127.extr_commbldg;
\par 
\par CREATE TEMPORARY TABLE king_resbldg_temp
\par SELECT * FROM king_20060127.extr_resbldg;
\par 
\par CREATE TEMPORARY TABLE king_condounit_temp
\par SELECT * FROM king_20060127.extr_condounit;
\par 
\par CREATE TEMPORARY TABLE king_condocomplex_temp
\par SELECT * FROM king_20060127.extr_condocomplex;
\par 
\par CREATE TEMPORARY TABLE king_parcel_temp
\par SELECT * FROM king_20060127.extr_parcel;
\par 
\par CREATE TEMPORARY TABLE king_sales_temp
\par SELECT * FROM king_20060127.extr_rpsale; 
\par 
\par CREATE TEMPORARY TABLE king_account_temp
\par SELECT * FROM king_20060127.extr_rpacct_noname;
\par 
\par CREATE TEMPORARY TABLE spatialdata
\par SELECT * FROM spatial.spatial_2005;
\par 
\par CREATE TEMPORARY TABLE building_type_king
\par SELECT * FROM general.building_type_reclass_2005 {\*\xmlopen\xmlns2{\factoidname PlaceName}}{\*\xmlopen\xmlns2{\factoidname place}}WHERE{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname PlaceType}}County{\*\xmlclose}{\*\xmlclose} = '033';
\par 
\par CREATE INDEX building_king USING BTREE ON building_type_king (building_use_code);
\par 
\par CREATE INDEX id_spatial USING BTREE ON spatialdata (ID_PARCEL);
\par 
\par CREATE INDEX id_account USING {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}BTREE{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}ON{\*\xmlclose}{\*\xmlclose} king_condounit_temp (Major);
\par 
\par CREATE INDEX id_account USING {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}BTREE{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}ON{\*\xmlclose}{\*\xmlclose} king_condocomplex_temp (Major);
\par 
\par --
\par -- Assembly of building data 
\par --
\par 
\par -- Organize apartment complex data
\par 
\par CREATE TEMPORARY TABLE king_aptcomplex_presort
\par SELECT 
\par CONCAT(a.Major, a.Minor) AS AccountID, 
\par a.Condition AS BldgCondition, 
\par a.NbrUnits AS NumberofUnits
\par FROM king_aptcomplex_temp a;
\par 
\par ALTER TABLE king_aptcomplex_presort 
\par MODIFY COLUMN AccountID VARCHAR(25) 
\par CHARACTER SET latin1 COLLATE latin1_swedish_ci;
\par 
\par CREATE INDEX id_account USING BTREE ON king_aptcomplex_presort (AccountID);
\par 
\par -- Organize commercial building data
\par 
\par CREATE TEMPORARY TABLE king_commbldg_presort
\par SELECT 
\par '033' AS County, 
\par CONCAT(e.Major, e.Minor) AS AccountID, 
\par e.BldgNbr AS BuildingID, 
\par 1 AS BuildingFlag, 
\par 0 AS OutbuildingFlag, 
\par e.PredominantUse AS BuildingUseCode, 
\par e.BldgGrossSqFt AS BldgSF, 
\par e.NbrStories AS Stories, 
\par IF(e.BldgGrossSqFt IS NOT NULL AND e.NbrStories IS NOT NULL, e.BldgGrossSqFt /e.NbrStories, 0) AS Footprint,
\par e.YrBuilt AS YearBuilt, 
\par e.BldgQuality, 
\par e.NbrBldgs AS NumberofBuildings, 
\par 0 AS Bedrooms, 
\par 0 AS BathFull, 
\par 0 AS Bath3Qtr, 
\par 0 AS BathHalf, 
\par 0 AS Bathrooms
\par FROM king_commbldg_temp e
\par WHERE Minor <> '0000';
\par 
\par CREATE INDEX id_account USING BTREE ON king_commbldg_presort (AccountID);
\par 
\par -- Residential building data
\par 
\par CREATE TEMPORARY TABLE king_buildings1
\par SELECT 
\par '033' AS County, 
\par CONCAT(Major, Minor) AS AccountID, 
\par BldgNbr AS BuildingID, 
\par 1 AS BuildingFlag, 
\par 0 AS OutbuildingFlag, 
\par IF(NbrLivingUnits = 1, 'SFR', 'MFR') AS BuildingUseCode,
\par SqFtTotLiving AS BldgSF, 
\par Stories, 
\par IF(SqFtTotLiving IS NOT NULL AND Stories IS NOT NULL, SqFtTotLiving/Stories, NULL) AS Footprint, 
\par YrBuilt AS YearBuilt, 
\par CONCAT('res-',BldgGrade) AS BldgQuality, 
\par CONCAT('res-',e.Condition) AS BldgCondition, 
\par NbrLivingUnits AS NumberofUnits, 
\par Bedrooms, 
\par BathFullCount AS BathFull, 
\par Bath3qtrCount AS Bath3Qtr, 
\par BathHalfCount AS BathHalf, 
\par (BathFullCount + 0.5 * BathHalfCount + 0.75 * Bath3qtrCount) AS Bathrooms
\par FROM king_resbldg_temp e;
\par 
\par -- Apartment and commercial building data
\par 
\par CREATE TEMPORARY TABLE king_buildings2
\par SELECT 
\par a.County, 
\par a.AccountID, 
\par a.BuildingID, 
\par a.BuildingFlag, 
\par a.OutbuildingFlag, 
\par a.BuildingUseCode, 
\par a.BldgSF, 
\par a.Stories, 
\par a.Footprint, 
\par a.YearBuilt, 
\par CONCAT('comm-',a.BldgQuality) AS BldgQuality, 
\par CONCAT('comm-',b.BldgCondition) AS BldgCondition,
\par b.NumberofUnits, 
\par a.Bedrooms, 
\par a.BathFull, 
\par a.Bath3Qtr, 
\par a.BathHalf, 
\par a.Bathrooms
\par FROM king_commbldg_presort a
\par LEFT JOIN king_aptcomplex_presort b ON a.AccountID = b.AccountID;
\par 
\par -- Condo complex data
\par 
\par CREATE TEMPORARY TABLE king_buildings3a
\par SELECT 
\par '033' AS County, 
\par u.Major,
\par u.Minor,
\par CONCAT(u.Major, u.Minor) AS AccountID, 
\par u.UnitNbr AS BuildingID, 
\par 1 AS BuildingFlag, 
\par 0 AS OutbuildingFlag, 
\par CONCAT('Condo-',u.UnitType) AS BuildingUseCode, 
\par u.Footage AS BldgSF, 
\par 0 AS Stories, 
\par 0 AS Footprint, 
\par c.YrBuilt AS YearBuilt, 
\par CONCAT('condo-',c.BldgQuality) AS BldgQuality, 
\par CONCAT('condo-',c.Condition) AS BldgCondition, 
\par IF((u.UnitType >=1 AND u.UnitType<=4) OR u.UnitType=15 OR u.UnitType=16 OR u.UnitType=26,1,0) AS NumberofUnits, 
\par IF(u.NbrBedrooms='S',0,u.NbrBedrooms) AS Bedrooms, 
\par u.BathFullCount AS BathFull, 
\par 0 AS Bath3Qtr, 
\par u.BathHalfCount AS BathHalf, 
\par (0.5 * u.BathHalfCount + u.BathFullCount) AS Bathrooms
\par FROM king_condounit_temp u
\par LEFT JOIN king_condocomplex_temp c ON c.Major = u.Major;
\par 
\par -- Identification of condos with only one unit (apartment uses?)
\par 
\par CREATE TEMPORARY TABLE king_condosandbuildings_1
\par SELECT * FROM king_commbldg_temp a WHERE Minor = '0000' GROUP BY Major HAVING COUNT(*) = 1;
\par 
\par CREATE TEMPORARY TABLE king_condosandbuildings_2
\par SELECT Major, Minor FROM king_condounit_temp WHERE PcntOwnership > 99 GROUP BY Major HAVING COUNT(*) = 1;
\par 
\par CREATE INDEX majornumber USING {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}BTREE{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}ON{\*\xmlclose}{\*\xmlclose} king_condosandbuildings_2 (Major);
\par 
\par CREATE TEMPORARY TABLE king_condosandbuildings_3
\par SELECT 
\par a.Major, b.Minor, a.BldgGrossSqFt, a.NbrStories, a.YrBuilt
\par FROM king_condosandbuildings_1 a
\par LEFT JOIN king_condosandbuildings_2 b ON a.Major = b.Major WHERE b.Major IS NOT NULL;
\par 
\par CREATE TEMPORARY TABLE king_complexandunits_1
\par SELECT Major, NbrUnits FROM king_condocomplex_temp a GROUP BY Major HAVING COUNT(*) = 1;
\par 
\par CREATE INDEX units USING {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}BTREE{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}ON{\*\xmlclose}{\*\xmlclose} king_complexandunits_1 (Major);
\par 
\par CREATE TEMPORARY TABLE king_condosandbuildings_4
\par SELECT a.*, b.NbrUnits AS Units FROM king_condosandbuildings_3 a
\par LEFT JOIN king_complexandunits_1 b ON a.Major = b.Major;
\par 
\par CREATE INDEX parcelid USING {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}BTREE{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}ON{\*\xmlclose}{\*\xmlclose} king_condosandbuildings_4 (Major, Minor);
\par 
\par -- On with the show!
\par 
\par CREATE TEMPORARY TABLE king_buildings3
\par SELECT
\par a.County,
\par a.AccountID,
\par a.BuildingID,
\par a.BuildingFlag,
\par a.OutbuildingFlag,
\par a.BuildingUseCode,
\par IF(a.BldgSF = 0, b.BldgGrossSqFt, a.BldgSF) AS BldgSF,
\par IF(a.Stories = 0, b.NbrStories, a.Stories) AS Stories,
\par IF(a.Footprint = 0 AND b.NbrStories > 0, b.BldgGrossSqFt / b.NbrStories, a.Footprint) AS Footprint,
\par IF(a.YearBuilt = 0, b.YrBuilt, a.YearBuilt) AS YearBuilt,
\par a.BldgQuality,
\par a.BldgCondition,
\par IF(b.Units IS NOT NULL AND b.Units > a.NumberofUnits, b.Units, a.NumberofUnits) AS NumberofUnits,
\par a.Bedrooms,
\par a.BathFull,
\par a.Bath3Qtr,
\par a.BathHalf,
\par a.Bathrooms
\par FROM king_buildings3a a
\par LEFT JOIN king_condosandbuildings_4 b ON a.Major = b.Major AND a.Minor = b.Minor;
\par 
\par 
\par -- Ensure that data corresponds to common format
\par 
\par ALTER TABLE king_buildings1 CONVERT TO CHARACTER SET latin1 COLLATE latin1_swedish_ci;
\par ALTER TABLE king_buildings2 CONVERT TO CHARACTER SET latin1 COLLATE latin1_swedish_ci;
\par ALTER TABLE king_buildings3 CONVERT TO CHARACTER SET latin1 COLLATE latin1_swedish_ci;
\par 
\par -- Concatenate tables
\par 
\par CREATE TEMPORARY TABLE king_buildings
\par SELECT * FROM king_buildings1
\par {\*\xmlopen\xmlns2{\factoidname place}}UNION{\*\xmlclose}
\par SELECT * FROM king_buildings2
\par {\*\xmlopen\xmlns2{\factoidname place}}UNION{\*\xmlclose}
\par SELECT * FROM king_buildings3;
\par 
\par CREATE INDEX building_codes USING BTREE ON king_buildings (BuildingUseCode);
\par 
\par -- Add additional columns
\par 
\par CREATE TEMPORARY TABLE king_buildings_2
\par SELECT 
\par a.*, 
\par b.building_use_description AS BuildingUseDescription, 
\par b.general_category AS GeneralCategory, 
\par b.general_category_code AS GeneralCategoryCode,
\par b.building_type AS BuildingType, 
\par b.building_type_desc AS BuildingTypeDesc,
\par CONCAT(a.County,a.AccountID) AS ID_SUBPARCEL
\par FROM king_buildings a
\par LEFT JOIN building_type_king b ON a.BuildingUseCode = b.building_use_code;
\par 
\par -- Change variables
\par 
\par ALTER TABLE king_buildings_2
\par MODIFY COLUMN {\*\xmlopen\xmlns2{\factoidname PlaceType}}{\*\xmlopen\xmlns2{\factoidname place}}County{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname PlaceName}}VARCHAR{\*\xmlclose}{\*\xmlclose}
(5) CHARACTER SET latin1 COLLATE latin1_swedish_ci DEFAULT NULL,
\par MODIFY COLUMN AccountID VARCHAR(25) CHARACTER SET latin1 COLLATE latin1_swedish_ci DEFAULT NULL,
\par MODIFY COLUMN BuildingID VARCHAR(25) CHARACTER SET latin1 COLLATE latin1_swedish_ci DEFAULT NULL,
\par MODIFY COLUMN BuildingFlag INTEGER UNSIGNED DEFAULT 0,
\par MODIFY COLUMN OutbuildingFlag INTEGER UNSIGNED DEFAULT 0,
\par MODIFY COLUMN BuildingUseCode VARCHAR(50) CHARACTER SET latin1 NOT NULL DEFAULT '0' COLLATE latin1_swedish_ci,
\par MODIFY COLUMN BldgSF INT UNSIGNED NOT NULL DEFAULT 0,
\par MODIFY COLUMN Stories DOUBLE(5,2) NOT NULL DEFAULT 0,
\par MODIFY COLUMN Footprint INTEGER UNSIGNED DEFAULT 0,
\par MODIFY COLUMN YearBuilt INTEGER UNSIGNED DEFAULT 0,
\par MODIFY COLUMN BldgQuality VARCHAR(50) CHARACTER SET latin1 DEFAULT '0' COLLATE latin1_swedish_ci,
\par MODIFY COLUMN BldgCondition VARCHAR(50) CHARACTER SET latin1 DEFAULT '0' COLLATE latin1_swedish_ci,
\par MODIFY COLUMN NumberofUnits INT UNSIGNED DEFAULT 0,
\par MODIFY COLUMN Bedrooms INT UNSIGNED DEFAULT 0,
\par MODIFY COLUMN BathFull INT UNSIGNED DEFAULT 0,
\par MODIFY COLUMN Bath3Qtr INT UNSIGNED DEFAULT 0,
\par MODIFY COLUMN BathHalf INT UNSIGNED DEFAULT 0,
\par MODIFY COLUMN Bathrooms DOUBLE(5,2) DEFAULT 0,
\par MODIFY COLUMN BuildingUseDescription VARCHAR(100) CHARACTER SET latin1 COLLATE latin1_swedish_ci,
\par MODIFY COLUMN GeneralCategory VARCHAR(50) CHARACTER SET latin1 COLLATE latin1_swedish_ci,
\par MODIFY COLUMN GeneralCategoryCode INT(5) NOT NULL DEFAULT 0, 
\par MODIFY COLUMN BuildingType INT(1) NOT NULL DEFAULT 0, 
\par MODIFY COLUMN BuildingTypeDesc VARCHAR(50) CHARACTER SET latin1 COLLATE latin1_swedish_ci,
\par MODIFY COLUMN ID_SUBPARCEL VARCHAR(25) CHARACTER SET latin1 COLLATE latin1_swedish_ci;
\par 
\par -- Add to final table
\par 
\par INSERT INTO all_buildings 
\par (County, AccountID, BuildingID, BuildingFlag, OutbuildingFlag, BuildingUseCode, BldgSF, Stories, Footprint, YearBuilt, BldgQuality, BldgCondition, NumberofUnits, Bedrooms, BathFull, Bath3Qtr, BathHalf, Bathrooms, BuildingUseDescriptio
n, GeneralCategory, GeneralCategoryCode, BuildingType, BuildingTypeDesc, ID_SUBPARCEL) 
\par SELECT County, AccountID, BuildingID, BuildingFlag, OutbuildingFlag, BuildingUseCode, BldgSF, Stories, Footprint, YearBuilt, BldgQuality, BldgCondition, NumberofUnits, 
Bedrooms, BathFull, Bath3Qtr, BathHalf, Bathrooms, BuildingUseDescription, GeneralCategory, GeneralCategoryCode, BuildingType, BuildingTypeDesc, ID_SUBPARCEL 
\par FROM king_buildings_2;
\par 
\par --
\par -- Assembly of subparcel data
\par --
\par 
\par -- Combine parcel IDs with condo IDs for full subparcel relation table
\par 
\par CREATE TEMPORARY TABLE king_subparcels
\par SELECT
\par '033' AS County,
\par CONCAT(p.Major, p.Minor) AS PARCEL_ID,
\par CONCAT(p.Major, p.Minor) AS AccountID,
\par 0 AS SubparcelFlag,
\par CONCAT('033',p.Major, p.Minor) AS ID_SUBPARCEL
\par FROM king_parcel_temp p
\par WHERE p.Minor <> '0000'
\par {\*\xmlopen\xmlns2{\factoidname place}}UNION{\*\xmlclose}
\par SELECT
\par '033' AS County,
\par }{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\lang1046\langfe1033\langnp1046\insrsid2098316\charrsid2098316 CONCAT(c.Major, '0000') AS PARCEL_ID,
\par }{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid2098316\charrsid2098316 CONCAT(c.Major, c.Minor) AS AccountID,
\par }{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\lang1046\langfe1033\langnp1046\insrsid2098316\charrsid2098316 1 AS SubparcelFlag,
\par CONCAT('033',c.Major, c.Minor) AS ID_SUBPARCEL
\par }{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid2098316\charrsid2098316 FROM king_condounit_temp c;
\par 
\par ALTER TABLE king_subparcels
\par MODIFY COLUMN ID_SUBPARCEL VARCHAR(28) CHARACTER SET latin1 COLLATE latin1_swedish_ci;
\par 
\par CREATE INDEX id_subparcels USING BTREE ON king_subparcels (ID_SUBPARCEL);
\par 
\par -- Assess number of buildings per subparcel
\par 
\par CREATE TEMPORARY TABLE king_building_sums
\par SELECT ID_SUBPARCEL, SUM(BuildingFlag) AS NumberofBuildings, SUM(OutbuildingFlag) AS NumberofOutbuildings
\par FROM king_buildings_2
\par GROUP BY ID_SUBPARCEL;
\par 
\par ALTER TABLE king_building_sums
\par MODIFY COLUMN ID_SUBPARCEL VARCHAR(28) CHARACTER SET latin1 COLLATE latin1_swedish_ci;
\par 
\par CREATE INDEX id_buildingsums USING BTREE ON king_building_sums (ID_SUBPARCEL);
\par 
\par -- Merge building counts with subparcel data
\par 
\par CREATE TEMPORARY TABLE king_subparcels_2
\par SELECT a.County, a.PARCEL_ID, a.AccountID, a.SubparcelFlag, IFNULL(b.NumberofBuildings,0) AS NumberofBuildings, IFNULL(b.NumberofOutbuildings,0) AS NumberofOutbuildings, a.ID_SUBPARCEL, CONCAT(a.County, a.PARCEL_ID) AS ID_PARCEL
\par FROM king_subparcels a
\par LEFT JOIN king_building_sums b ON a.ID_SUBPARCEL = b.ID_SUBPARCEL;
\par 
\par -- Add assessed values
\par 
\par CREATE TEMPORARY TABLE king_values_2006_1
\par SELECT CONCAT('033',Major,Minor) AS ID_SUBPARCEL, IF(TaxValReason IS NULL OR TaxValReason = 'FS',0,1) AS TaxExempt, IF(ApprLandVal = 0, TaxableLandVal, ApprLandVal) AS LandValue, IF(ApprImpsVal=0, TaxableImpsVal, ApprImpsVal) AS ImprValue
\par FROM king_account_temp
\par WHERE BillYr = 2006 AND Major IS NOT NULL AND Minor IS NOT NULL
\par GROUP BY Major, Minor;
\par 
\par CREATE TEMPORARY TABLE king_values_2006_2
\par SELECT ID_SUBPARCEL, IF(SUM(TaxExempt) > 0, 1, 0) AS TaxExempt, SUM(LandValue) AS LandValue, SUM(ImprValue) AS ImprValue
\par FROM king_values_2006_1
\par GROUP BY ID_SUBPARCEL;
\par 
\par ALTER TABLE king_values_2006_2
\par MODIFY COLUMN TaxExempt VARCHAR(10) NOT NULL DEFAULT 0,
\par MODIFY COLUMN LandValue INT(12) NOT NULL DEFAULT 0,
\par MODIFY COLUMN ImprValue INT(12) NOT NULL DEFAULT 0,
\par MODIFY COLUMN ID_SUBPARCEL VARCHAR(28) CHARACTER SET latin1 COLLATE latin1_swedish_ci;
\par 
\par CREATE INDEX id_values USING {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}BTREE{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}ON{\*\xmlclose}{\*\xmlclose} king_values_2006_2 (ID_SUBPARCEL);
\par 
\par CREATE TEMPORARY TABLE king_subparcels_3
\par SELECT a.*, b.TaxExempt, b.LandValue, b.ImprValue
\par FROM king_subparcels_2 a
\par LEFT JOIN king_values_2006_2 b ON a.ID_SUBPARCEL = b.ID_SUBPARCEL;
\par 
\par CREATE INDEX id_subparcels USING {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}BTREE{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}ON{\*\xmlclose}{\*\xmlclose} king_subparcels_3 (ID_SUBPARCEL);
\par 
\par -- Add to final table
\par 
\par INSERT INTO all_subparcels
\par (County, PARCEL_ID, AccountID, SubparcelFlag, NumberofBuildings, NumberofOutbuildings, LandValue, ImprValue, TaxExempt, ID_SUBPARCEL, ID_PARCEL)
\par SELECT County, PARCEL_ID, AccountID, SubparcelFlag, NumberofBuildings, NumberofOutbuildings, LandValue, ImprValue, TaxExempt, ID_SUBPARCEL, ID_PARCEL FROM king_subparcels_3;
\par 
\par --
\par -- Assembly of parcel data
\par --
\par 
\par -- Assess value, number of subparcels per parcel
\par 
\par CREATE TEMPORARY TABLE king_master
\par SELECT PARCEL_ID, COUNT(PARCEL_ID) AS Subparcels, IF(SUM(TaxExempt) > 0, 1, 0) AS TaxExemptParcel, SUM(LandValue) AS LandValueParcel, SUM(ImprValue) AS ImprValueParcel
\par FROM king_subparcels_3
\par WHERE PARCEL_ID IS NOT NULL
\par GROUP BY PARCEL_ID;
\par 
\par CREATE INDEX id_master USING BTREE ON king_master (PARCEL_ID);
\par 
\par -- Presort parcel data
\par 
\par CREATE TEMPORARY TABLE king_parcel_presort 
\par SELECT '033' AS County, CONCAT(e.Major, e.Minor) AS PARCEL_ID, e.Major AS PLAT_ID, e.DistrictName AS Jurisdiction, (e.SqFtLot / 43560) AS Size_Acres, e.SqFtLot AS Size_SF, e.PresentUse AS Land_Use, e.CurrentZoning AS Zoning
\par FROM king_parcel_temp e;
\par 
\par ALTER TABLE king_parcel_presort 
\par MODIFY COLUMN PARCEL_ID VARCHAR(25) CHARACTER SET latin1 COLLATE latin1_swedish_ci,
\par MODIFY COLUMN PLAT_ID VARCHAR(10) CHARACTER SET latin1 COLLATE latin1_swedish_ci;
\par 
\par CREATE INDEX id_presort USING BTREE ON king_parcel_presort (PARCEL_ID);
\par 
\par -- Assemble parcel data
\par 
\par CREATE TEMPORARY TABLE parcels_king
\par SELECT p.County, p.PARCEL_ID, p.PLAT_ID, k.Subparcels AS NumberofAccounts, k.TaxExemptParcel, k.LandValueParcel, k.ImprValueParcel, p.Jurisdiction, p.Size_Acres, p.Size_SF, p.Land_Use, p.Zoning
\par FROM king_master k
\par LEFT JOIN king_parcel_presort p ON p.PARCEL_ID = k.PARCEL_ID
\par WHERE p.PARCEL_ID IS NOT NULL;
\par 
\par ALTER TABLE parcels_king
\par MODIFY COLUMN {\*\xmlopen\xmlns2{\factoidname PlaceType}}{\*\xmlopen\xmlns2{\factoidname place}}County{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname PlaceName}}VARCHAR{\*\xmlclose}{\*\xmlclose}(5) CHARACTER SET latin1 COLLATE latin1_swedish_ci,
\par MODIFY COLUMN Land_Use VARCHAR(50) CHARACTER SET latin1 COLLATE latin1_swedish_ci;
\par 
\par CREATE INDEX id_code USING {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}BTREE{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}ON{\*\xmlclose}{\*\xmlclose} parcels_king (County, Land_Use);
\par 
\par -- Add additional columns
\par 
\par CREATE TEMPORARY TABLE parcels_king_2
\par SELECT a.County, a.PARCEL_ID, a.PLAT_ID, a.NumberofAccounts, a.TaxExemptParcel, a.LandValueParcel, a.ImprValueParcel, a.Jurisdiction, a.Size_Acres, a.Size_SF, a.Land_Use, a.Zoning, b.land_use_description AS LandUseDescription, b.generic_land_use_1 AS Gene
ricLandUse1, b.generic_land_use_2 AS GenericLandUse2, b.res_nonres, CONCAT(a.County, a.PARCEL_ID) AS ID_PARCEL, CONCAT(a.County, a.PLAT_ID) AS ID_PLAT
\par FROM parcels_king a
\par LEFT JOIN general.land_use_generic_reclass_2005 b ON (b.county = a.County AND b.county_land_use_code = a.Land_Use);
\par 
\par ALTER TABLE parcels_king_2
\par MODIFY COLUMN Jurisdiction VARCHAR(50) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL DEFAULT '0',
\par MODIFY COLUMN LandUseDescription VARCHAR(100) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL DEFAULT '0',
\par MODIFY COLUMN GenericLandUse1 VARCHAR(50) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL DEFAULT '0',
\par MODIFY COLUMN GenericLandUse2 VARCHAR(50) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL DEFAULT '0',
\par MODIFY COLUMN res_nonres VARCHAR(10) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL DEFAULT '0',
\par MODIFY COLUMN ID_PARCEL VARCHAR(28) CHARACTER SET latin1 COLLATE latin1_swedish_ci,
\par MODIFY COLUMN ID_PLAT VARCHAR(13) CHARACTER SET latin1 COLLATE latin1_swedish_ci;
\par 
\par -- Add to final table
\par 
\par INSERT INTO all_parcels
\par (County, PARCEL_ID, PLAT_ID, NumberofAccounts, LandValueParcel, ImprValueParcel, TaxExemptParcel, Jurisdiction, Size_Acres, Size_SF, Land_Use, Zoning, LandUseDescription, GenericLandUse1, GenericLandUse2, res_nonres, ID_PARCEL, ID_PLAT)
\par SELECT County, PARCEL_ID, PLAT_ID, NumberofAccounts, LandValueParcel, ImprValueParcel, TaxExemptParcel, Jurisdiction, Size_Acres, Size_SF, Land_Use, Zoning, LandUseDescription, GenericLandUse1, GenericLandUse2, res_nonres, ID_PARCEL, ID_PLAT
\par FROM parcels_king_2;
\par 
\par --
\par -- Assembly of sales data
\par --
\par 
\par -- Collect initial variables
\par 
\par CREATE TEMPORARY TABLE sales_king
\par SELECT '033' AS County, CONCAT(Major, Minor) AS AccountID, ExciseTaxNbr AS ExciseTaxNumber,
\par SaleDate, SalePrice, PersPropPrice AS PPropPrice, BuyerName, SellerName, SaleInstrument AS DeedType,
\par IF(SaleWarning IS NULL, ' 0 ', CONCAT(' ', SaleWarning, ' ')) AS SaleWarnings
\par FROM king_sales_temp e
\par WHERE YEAR(SaleDate) > 1996;
\par 
\par CREATE INDEX id_excise USING BTREE ON sales_king (ExciseTaxNumber);
\par 
\par -- Count number of accounts per sale
\par 
\par CREATE TEMPORARY TABLE sales_king_counts
\par SELECT ExciseTaxNumber, COUNT(ExciseTaxNumber) AS NumberofAccounts
\par FROM sales_king GROUP BY ExciseTaxNumber;
\par 
\par CREATE INDEX id_excise USING BTREE ON sales_king_counts (ExciseTaxNumber);
\par 
\par -- Join counts to main table
\par 
\par ALTER TABLE sales_king 
\par MODIFY COLUMN ExciseTaxNumber VARCHAR(25) NULL,
\par MODIFY COLUMN DeedType VARCHAR(50) NOT NULL DEFAULT '0',
\par MODIFY COLUMN SaleWarnings VARCHAR(50) NOT NULL DEFAULT '0';
\par 
\par CREATE TEMPORARY TABLE sales_king_2
\par SELECT s.County, s.AccountID, s.ExciseTaxNumber, c.NumberofAccounts, s.SaleDate, s.SalePrice, s.PPropPrice, s.BuyerName, s.SellerName, s.DeedType, s.SaleWarnings
\par FROM sales_king s
\par LEFT JOIN sales_king_counts c ON c.ExciseTaxNumber = s.ExciseTaxNumber;
\par 
\par -- Add descriptions of sales instruments
\par 
\par CREATE TEMPORARY TABLE sales_king_3
\par SELECT a.*, i.InstrumentDescr, i.ValidInstrument
\par FROM sales_king_2 a
\par LEFT JOIN general.instrumenttypes i ON (a.County = i.County AND a.DeedType = i.InstrumentType);
\par 
\par -- Add descriptions of sales warnings
\par 
\par CREATE TEMPORARY TABLE sales_king_4
\par SELECT a.*, IF(s.SWarnDescr IS NULL, '', s.SWarnDescr) AS SWarnDescr, IF(s.ValidSale IS NULL, 0, s.ValidSale) AS ValidSale, CONCAT(a.County, a.AccountID) AS ID_SUBPARCEL, CONCAT(a.County,a.ExciseTaxNumber,a.AccountID) AS ID_SALE
\par FROM sales_king_3 a
\par LEFT JOIN general.salewarnings s ON (a.County = s.County AND a.SaleWarnings = s.SaleWarnings);
\par 
\par ALTER TABLE sales_king_4
\par MODIFY COLUMN InstrumentDescr VARCHAR(50) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL DEFAULT '0',
\par MODIFY COLUMN ValidInstrument INT NOT NULL DEFAULT 0,
\par MODIFY COLUMN SWarnDescr VARCHAR(150) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL DEFAULT '0',
\par MODIFY COLUMN ValidSale INT NOT NULL DEFAULT 0;
\par 
\par -- Add to final table
\par 
\par INSERT INTO all_sales
\par (County, AccountID, ExciseTaxNumber, NumberofAccounts, SaleDate, SalePrice, PPropPrice, BuyerName, SellerName, DeedType, SaleWarnings, InstrumentDescr, ValidInstrument, SWarnDescr, ValidSale, ID_SUBPARCEL, ID_SALE)
\par {\*\xmlopen\xmlns2{\factoidname PlaceName}}{\*\xmlopen\xmlns2{\factoidname place}}SELECT{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname PlaceType}}County{\*\xmlclose}{\*\xmlclose}
, AccountID, ExciseTaxNumber, NumberofAccounts, SaleDate, SalePrice, PPropPrice, BuyerName, SellerName, DeedType, SaleWarnings, InstrumentDescr, ValidInstrument, SWarnDescr, ValidSale, ID_SUBPARCEL, ID_SALE
\par FROM sales_king_4;
\par 
\par FLUSH TABLES;
\par 
\par -- ----------------------------------------------------------------------
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par -- ----------------------------------------------------------------------
\par -- {\*\xmlopen\xmlns2{\factoidname PlaceName}}{\*\xmlopen\xmlns2{\factoidname place}}KITSAP{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname PlaceType}}COUNTY{\*\xmlclose}{\*\xmlclose} DATA 
\par -- ----------------------------------------------------------------------
\par 
\par --
\par -- Copy raw data to working directory 
\par --
\par 
\par FLUSH TABLES;
\par USE workspace;
\par 
\par CREATE TEMPORARY TABLE kitsap_buildings_temp
\par SELECT * FROM kitsap_20060323.building;
\par 
\par CREATE TEMPORARY TABLE kitsap_main_temp
\par SELECT * FROM kitsap_20060323.main;
\par 
\par CREATE TEMPORARY TABLE kitsap_address_temp
\par SELECT * FROM kitsap_20060323.flatats;
\par 
\par CREATE TEMPORARY TABLE kitsap_land_temp
\par SELECT * FROM kitsap_20060323.land;
\par 
\par CREATE TEMPORARY TABLE kitsap_sale_temp
\par SELECT * FROM kitsap_20060323.sale;
\par 
\par CREATE TEMPORARY TABLE spatialdata
\par SELECT * FROM spatial.spatial_2005;
\par 
\par CREATE TEMPORARY TABLE building_type_kitsap
\par SELECT * FROM general.building_type_reclass_2005 {\*\xmlopen\xmlns2{\factoidname PlaceName}}{\*\xmlopen\xmlns2{\factoidname place}}WHERE{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname PlaceType}}County{\*\xmlclose}{\*\xmlclose} = '035';
\par 
\par CREATE INDEX building_kitsap USING BTREE ON building_type_kitsap (building_use_code);
\par 
\par CREATE INDEX id_spatial USING BTREE ON spatialdata (ID_PARCEL);
\par 
\par --
\par -- Assembly of building data 
\par --
\par 
\par -- Collect all building data
\par 
\par CREATE TEMPORARY TABLE kitsap_buildings
\par SELECT
\par '035' AS County,
\par CONCAT(TRUNCATE(b.RP_ACCT_ID,0)) AS AccountID,
\par 0 AS BuildingID,
\par IF(IMPROV_TYP = 'OTHER', 0, 1) AS BuildingFlag,
\par IF(IMPROV_TYP = 'OTHER', 1, 0) AS OutbuildingFlag,
\par IFNULL(b.USE_DESC,'') AS BuildingUseCode,
\par TRUNCATE(b.FLR_TOT_SF, 0) AS BldgSF,
\par TRUNCATE(b.STORIES,0) AS Stories,
\par IF(b.FLR_TOT_SF IS NOT NULL AND b.STORIES IS NOT NULL, b.FLR_TOT_SF/b.STORIES, 0) AS Footprint,
\par TRUNCATE(b.YEAR_BUILT,0) AS YearBuilt,
\par IF(q.Quality IS NULL, '', q.Quality) AS BldgQuality,
\par IF(b.COND_CD IS NULL, '', b.COND_CD) AS BldgCondition,
\par 1 AS NumberofUnits,
\par b.BEDROOMS AS Bedrooms,
\par b.FULL_BATHS AS BathFull,
\par 0 AS Bath3Qtr,
\par b.HALF_BATHS AS BathHalf,
\par (b.FULL_BATHS + 0.5 * b.HALF_BATHS) AS Bathrooms
\par FROM kitsap_buildings_temp b
\par LEFT JOIN general.kitsap_quality q ON (q.BLDG_TYP = b.BLDG_TYP);
\par 
\par CREATE INDEX building_codes USING BTREE ON kitsap_buildings (BuildingUseCode);
\par 
\par -- Add additional columns
\par 
\par CREATE TEMPORARY TABLE kitsap_buildings_2
\par SELECT 
\par a.*, 
\par b.building_use_description AS BuildingUseDescription, 
\par b.general_category AS GeneralCategory, 
\par b.general_category_code AS GeneralCategoryCode,
\par b.building_type AS BuildingType, 
\par b.building_type_desc AS BuildingTypeDesc,
\par CONCAT(a.County,a.AccountID) AS ID_SUBPARCEL
\par FROM kitsap_buildings a
\par LEFT JOIN building_type_kitsap b ON a.BuildingUseCode = b.building_use_code;
\par 
\par -- Ensure that data corresponds to common format
\par 
\par ALTER TABLE kitsap_buildings_2
\par MODIFY COLUMN {\*\xmlopen\xmlns2{\factoidname PlaceType}}{\*\xmlopen\xmlns2{\factoidname place}}County{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname PlaceName}}VARCHAR{\*\xmlclose}{\*\xmlclose}
(5) CHARACTER SET latin1 COLLATE latin1_swedish_ci DEFAULT NULL,
\par MODIFY COLUMN AccountID VARCHAR(25) CHARACTER SET latin1 COLLATE latin1_swedish_ci DEFAULT NULL,
\par MODIFY COLUMN BuildingID VARCHAR(25) CHARACTER SET latin1 COLLATE latin1_swedish_ci DEFAULT NULL,
\par MODIFY COLUMN BuildingFlag INTEGER UNSIGNED DEFAULT 0,
\par MODIFY COLUMN OutbuildingFlag INTEGER UNSIGNED DEFAULT 0,
\par MODIFY COLUMN BuildingUseCode VARCHAR(50) CHARACTER SET latin1 NOT NULL DEFAULT '0' COLLATE latin1_swedish_ci,
\par MODIFY COLUMN BldgSF INT UNSIGNED NOT NULL DEFAULT 0,
\par MODIFY COLUMN Stories DOUBLE(5,2) NOT NULL DEFAULT 0,
\par MODIFY COLUMN Footprint INTEGER UNSIGNED DEFAULT 0,
\par MODIFY COLUMN YearBuilt INTEGER UNSIGNED DEFAULT 0,
\par MODIFY COLUMN BldgQuality VARCHAR(50) CHARACTER SET latin1 DEFAULT '0' COLLATE latin1_swedish_ci,
\par MODIFY COLUMN BldgCondition VARCHAR(50) CHARACTER SET latin1 DEFAULT '0' COLLATE latin1_swedish_ci,
\par MODIFY COLUMN NumberofUnits INT UNSIGNED DEFAULT 0,
\par MODIFY COLUMN Bedrooms INT UNSIGNED DEFAULT 0,
\par MODIFY COLUMN BathFull INT UNSIGNED DEFAULT 0,
\par MODIFY COLUMN Bath3Qtr INT UNSIGNED DEFAULT 0,
\par MODIFY COLUMN BathHalf INT UNSIGNED DEFAULT 0,
\par MODIFY COLUMN Bathrooms DOUBLE(5,2) DEFAULT 0,
\par MODIFY COLUMN BuildingUseDescription VARCHAR(100) CHARACTER SET latin1 COLLATE latin1_swedish_ci,
\par MODIFY COLUMN GeneralCategory VARCHAR(50) CHARACTER SET latin1 COLLATE latin1_swedish_ci,
\par MODIFY COLUMN GeneralCategoryCode INT(5) NOT NULL DEFAULT 0, 
\par MODIFY COLUMN BuildingType INT(1) NOT NULL DEFAULT 0, 
\par MODIFY COLUMN BuildingTypeDesc VARCHAR(50) CHARACTER SET latin1 COLLATE latin1_swedish_ci,
\par MODIFY COLUMN ID_SUBPARCEL VARCHAR(25) CHARACTER SET latin1 COLLATE latin1_swedish_ci;
\par 
\par -- Add to final table
\par 
\par INSERT INTO all_buildings 
\par (County, AccountID, BuildingID, BuildingFlag, OutbuildingFlag, BuildingUseCode, BldgSF, Stories, Footprint, YearBuilt, BldgQuality, BldgCondition, NumberofUnits, Bedrooms, BathFull, Bath3Qtr, BathHalf, Bathrooms, BuildingUseDescriptio
n, GeneralCategory, GeneralCategoryCode, BuildingType, BuildingTypeDesc, ID_SUBPARCEL) 
\par SELECT County, AccountID, BuildingID, BuildingFlag, OutbuildingFlag, BuildingUseCode, BldgSF, Stories, Footprint, YearBuilt, BldgQuality, BldgCondition, NumberofUnits, 
Bedrooms, BathFull, Bath3Qtr, BathHalf, Bathrooms, BuildingUseDescription, GeneralCategory, GeneralCategoryCode, BuildingType, BuildingTypeDesc, ID_SUBPARCEL 
\par FROM kitsap_buildings_2;
\par 
\par --
\par -- Assembly of subparcels 
\par --
\par 
\par -- Identify mobile homes in Kitsap data
\par 
\par CREATE TEMPORARY TABLE kitsap_mh
\par SELECT 
\par '035' AS County,
\par CONCAT(TRUNCATE(LD_ACCT_ID,0)) AS PARCEL_ID,
\par CONCAT(TRUNCATE(RP_ACCT_ID,0)) AS AccountID,
\par 1 AS SubparcelFlag
\par FROM kitsap_main_temp m
\par WHERE (LD_ACCT_ID <> RP_ACCT_ID AND ACCT_STAT <> 'D' AND LEFT(ACCT_NO,1) <> '8');
\par 
\par -- Identify noncondos in Kitsap data
\par 
\par CREATE TEMPORARY TABLE kitsap_nocondo
\par SELECT
\par '035' AS County,
\par CONCAT(TRUNCATE(RP_ACCT_ID,0)) AS PARCEL_ID,
\par CONCAT(TRUNCATE(RP_ACCT_ID,0)) AS AccountID,
\par 0 AS SubparcelFlag
\par FROM kitsap_main_temp m
\par WHERE (LD_ACCT_ID = RP_ACCT_ID AND ACCT_STAT <> 'D' AND LEFT(ACCT_NO,1) <> '8');
\par 
\par -- Identify condos and correspondences in Kitsap data 
\par 
\par CREATE TEMPORARY TABLE kitsap_condos_all
\par SELECT CONCAT(TRUNCATE(RP_ACCT_ID,0)) AS AccountID, ACCT_NO, LEFT(ACCT_NO,4) AS CODE1, LEFT(ACCT_NO,8) AS CODE2
\par FROM kitsap_main_temp m
\par WHERE LEFT(ACCT_NO,1) = '8' AND ACCT_STAT <> 'D'
\par ORDER BY ACCT_NO;
\par 
\par CREATE TEMPORARY TABLE kitsap_condos_mainparcel_1
\par SELECT CONCAT(TRUNCATE(RP_ACCT_ID,0)) AS PARCEL_ID, ACCT_NO, LEFT(ACCT_NO,4) AS CODE1
\par FROM kitsap_main_temp m
\par WHERE LEFT(ACCT_NO,1) = '8' AND ACCT_STAT <> 'D' AND SUBSTRING(ACCT_NO,10,3) = '000'
\par GROUP BY LEFT(ACCT_NO,4)
\par HAVING COUNT(*) = 1;
\par 
\par CREATE INDEX condo1 USING BTREE ON kitsap_condos_mainparcel_1 (CODE1);
\par 
\par CREATE TEMPORARY TABLE kitsap_condos_mainparcel_2
\par SELECT CONCAT(TRUNCATE(RP_ACCT_ID,0)) AS PARCEL_ID, ACCT_NO, LEFT(ACCT_NO,8) AS CODE2
\par FROM kitsap_main_temp m
\par WHERE LEFT(ACCT_NO,1) = '8' AND ACCT_STAT <> 'D' AND SUBSTRING(ACCT_NO,10,3) = '000'
\par GROUP BY LEFT(ACCT_NO,8);
\par 
\par CREATE INDEX condo1 USING BTREE ON kitsap_condos_mainparcel_2 (CODE2);
\par 
\par CREATE TEMPORARY TABLE kitsap_condosandparcel_1
\par SELECT 
\par '035' AS County,
\par b.PARCEL_ID,
\par a.AccountID,
\par a.ACCT_NO,
\par b.ACCT_NO AS ACCT_NO_MASTER,
\par a.CODE1,
\par a.CODE2
\par FROM kitsap_condos_all a
\par LEFT JOIN kitsap_condos_mainparcel_1 b ON a.CODE1 = b.CODE1;
\par 
\par CREATE TEMPORARY TABLE kitsap_condosandparcel_2
\par SELECT
\par County,
\par IF(a.PARCEL_ID IS NULL, b.PARCEL_ID, a.PARCEL_ID) AS PARCEL_ID,
\par a.AccountID,
\par a.ACCT_NO,
\par IF(a.ACCT_NO_MASTER IS NULL, b.ACCT_NO, a.ACCT_NO_MASTER) AS ACCT_NO_MASTER,
\par a.CODE1,
\par a.CODE2
\par FROM kitsap_condosandparcel_1 a
\par LEFT JOIN kitsap_condos_mainparcel_2 b ON a.CODE2 = b.CODE2;
\par 
\par -- CREATE TEMPORARY TABLE general.kitsap_condosandparcels_missing
\par -- SELECT PARCEL_ID, AccountID, ACCT_NO, ACCT_NO_MASTER, CODE2
\par -- FROM kitsap_condosandparcel_2 WHERE PARCEL_ID IS NULL
\par -- GROUP BY CODE2;
\par 
\par -- ALTER TABLE general.kitsap_condosandparcels_missing ADD ID INT(10) unsigned NOT NULL AUTO_INCREMENT FIRST, ADD PRIMARY KEY(ID);
\par 
\par -- Alter the missing table!!
\par 
\par CREATE INDEX condo2 USING BTREE ON general.kitsap_condosandparcels_missing (CODE2);
\par 
\par CREATE TEMPORARY TABLE kitsap_condosandparcel_3
\par SELECT
\par County,
\par IF(a.PARCEL_ID IS NULL, b.PARCEL_ID, a.PARCEL_ID) AS PARCEL_ID,
\par a.AccountID,
\par a.ACCT_NO,
\par IF(a.ACCT_NO_MASTER IS NULL, b.ACCT_NO_MASTER, a.ACCT_NO_MASTER) AS ACCT_NO_MASTER,
\par a.CODE1,
\par a.CODE2
\par FROM kitsap_condosandparcel_2 a
\par LEFT JOIN general.kitsap_condosandparcels_missing b ON a.CODE2 = b.CODE2;
\par 
\par -- CREATE TABLE general.kitsap_condo_2006
\par -- SELECT * FROM kitsap_condosandparcel_3;
\par 
\par -- Collate condo records - note that the source data may be processed by hand
\par 
\par CREATE TEMPORARY TABLE kitsap_condos_collate
\par SELECT
\par '035' AS County, 
\par CONCAT(PARCEL_ID) AS PARCEL_ID,
\par CONCAT(AccountID) AS AccountID,
\par 1 AS SubparcelFlag
\par FROM general.kitsap_condo_2006;
\par 
\par -- Collect all records
\par 
\par CREATE TEMPORARY TABLE kitsap_subparcels
\par SELECT County, PARCEL_ID, AccountID, SubparcelFlag, CONCAT(County, AccountID) AS ID_SUBPARCEL FROM kitsap_mh
\par {\*\xmlopen\xmlns2{\factoidname place}}UNION{\*\xmlclose}
\par SELECT County, PARCEL_ID, AccountID, SubparcelFlag, CONCAT(County, AccountID) AS ID_SUBPARCEL FROM kitsap_condos_collate
\par {\*\xmlopen\xmlns2{\factoidname place}}UNION{\*\xmlclose}
\par SELECT County, PARCEL_ID, AccountID, SubparcelFlag, CONCAT(County, AccountID) AS ID_SUBPARCEL FROM kitsap_nocondo;
\par 
\par ALTER TABLE kitsap_subparcels
\par MODIFY COLUMN ID_SUBPARCEL VARCHAR(28) CHARACTER SET latin1 COLLATE latin1_swedish_ci DEFAULT NULL;
\par 
\par CREATE INDEX id_buildingsums USING BTREE ON kitsap_subparcels (ID_SUBPARCEL);
\par 
\par -- Assess number of buildings per subparcel
\par 
\par CREATE TEMPORARY TABLE kitsap_building_sums
\par SELECT ID_SUBPARCEL, SUM(BuildingFlag) AS NumberofBuildings, SUM(OutbuildingFlag) AS NumberofOutbuildings
\par FROM kitsap_buildings_2
\par GROUP BY ID_SUBPARCEL;
\par 
\par ALTER TABLE kitsap_building_sums
\par MODIFY COLUMN ID_SUBPARCEL VARCHAR(28) CHARACTER SET latin1 COLLATE latin1_swedish_ci DEFAULT NULL;
\par 
\par CREATE INDEX id_buildingsums USING BTREE ON kitsap_building_sums (ID_SUBPARCEL);
\par 
\par -- Merge building counts with subparcel data
\par 
\par CREATE TEMPORARY TABLE kitsap_subparcels_2
\par SELECT a.County, a.PARCEL_ID, a.AccountID, a.SubparcelFlag, IF(b.NumberofBuildings IS NULL,0, b.NumberofBuildings) AS NumberofBuildings, IF(b.NumberofOutbuildings IS NULL,0, b.Numbero
fOutbuildings) AS NumberofOutbuildings, a.ID_SUBPARCEL, CONCAT(a.County, a.PARCEL_ID) AS ID_PARCEL
\par FROM kitsap_subparcels a
\par LEFT JOIN kitsap_building_sums b ON a.ID_SUBPARCEL = b.ID_SUBPARCEL;
\par 
\par -- Assemble land and building values
\par 
\par CREATE TEMPORARY TABLE kitsap_values
\par SELECT a.* FROM
\par (SELECT f.RP_ACCT_ID, f.BLDG_VALUE, f.LAND_VALUE FROM kitsap_address_temp f ORDER BY RP_ACCT_ID, BLDG_VALUE desc) a
\par GROUP BY RP_ACCT_ID;
\par 
\par CREATE INDEX id_values USING BTREE ON kitsap_values (RP_ACCT_ID);
\par 
\par CREATE TEMPORARY TABLE kitsap_tax_status
\par SELECT RP_ACCT_ID, IF(TAX_STATUS = 'X', 1, 0) AS TaxExempt FROM kitsap_main_temp where ACCT_STAT = 'A' and TAX_YEAR = 2005 GROUP BY RP_ACCT_ID;
\par 
\par CREATE INDEX id_values USING BTREE ON kitsap_tax_status (RP_ACCT_ID);
\par 
\par CREATE TEMPORARY TABLE kitsap_subparcels_3
\par SELECT a.*, b.BLDG_VALUE AS ImprValue, b.LAND_VALUE AS LandValue
\par FROM kitsap_subparcels_2 a
\par LEFT JOIN kitsap_values b ON a.AccountID = b.RP_ACCT_ID;
\par 
\par CREATE TEMPORARY TABLE kitsap_subparcels_4
\par SELECT a.*, IF(b.TaxExempt IS NULL, 0, 1) AS TaxExempt
\par FROM kitsap_subparcels_3 a
\par LEFT JOIN kitsap_tax_status b ON a.AccountID = b.RP_ACCT_ID;
\par 
\par -- Add to final table
\par 
\par INSERT INTO all_subparcels
\par (County, PARCEL_ID, AccountID, SubparcelFlag, NumberofBuildings, NumberofOutbuildings, LandValue, ImprValue, TaxExempt, ID_SUBPARCEL, ID_PARCEL)
\par {\*\xmlopen\xmlns2{\factoidname PlaceName}}{\*\xmlopen\xmlns2{\factoidname place}}SELECT{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname PlaceType}}County{\*\xmlclose}{\*\xmlclose}
, PARCEL_ID, AccountID, SubparcelFlag, NumberofBuildings, NumberofOutbuildings, LandValue, ImprValue, TaxExempt, ID_SUBPARCEL, ID_PARCEL 
\par FROM kitsap_subparcels_4;
\par 
\par --
\par -- Assembly of parcel data 
\par --
\par 
\par -- Assess jurisdiction
\par 
\par CREATE TEMPORARY TABLE kitsap_address
\par SELECT CONCAT(TRUNCATE(RP_ACCT_ID,0)) AS RP_ACCT_ID, JURISDICT AS Jurisdiction, LEFT(ACCT_NO,LOCATE('-',ACCT_NO)-1) AS PLAT_ID
\par FROM kitsap_address_temp a
\par GROUP BY a.RP_ACCT_ID;
\par 
\par CREATE INDEX id_address USING BTREE ON kitsap_address (RP_ACCT_ID);
\par 
\par -- Assess number of subparcels per parcel
\par 
\par CREATE TEMPORARY TABLE kitsap_parents
\par SELECT PARCEL_ID, COUNT(PARCEL_ID) AS Subparcels , IF(SUM(TaxExempt) > 0, 1, 0) AS TaxExemptParcel, SUM(LandValue) AS LandValueParcel, SUM(ImprValue) AS ImprValueParcel
\par FROM kitsap_subparcels_4
\par WHERE PARCEL_ID IS NOT NULL
\par GROUP BY PARCEL_ID;
\par 
\par CREATE INDEX id_parents USING BTREE ON kitsap_parents (PARCEL_ID);
\par 
\par -- Presort parcel data
\par 
\par CREATE TEMPORARY TABLE kitsap_parcel_presort
\par SELECT '035' AS County, CONCAT(TRUNCATE(l.RP_ACCT_ID,0)) AS PARCEL_ID, l.ACRES AS Size_Acres, (l.ACRES * 43560) AS Size_SF, l.PROP_CLASS AS Land_Use, l.ZONE_CODE as Zoning
\par FROM kitsap_land_temp l;
\par 
\par CREATE INDEX id_presort USING BTREE ON kitsap_parcel_presort (PARCEL_ID);
\par 
\par -- Assemble parcel data
\par 
\par CREATE TEMPORARY TABLE kitsap_parcel_presort_2
\par SELECT p.County, p.PARCEL_ID, a.PLAT_ID, a.Jurisdiction, p.Size_Acres, p.Size_SF, p.Land_Use, p.Zoning
\par FROM kitsap_parcel_presort p
\par LEFT JOIN kitsap_address a ON a.RP_ACCT_ID = p.PARCEL_ID;
\par 
\par CREATE INDEX id_presort2 USING BTREE ON kitsap_parcel_presort_2 (PARCEL_ID);
\par 
\par -- Add subparcel counts
\par 
\par CREATE TEMPORARY TABLE parcels_kitsap
\par SELECT p.County, p.PARCEL_ID, p.PLAT_ID, k.Subparcels AS NumberofAccounts, k.TaxExemptParcel, k.LandValueParcel, k.ImprValueParcel, p.Jurisdiction, p.Size_Acres, p.Size_SF, p.Land_Use, p.Zoning
\par FROM kitsap_parents k
\par LEFT JOIN kitsap_parcel_presort_2 p ON p.PARCEL_ID = k.PARCEL_ID
\par WHERE p.PARCEL_ID IS NOT NULL;
\par 
\par ALTER TABLE parcels_kitsap
\par MODIFY COLUMN {\*\xmlopen\xmlns2{\factoidname PlaceType}}{\*\xmlopen\xmlns2{\factoidname place}}County{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname PlaceName}}VARCHAR{\*\xmlclose}{\*\xmlclose}(5) CHARACTER SET latin1 COLLATE latin1_swedish_ci,
\par MODIFY COLUMN PLAT_ID VARCHAR(10) CHARACTER SET latin1 COLLATE latin1_swedish_ci,
\par MODIFY COLUMN Land_Use VARCHAR(50) CHARACTER SET latin1 COLLATE latin1_swedish_ci;
\par 
\par CREATE INDEX id_code USING {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}BTREE{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}ON{\*\xmlclose}{\*\xmlclose} parcels_kitsap (County, Land_Use);
\par 
\par -- Add additional columns
\par 
\par CREATE TEMPORARY TABLE parcels_kitsap_2
\par SELECT a.County, a.PARCEL_ID, a.PLAT_ID, a.NumberofAccounts, a.TaxExemptParcel, a.LandValueParcel, a.ImprValueParcel, IF(a.Jurisdiction IS NULL, '', a.Jurisdiction) AS Jurisdiction, a.Si
ze_Acres, a.Size_SF, a.Land_Use, a.Zoning, b.land_use_description AS LandUseDescription, b.generic_land_use_1 AS GenericLandUse1, b.generic_land_use_2 AS GenericLandUse2, b.res_nonres, CONCAT(a.County, a.PARCEL_ID) AS ID_PARCEL, CONCAT(a.County, a.PLAT_ID
) AS ID_PLAT
\par FROM parcels_kitsap a
\par LEFT JOIN general.land_use_generic_reclass_2005 b ON (b.county = a.County AND b.county_land_use_code = a.Land_Use);
\par 
\par ALTER TABLE parcels_kitsap_2
\par MODIFY COLUMN Jurisdiction VARCHAR(50) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL DEFAULT '0',
\par MODIFY COLUMN LandUseDescription VARCHAR(100) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL DEFAULT '0',
\par MODIFY COLUMN GenericLandUse1 VARCHAR(50) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL DEFAULT '0',
\par MODIFY COLUMN GenericLandUse2 VARCHAR(50) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL DEFAULT '0',
\par MODIFY COLUMN res_nonres VARCHAR(10) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL DEFAULT '0',
\par MODIFY COLUMN ID_PARCEL VARCHAR(28) CHARACTER SET latin1 COLLATE latin1_swedish_ci,
\par MODIFY COLUMN ID_PLAT VARCHAR(13) CHARACTER SET latin1 COLLATE latin1_swedish_ci;
\par 
\par 
\par -- Add to final table
\par 
\par INSERT INTO all_parcels
\par (County, PARCEL_ID, PLAT_ID, NumberofAccounts, LandValueParcel, ImprValueParcel, TaxExemptParcel, Jurisdiction, Size_Acres, Size_SF, Land_Use, Zoning, LandUseDescription, GenericLandUse1, GenericLandUse2, res_nonres, ID_PARCEL, ID_PLAT)
\par SELECT County, PARCEL_ID, PLAT_ID, NumberofAccounts, LandValueParcel, ImprValueParcel, TaxExemptParcel, Jurisdiction, Size_Acres, Size_SF, Land_Use, Zoning, LandUseDescription, GenericLandUse1, GenericLandUse2, res_nonres, ID_PARCEL, ID_PLAT
\par FROM parcels_kitsap_2;
\par 
\par --
\par -- Assembly of sales 
\par --
\par 
\par -- Collect initial variables
\par 
\par CREATE TEMPORARY TABLE sales_kitsap
\par SELECT '035' AS County, CONCAT(TRUNCATE(RP_ACCT_ID,0)) AS AccountID, EXCISE_NO AS ExciseTaxNumber, SALE_DATE AS SaleDate, PRICE AS SalePrice, 0 AS PPropPrice, '' AS BuyerNa
me, '' AS SellerName, IF(DEED_TYPE IS NULL, '', DEED_TYPE) AS DeedType, IF(INVALID_CD IS NULL, '', INVALID_CD) AS SaleWarnings
\par FROM kitsap_sale_temp s
\par WHERE YEAR(SALE_DATE) > 1996;
\par 
\par CREATE INDEX id_excise USING BTREE ON sales_kitsap (ExciseTaxNumber);
\par 
\par -- Count number of accounts per sale
\par 
\par CREATE TEMPORARY TABLE sales_kitsap_counts
\par SELECT ExciseTaxNumber, COUNT(ExciseTaxNumber) AS NumberofAccounts FROM sales_kitsap GROUP BY ExciseTaxNumber;
\par 
\par CREATE INDEX id_excise USING BTREE ON sales_kitsap_counts (ExciseTaxNumber);
\par 
\par -- Join counts to main table
\par 
\par ALTER TABLE sales_kitsap
\par MODIFY COLUMN ExciseTaxNumber VARCHAR(25) NULL,
\par MODIFY COLUMN DeedType VARCHAR(50) NOT NULL DEFAULT '0',
\par MODIFY COLUMN SaleWarnings VARCHAR(50) NOT NULL DEFAULT '0';
\par 
\par CREATE TEMPORARY TABLE sales_kitsap_2
\par SELECT s.County, s.AccountID, s.ExciseTaxNumber, c.NumberofAccounts, s.SaleDate, s.SalePrice, s.PPropPrice, s.BuyerName, s.SellerName, s.DeedType, s.SaleWarnings
\par FROM sales_kitsap s
\par LEFT JOIN sales_kitsap_counts c ON c.ExciseTaxNumber = s.ExciseTaxNumber;
\par 
\par -- Add descriptions of sales instruments
\par 
\par CREATE TEMPORARY TABLE sales_kitsap_3
\par SELECT a.*, IF(i.InstrumentDescr IS NULL, '', i.InstrumentDescr) AS InstrumentDescr, IF(i.ValidInstrument IS NULL, '', i.ValidInstrument) AS ValidInstrument
\par FROM sales_kitsap_2 a
\par LEFT JOIN general.instrumenttypes i ON (a.County = i.County AND a.DeedType = i.InstrumentType);
\par 
\par ALTER TABLE sales_kitsap_3
\par MODIFY COLUMN DeedType VARCHAR(255) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL DEFAULT '0';
\par 
\par CREATE INDEX id_salewarnings USING {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}BTREE{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}ON{\*\xmlclose}{\*\xmlclose} sales_kitsap_3 (County, SaleWarnings);
\par 
\par -- Add descriptions of sales warnings
\par 
\par CREATE TEMPORARY TABLE sales_kitsap_4
\par SELECT a.*, IF(s.SWarnDescr IS NULL, '', s.SWarnDescr) AS SWarnDescr,
\par IF(s.ValidSale IS NULL, '0', s.ValidSale) AS ValidSale, CONCAT(a.County, a.AccountID) AS ID_SUBPARCEL,
\par CONCAT(a.County,a.ExciseTaxNumber,a.AccountID) AS ID_SALE
\par FROM sales_kitsap_3 a
\par LEFT JOIN general.salewarnings s ON (a.County = s.County AND a.SaleWarnings = s.SaleWarnings);
\par 
\par ALTER TABLE sales_kitsap_4
\par MODIFY COLUMN InstrumentDescr VARCHAR(50) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL DEFAULT '0',
\par MODIFY COLUMN ValidInstrument INT NOT NULL DEFAULT 0,
\par MODIFY COLUMN SWarnDescr VARCHAR(150) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL DEFAULT '0',
\par MODIFY COLUMN ValidSale INT NOT NULL DEFAULT 0;
\par 
\par -- Add to final table
\par 
\par INSERT INTO all_sales
\par (County, AccountID, ExciseTaxNumber, NumberofAccounts, SaleDate, SalePrice, PPropPrice, BuyerName, SellerName, DeedType, SaleWarnings, InstrumentDescr, ValidInstrument, SWarnDescr, ValidSale, ID_SUBPARCEL, ID_SALE)
\par {\*\xmlopen\xmlns2{\factoidname PlaceName}}{\*\xmlopen\xmlns2{\factoidname place}}SELECT{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname PlaceType}}County{\*\xmlclose}{\*\xmlclose}
, AccountID, ExciseTaxNumber, NumberofAccounts, SaleDate, SalePrice, PPropPrice, BuyerName, SellerName, DeedType, SaleWarnings, InstrumentDescr, ValidInstrument, SWarnDescr, ValidSale, ID_SUBPARCEL, ID_SALE
\par FROM sales_kitsap_4;
\par 
\par FLUSH TABLES;
\par 
\par -- ----------------------------------------------------------------------
\par 
\par 
\par 
\par 
\par -- ----------------------------------------------------------------------
\par -- {\*\xmlopen\xmlns2{\factoidname PlaceName}}{\*\xmlopen\xmlns2{\factoidname place}}PIERCE{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname PlaceType}}COUNTY{\*\xmlclose}{\*\xmlclose} DATA 
\par -- ----------------------------------------------------------------------
\par 
\par --
\par -- Copy raw data to working directory 
\par --
\par 
\par FLUSH TABLES;
\par USE workspace;
\par 
\par CREATE TEMPORARY TABLE pierce_buildings_temp
\par SELECT * FROM pierce_20051115.improvement;
\par 
\par CREATE TEMPORARY TABLE pierce_account_temp
\par SELECT * FROM pierce_20051115.account;
\par 
\par CREATE TEMPORARY TABLE pierce_valuedetail_temp
\par SELECT * FROM pierce_20051115.valuedetail;
\par 
\par CREATE TEMPORARY TABLE pierce_sales_temp
\par SELECT * FROM pierce_20051115.sales;
\par 
\par CREATE TEMPORARY TABLE spatialdata
\par SELECT * FROM spatial.spatial_2005;
\par 
\par CREATE TEMPORARY TABLE pierce_value_temp
\par SELECT * FROM pierce_200603_gis.taxpar;
\par 
\par CREATE TEMPORARY TABLE building_type_pierce
\par SELECT * FROM general.building_type_reclass_2005 {\*\xmlopen\xmlns2{\factoidname PlaceName}}{\*\xmlopen\xmlns2{\factoidname place}}WHERE{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname PlaceType}}County{\*\xmlclose}{\*\xmlclose} = '053';
\par 
\par CREATE INDEX building_pierce USING BTREE ON building_type_pierce (building_use_code);
\par 
\par CREATE INDEX id_spatial USING BTREE ON spatialdata (ID_PARCEL);
\par 
\par --
\par -- Assembly of building data 
\par --
\par 
\par -- Collect all building data
\par 
\par CREATE TEMPORARY TABLE pierce_buildings
\par SELECT 
\par '053' AS County, 
\par AccountNo AS AccountID, 
\par BldgID AS BuildingID, 
\par IF(PropType = '{\*\xmlopen\xmlns2{\factoidname PlaceName}}{\*\xmlopen\xmlns2{\factoidname place}}Out{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname PlaceType}}Building{\*\xmlclose}{\*\xmlclose}', 0, 1) AS BuildingFlag, 
\par IF(PropType = '{\*\xmlopen\xmlns2{\factoidname PlaceName}}{\*\xmlopen\xmlns2{\factoidname place}}Out{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname PlaceType}}Building{\*\xmlclose}{\*\xmlclose}', 1, 0) AS OutbuildingFlag, 
\par OccCode AS BuildingUseCode, 
\par SF AS BldgSF, 
\par Stories, 
\par IF(i.SF IS NOT NULL AND i.Stories IS NOT NULL AND i.Stories <> 0, i.SF/i.Stories, NULL) AS Footprint,
\par YrBuilt AS YearBuilt, 
\par Quality AS BldgQuality, 
\par i.Condition AS BldgCondition, 
\par Units, 
\par Bedrooms, 
\par 0 AS BathFull, 
\par 0 AS Bath3Qtr, 
\par 0 AS BathHalf, 
\par Baths AS Bathrooms 
\par FROM pierce_buildings_temp i;
\par 
\par -- Add additional columns
\par 
\par CREATE TEMPORARY TABLE pierce_buildings_2
\par SELECT
\par a.*,
\par IF((b.general_category <> 'Single Family Residential' AND b.general_category <> 'Multi-Family Residential' AND b.general_category <>
 'Condo Residential' AND b.general_category <> 'Mobile Home'),0,IF(b.general_category = 'Condo Residential' OR b.general_category = 'Mobile Home' OR (a.Units = 0 AND a.Bedrooms > 0), 1, a.Units)) AS NumberofUnits,
\par b.building_use_description AS BuildingUseDescription,
\par b.general_category AS GeneralCategory,
\par b.general_category_code AS GeneralCategoryCode,
\par b.building_type AS BuildingType,
\par b.building_type_desc AS BuildingTypeDesc,
\par CONCAT(a.County,a.AccountID) AS ID_SUBPARCEL
\par FROM pierce_buildings  a
\par LEFT JOIN building_type_pierce b ON a.BuildingUseCode = b.building_use_code;
\par 
\par -- Ensure that data corresponds to common format
\par 
\par ALTER TABLE pierce_buildings_2
\par MODIFY COLUMN {\*\xmlopen\xmlns2{\factoidname PlaceType}}{\*\xmlopen\xmlns2{\factoidname place}}County{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname PlaceName}}VARCHAR{\*\xmlclose}{\*\xmlclose}
(5) CHARACTER SET latin1 COLLATE latin1_swedish_ci DEFAULT NULL,
\par MODIFY COLUMN AccountID VARCHAR(25) CHARACTER SET latin1 COLLATE latin1_swedish_ci DEFAULT NULL, 
\par MODIFY COLUMN BuildingID VARCHAR(25) CHARACTER SET latin1 COLLATE latin1_swedish_ci DEFAULT NULL, 
\par MODIFY COLUMN BuildingFlag INTEGER UNSIGNED DEFAULT 0, 
\par MODIFY COLUMN OutbuildingFlag INTEGER UNSIGNED DEFAULT 0,
\par MODIFY COLUMN BuildingUseCode VARCHAR(50) CHARACTER SET latin1 COLLATE latin1_swedish_ci,
\par MODIFY COLUMN BldgSF INTEGER(20),
\par MODIFY COLUMN Stories DOUBLE(5,2) NOT NULL DEFAULT 0,
\par MODIFY COLUMN Footprint INTEGER UNSIGNED DEFAULT 0,
\par MODIFY COLUMN YearBuilt INTEGER UNSIGNED DEFAULT 0,
\par MODIFY COLUMN BldgQuality VARCHAR(50) CHARACTER SET latin1 DEFAULT '0' COLLATE latin1_swedish_ci,
\par MODIFY COLUMN BldgCondition VARCHAR(50) CHARACTER SET latin1 DEFAULT '0' COLLATE latin1_swedish_ci,
\par MODIFY COLUMN NumberofUnits INT UNSIGNED DEFAULT 0,
\par MODIFY COLUMN Bedrooms INT UNSIGNED NOT NULL DEFAULT 0, 
\par MODIFY COLUMN BathFull INT UNSIGNED NOT NULL DEFAULT 0,
\par MODIFY COLUMN Bath3Qtr INT UNSIGNED NOT NULL DEFAULT 0,
\par MODIFY COLUMN BathHalf INT UNSIGNED NOT NULL DEFAULT 0,
\par MODIFY COLUMN Bathrooms DOUBLE(5,2) DEFAULT 0,
\par MODIFY COLUMN BuildingUseDescription VARCHAR(100) CHARACTER SET latin1 COLLATE latin1_swedish_ci,
\par MODIFY COLUMN GeneralCategory VARCHAR(50) CHARACTER SET latin1 COLLATE latin1_swedish_ci,
\par MODIFY COLUMN GeneralCategoryCode INT(5) NOT NULL DEFAULT 0, 
\par MODIFY COLUMN BuildingType INT(1) NOT NULL DEFAULT 0, 
\par MODIFY COLUMN BuildingTypeDesc VARCHAR(50) CHARACTER SET latin1 COLLATE latin1_swedish_ci,
\par MODIFY COLUMN ID_SUBPARCEL VARCHAR(25) CHARACTER SET latin1 COLLATE latin1_swedish_ci;
\par 
\par -- Add to final table
\par 
\par INSERT INTO all_buildings 
\par (County, AccountID, BuildingID, BuildingFlag, OutbuildingFlag, BuildingUseCode, BldgSF, Stories, Footprint, YearBuilt, BldgQuality, BldgCondition, NumberofUnits, Bedrooms, BathFull, Bath3Qtr, BathHalf, Bathrooms, BuildingUseDescription, GeneralCategory, G
eneralCategoryCode, BuildingType, BuildingTypeDesc, ID_SUBPARCEL) 
\par SELECT County, AccountID, BuildingID, BuildingFlag, OutbuildingFlag, BuildingUseCode, BldgSF, Stories, Footprint, YearBuilt, BldgQuality, BldgCondition, NumberofUnits, Bedrooms, BathFull, Ba
th3Qtr, BathHalf, Bathrooms, BuildingUseDescription, GeneralCategory, GeneralCategoryCode, BuildingType, BuildingTypeDesc, ID_SUBPARCEL FROM pierce_buildings_2;
\par 
\par --
\par -- Assembly of subparcel data
\par --
\par 
\par -- -----------------
\par -- Leaseholds / mobile homes have inconsistent Parcel / Account Numbers.  Query formed where 
\par -- AccountNo, ParcelNB not equal.  Other subparcels obtained from GIS shapefile:  condos located 
\par -- with circles on reference parcels (pierce_condos_2005).  
\par -- -----------------
\par 
\par -- Extract mobile homes from Pierce data
\par 
\par CREATE TEMPORARY TABLE pierce_mh
\par SELECT
\par '053' AS County,
\par {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}ParcelNB{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}AS{\*\xmlclose}{\*\xmlclose} PARCEL_ID,
\par AccountNo AS AccountID,
\par 1 AS SubparcelFlag
\par FROM pierce_account_temp a WHERE AccountNo <> ParcelNB;
\par 
\par -- Extract condos from Pierce data (note that this must be done with GIS shapefiles)
\par 
\par -- Select parcels with AREA = 78.35938, export features
\par -- Select parcels without AREA = 78.35938, export features
\par -- Plot centroids for condo units
\par -- Spatial join to nearest noncondo parcel
\par -- Check distance to nearest parcel (should be ~4.949747)
\par 
\par CREATE TEMPORARY TABLE pierce_condos_sort
\par SELECT
\par '053' AS County,
\par c.PARCEL_ID,
\par c.ACCOUNT_ID AS AccountID,
\par 1 AS SubparcelFlag
\par FROM general.pierce_condos_2005 c;
\par 
\par CREATE INDEX id_condo USING BTREE ON pierce_condos_sort (AccountID);
\par 
\par -- Collate non-MH parcels
\par 
\par CREATE TEMPORARY TABLE pierce_subparcel_presort
\par SELECT 
\par '053' AS County, 
\par {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}ParcelNB{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}AS{\*\xmlclose}{\*\xmlclose} PARCEL_ID, 
\par AccountNo AS AccountID
\par FROM pierce_account_temp a WHERE AccountNo = ParcelNB;
\par 
\par CREATE INDEX id_parc USING BTREE ON pierce_subparcel_presort (PARCEL_ID);
\par 
\par -- Identify main parcels
\par 
\par CREATE TEMPORARY TABLE pierce_mainparcels
\par SELECT
\par a.County,
\par a.PARCEL_ID,
\par a.AccountID,
\par 0 AS SubparcelFlag
\par FROM pierce_subparcel_presort a
\par LEFT JOIN pierce_condos_sort b ON a.PARCEL_ID = b.AccountID
\par WHERE b.AccountID IS NULL;
\par 
\par -- Collect all subparcels
\par 
\par CREATE TEMPORARY TABLE pierce_subparcels
\par SELECT County, PARCEL_ID, AccountID, SubparcelFlag, CONCAT(County, AccountID) AS ID_SUBPARCEL  FROM pierce_mh
\par {\*\xmlopen\xmlns2{\factoidname place}}UNION{\*\xmlclose}
\par SELECT County, PARCEL_ID, AccountID, SubparcelFlag, CONCAT(County, AccountID) AS ID_SUBPARCEL  FROM pierce_condos_sort
\par {\*\xmlopen\xmlns2{\factoidname place}}UNION{\*\xmlclose}
\par SELECT County, PARCEL_ID, AccountID, SubparcelFlag, CONCAT(County, AccountID) AS ID_SUBPARCEL  FROM pierce_mainparcels;
\par 
\par ALTER TABLE pierce_subparcels
\par MODIFY COLUMN ID_SUBPARCEL VARCHAR(28) CHARACTER SET latin1 COLLATE latin1_swedish_ci DEFAULT NULL;
\par 
\par -- Assess number of buildings per subparcel
\par 
\par CREATE TEMPORARY TABLE pierce_building_sums
\par SELECT ID_SUBPARCEL, SUM(BuildingFlag) AS NumberofBuildings, SUM(OutbuildingFlag) AS NumberofOutbuildings
\par FROM pierce_buildings_2
\par GROUP BY ID_SUBPARCEL;
\par 
\par ALTER TABLE pierce_building_sums
\par MODIFY COLUMN ID_SUBPARCEL VARCHAR(28) CHARACTER SET latin1 COLLATE latin1_swedish_ci DEFAULT NULL;
\par 
\par CREATE INDEX id_buildingsums USING BTREE ON pierce_building_sums (ID_SUBPARCEL);
\par 
\par -- Merge building counts with subparcel data
\par 
\par CREATE TEMPORARY TABLE pierce_subparcels_2
\par SELECT a.County, a.PARCEL_ID, a.AccountID, a.SubparcelFlag, IF(b.NumberofBuildings IS NULL,0, b.NumberofBuildings) AS NumberofBuildings, IF(b.NumberofOutbuildings IS NULL,0, b.NumberofOutbuildings) AS NumberofOutbuildings, a.ID_SUBPARCEL, C
ONCAT(a.County, a.PARCEL_ID) AS ID_PARCEL
\par FROM pierce_subparcels a
\par LEFT JOIN pierce_building_sums b ON a.ID_SUBPARCEL = b.ID_SUBPARCEL;
\par 
\par -- Assemble land and building values
\par 
\par CREATE TEMPORARY TABLE pierce_values
\par SELECT f.TAX_PARCEL, f.IMPR_VALUE, f.LAND_VALUE, f.EXEMPT_CD FROM pierce_value_temp f ORDER BY TAX_PARCEL;
\par 
\par CREATE INDEX id_values USING BTREE ON pierce_values (TAX_PARCEL);
\par 
\par CREATE TEMPORARY TABLE pierce_subparcels_3
\par SELECT a.*, IF(b.IMPR_VALUE IS NULL, 0, b.IMPR_VALUE) AS ImprValue, IF(b.LAND_VALUE IS NULL, 0, LAND_VALUE) AS LandValue, IF(b.EXEMPT_CD IS NULL, 0, 1) AS TaxExempt
\par FROM pierce_subparcels_2 a
\par LEFT JOIN pierce_values b ON a.AccountID = b.TAX_PARCEL;
\par 
\par -- Add to final table
\par 
\par INSERT INTO all_subparcels
\par (County, PARCEL_ID, AccountID, SubparcelFlag, NumberofBuildings, NumberofOutbuildings, LandValue, ImprValue, TaxExempt, ID_SUBPARCEL, ID_PARCEL)
\par SELECT County, PARCEL_ID, AccountID, SubparcelFlag, NumberofBuildings, NumberofOutbuildings, LandValue, ImprValue, TaxExempt, ID_SUBPARCEL, ID_PARCEL FROM pierce_subparcels_3;
\par 
\par --
\par -- Assembly of parcel data
\par --
\par 
\par -- Assess land use
\par 
\par CREATE TEMPORARY TABLE pierce_landuse_presort
\par SELECT '053' AS County, {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}ParcelNB{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}AS{\*\xmlclose}{\*\xmlclose} PARCEL_ID, SUBSTRING(AbstCode,1,4) AS AbstCode, SqFt
\par FROM pierce_valuedetail_temp
\par WHERE AccountNo = ParcelNB AND Status = 'A'
\par ORDER BY ParcelNB, SqFt DESC;
\par 
\par CREATE TEMPORARY TABLE pierce_landuse
\par SELECT a.*, SUM(SqFt) AS TotalSqFt
\par FROM pierce_landuse_presort a
\par GROUP BY PARCEL_ID
\par ORDER BY PARCEL_ID, SqFt DESC;
\par 
\par ALTER TABLE pierce_landuse
\par MODIFY COLUMN {\*\xmlopen\xmlns2{\factoidname PlaceType}}{\*\xmlopen\xmlns2{\factoidname place}}County{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname PlaceName}}VARCHAR{\*\xmlclose}{\*\xmlclose}(3) CHARACTER SET latin1 COLLATE latin1_swedish_ci,
\par MODIFY COLUMN PARCEL_ID VARCHAR(25) CHARACTER SET latin1 COLLATE latin1_swedish_ci;
\par 
\par CREATE INDEX parcel USING BTREE ON pierce_landuse (PARCEL_ID);
\par 
\par -- Assess number of subparcels per parcel
\par 
\par CREATE TEMPORARY TABLE pierce_parents
\par SELECT PARCEL_ID, COUNT(PARCEL_ID) AS Subparcels, IF(SUM(TaxExempt) > 0, 1, 0) AS TaxExemptParcel, SUM(LandValue) AS LandValueParcel, SUM(ImprValue) AS ImprValueParcel
\par FROM pierce_subparcels_3
\par WHERE PARCEL_ID IS NOT NULL
\par GROUP BY PARCEL_ID;
\par 
\par ALTER TABLE pierce_parents
\par MODIFY COLUMN PARCEL_ID VARCHAR(25) CHARACTER SET latin1 COLLATE latin1_swedish_ci;
\par 
\par CREATE INDEX id_parents USING BTREE ON pierce_parents (PARCEL_ID);
\par 
\par -- Presort parcel data
\par 
\par CREATE TEMPORARY TABLE pierce_parcel_presort
\par SELECT '053' AS County, a.ParcelNB AS PARCEL_ID, a.LocationCity AS Jurisdiction, a.Zoning
\par FROM pierce_account_temp a
\par WHERE a.ParcelNB = a.AccountNo;
\par 
\par CREATE INDEX id_presort USING BTREE ON pierce_parcel_presort (PARCEL_ID);
\par 
\par ALTER TABLE pierce_parcel_presort
\par MODIFY COLUMN PARCEL_ID VARCHAR(25) CHARACTER SET latin1 COLLATE latin1_swedish_ci;
\par 
\par -- Include land use and area
\par 
\par CREATE TEMPORARY TABLE pierce_parcel_presort_2
\par SELECT a.*, b.AbstCode AS Land_Use, b.TotalSqFt AS Size_SF, (b.TotalSqFt / 43560) AS Size_Acres
\par FROM pierce_parcel_presort a
\par LEFT JOIN pierce_landuse b ON a.PARCEL_ID = b.PARCEL_ID;
\par 
\par CREATE INDEX parcel USING {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}BTREE{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}ON{\*\xmlclose}{\*\xmlclose} pierce_parcel_presort_2 (PARCEL_ID);
\par 
\par -- Assemble parcel data and subparcel counts
\par 
\par CREATE TEMPORARY TABLE parcels_pierce
\par SELECT p.County, p.PARCEL_ID, k.Subparcels AS NumberofAccounts, k.TaxExemptParcel, k.LandValueParcel, k.ImprValueParcel, p.Jurisdiction, p.Size_Acres, p.Size_SF, p.Land_Use, p.Zoning
\par FROM pierce_parents k
\par LEFT JOIN pierce_parcel_presort_2 p ON p.PARCEL_ID = k.PARCEL_ID
\par WHERE p.PARCEL_ID IS NOT NULL;
\par 
\par ALTER TABLE parcels_pierce
\par MODIFY COLUMN {\*\xmlopen\xmlns2{\factoidname PlaceType}}{\*\xmlopen\xmlns2{\factoidname place}}County{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname PlaceName}}VARCHAR{\*\xmlclose}{\*\xmlclose}(5) CHARACTER SET latin1 COLLATE latin1_swedish_ci,
\par MODIFY COLUMN Land_Use VARCHAR(50) CHARACTER SET latin1 COLLATE latin1_swedish_ci;
\par 
\par CREATE INDEX id_code USING {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}BTREE{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}ON{\*\xmlclose}{\*\xmlclose} parcels_pierce (County, Land_Use);
\par 
\par -- Add additional columns
\par 
\par CREATE TEMPORARY TABLE parcels_pierce_2
\par SELECT a.County, a.PARCEL_ID, LEFT(a.PARCEL_ID,6) AS PLAT_ID, a.NumberofAccounts, a.TaxExemptParc
el, a.LandValueParcel, a.ImprValueParcel, IF(a.Jurisdiction IS NULL, '', a.Jurisdiction) as Jurisdiction, a.Size_Acres, a.Size_SF, a.Land_Use, IF(a.Zoning IS NULL, '', a.Zoning) AS Zoning, IF(b.land_use_description IS NULL, '', b.land_use_description) AS 
L
andUseDescription, IF(b.generic_land_use_1 IS NULL, '', b.generic_land_use_1) AS GenericLandUse1, IF(b.generic_land_use_2 IS NULL, '', b.generic_land_use_2) AS GenericLandUse2, IF(b.res_nonres IS NULL, '', b.res_nonres) AS res_nonres, CONCAT(a.County, a.P
ARCEL_ID) AS ID_PARCEL, CONCAT(a.County, LEFT(a.PARCEL_ID,6)) AS ID_PLAT
\par FROM parcels_pierce a
\par LEFT JOIN general.land_use_generic_reclass_2005 b ON (b.county = a.County AND b.county_land_use_code = a.Land_Use);
\par 
\par ALTER TABLE parcels_pierce_2
\par MODIFY COLUMN PLAT_ID VARCHAR(10) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL DEFAULT '0',
\par MODIFY COLUMN Jurisdiction VARCHAR(50) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL DEFAULT '0',
\par MODIFY COLUMN LandUseDescription VARCHAR(100) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL DEFAULT '0',
\par MODIFY COLUMN GenericLandUse1 VARCHAR(50) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL DEFAULT '0',
\par MODIFY COLUMN GenericLandUse2 VARCHAR(50) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL DEFAULT '0',
\par MODIFY COLUMN res_nonres VARCHAR(10) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL DEFAULT '0',
\par MODIFY COLUMN ID_PARCEL VARCHAR(28) CHARACTER SET latin1 COLLATE latin1_swedish_ci,
\par MODIFY COLUMN ID_PLAT VARCHAR(13) CHARACTER SET latin1 COLLATE latin1_swedish_ci;
\par 
\par 
\par -- Add to final table
\par 
\par INSERT INTO all_parcels
\par (County, PARCEL_ID, PLAT_ID, NumberofAccounts, LandValueParcel, ImprValueParcel, TaxExemptParcel, Jurisdiction, Size_Acres, Size_SF, Land_Use, Zoning, LandUseDescription, GenericLandUse1, GenericLandUse2, res_nonres, ID_PARCEL, ID_PLAT)
\par SELECT County, PARCEL_ID, PLAT_ID, NumberofAccounts, LandValueParcel, ImprValueParcel, TaxExemptParcel, Jurisdiction, Size_Acres, Size_SF, Land_Use, Zoning, LandUseDescription, GenericLandUse1, GenericLandUse2, res_nonres, ID_PARCEL, ID_PLAT
\par FROM parcels_pierce_2;
\par 
\par --
\par -- Assembly of sales data
\par --
\par 
\par -- Collect initial variables
\par 
\par CREATE TEMPORARY TABLE sales_pierce
\par SELECT '053' AS County, AccountNo AS AccountID, RecptNo AS Excise
TaxNumber, SaleDate, SalePrice, 0 AS PPropPrice, Grantee AS BuyerName, Grantor AS SellerName, IF(DeedType IS NULL, '', DeedType) as DeedType, IF(ExcludeReason IS NULL, '', ExcludeReason) AS SaleWarnings
\par FROM pierce_sales_temp a;
\par 
\par ALTER TABLE sales_pierce
\par MODIFY COLUMN ExciseTaxNumber VARCHAR(25) NULL,
\par MODIFY COLUMN DeedType VARCHAR(50) NOT NULL DEFAULT '0',
\par MODIFY COLUMN SaleWarnings VARCHAR(50) NOT NULL DEFAULT '0';
\par 
\par CREATE INDEX id_excise USING BTREE ON sales_pierce (ExciseTaxNumber);
\par 
\par -- Count number of accounts per sale
\par 
\par CREATE TEMPORARY TABLE sales_pierce_counts
\par SELECT ExciseTaxNumber, COUNT(ExciseTaxNumber) AS NumberofAccounts FROM sales_pierce GROUP BY ExciseTaxNumber;
\par 
\par CREATE INDEX id_excise USING BTREE ON sales_pierce_counts (ExciseTaxNumber);
\par 
\par -- Join counts to main table
\par 
\par CREATE TEMPORARY TABLE sales_pierce_2
\par SELECT s.County, s.AccountID, s.ExciseTaxNumber, c.NumberofAccounts, s.SaleDate, s.SalePrice, s.PPropPrice, s.BuyerName, s.SellerName, s.DeedType, s.SaleWarnings
\par FROM sales_pierce s
\par LEFT JOIN sales_pierce_counts c ON c.ExciseTaxNumber = s.ExciseTaxNumber;
\par 
\par -- Add descriptions of sales instruments
\par 
\par CREATE TEMPORARY TABLE sales_pierce_3
\par SELECT a.*, IF(i.InstrumentDescr IS NULL, '', i.InstrumentDescr) AS InstrumentDescr, IF(i.ValidInstrument IS NULL, 0 ,i.ValidInstrument) AS ValidInstrument
\par FROM sales_pierce_2 a
\par LEFT JOIN general.instrumenttypes i ON (a.County = i.County AND a.DeedType = i.InstrumentType);
\par 
\par ALTER TABLE sales_pierce_3
\par MODIFY COLUMN DeedType VARCHAR(255) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL DEFAULT '0';
\par 
\par CREATE INDEX id_salewarnings USING {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}BTREE{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}ON{\*\xmlclose}{\*\xmlclose} sales_pierce_3 (County, SaleWarnings);
\par 
\par -- Add descriptions of sales warnings
\par 
\par CREATE TEMPORARY TABLE sales_pierce_4
\par SELECT a.*, IF(s.SWarnDescr IS NULL, '', s.SWarnDescr) AS SWarnDescr,
\par IF(s.ValidSale IS NULL, 1, s.ValidSale) AS ValidSale, CONCAT(a.County, a.AccountID) AS ID_SUBPARCEL,
\par CONCAT(a.County,a.ExciseTaxNumber,a.AccountID) AS ID_SALE
\par FROM sales_pierce_3 a
\par LEFT JOIN general.salewarnings s ON (a.County = s.County AND a.SaleWarnings = s.SaleWarnings);
\par 
\par ALTER TABLE sales_pierce_4
\par MODIFY COLUMN InstrumentDescr VARCHAR(50) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL DEFAULT '0',
\par MODIFY COLUMN ValidInstrument INT NOT NULL DEFAULT 0,
\par MODIFY COLUMN SWarnDescr VARCHAR(150) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL DEFAULT '0',
\par MODIFY COLUMN ValidSale INT NOT NULL DEFAULT 0;
\par 
\par -- Add to final table
\par 
\par INSERT INTO all_sales
\par (County, AccountID, ExciseTaxNumber, NumberofAccounts, SaleDate, SalePrice, PPropPrice, BuyerName, SellerName, DeedType, SaleWarnings, InstrumentDescr, ValidInstrument, SWarnDescr, ValidSale, ID_SUBPARCEL, ID_SALE)
\par {\*\xmlopen\xmlns2{\factoidname PlaceName}}{\*\xmlopen\xmlns2{\factoidname place}}SELECT{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname PlaceType}}County{\*\xmlclose}{\*\xmlclose}, Accoun
tID, ExciseTaxNumber, NumberofAccounts, SaleDate, SalePrice, PPropPrice, BuyerName, SellerName, DeedType, SaleWarnings, InstrumentDescr, ValidInstrument, SWarnDescr, ValidSale, ID_SUBPARCEL, ID_SALE
\par FROM sales_pierce_4;
\par 
\par FLUSH TABLES;
\par 
\par -- ----------------------------------------------------------------------
\par 
\par 
\par 
\par 
\par 
\par -- ----------------------------------------------------------------------
\par -- {\*\xmlopen\xmlns2{\factoidname PlaceName}}{\*\xmlopen\xmlns2{\factoidname place}}SNOHOMISH{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname PlaceType}}COUNTY{\*\xmlclose}{\*\xmlclose}
\par -- ----------------------------------------------------------------------
\par 
\par --
\par -- Copy raw data to working directory 
\par --
\par 
\par FLUSH TABLES;
\par USE workspace;
\par 
\par CREATE TEMPORARY TABLE snohomish_buildings_temp
\par SELECT * FROM snohomish_20060101.improvementrecord;
\par 
\par CREATE TEMPORARY TABLE snohomish_masterrecord_temp
\par SELECT * FROM snohomish_20060101.masterrecord;
\par 
\par CREATE TEMPORARY TABLE snohomish_commfloors_temp
\par SELECT * FROM snohco_data_2006.tblcommfloors;
\par 
\par CREATE TEMPORARY TABLE snohomish_parcelbase_temp
\par SELECT * FROM snohco_data_2006.tblparcel_base t order by lrsn;
\par 
\par CREATE TEMPORARY TABLE snohomish_sales_temp
\par SELECT * FROM snohco_data_2006.allsales;
\par 
\par CREATE TEMPORARY TABLE snohomish_value_temp
\par SELECT * FROM snohomish_20060331.maindata; 
\par 
\par CREATE TEMPORARY TABLE snohomish_exemptions_temp
\par SELECT * FROM snohomish_20060331.exemptions; 
\par 
\par CREATE TEMPORARY TABLE spatialdata
\par SELECT * FROM spatial.spatial_2005;
\par 
\par CREATE TEMPORARY TABLE snohomish_city_1
\par SELECT PARCEL_NUM AS PARCEL_ID, IF(SITUSCITY = 'UNKNOWN', NULL, SITUSCITY) AS CITY, LEFT(USECODE,3) AS USECODE FROM snohomish_20060331.maindata m
\par GROUP BY PARCEL_NUM;
\par 
\par CREATE TEMPORARY TABLE snohomish_city_2
\par SELECT PARCEL_ID, CITY, USECODE FROM snohomish_20050923.masterrecord m
\par GROUP BY PARCEL_ID;
\par 
\par CREATE TEMPORARY TABLE building_type_snohomish
\par SELECT * FROM general.building_type_reclass_2005 {\*\xmlopen\xmlns2{\factoidname PlaceName}}{\*\xmlopen\xmlns2{\factoidname place}}WHERE{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname PlaceType}}County{\*\xmlclose}{\*\xmlclose} = '061';
\par 
\par CREATE INDEX building_snohomish USING BTREE ON building_type_snohomish (building_use_code);
\par 
\par CREATE INDEX id_parcel USING {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}BTREE{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}ON{\*\xmlclose}{\*\xmlclose} snohomish_city_1 (PARCEL_ID); 
\par CREATE INDEX id_parcel USING {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}BTREE{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}ON{\*\xmlclose}{\*\xmlclose} snohomish_city_2 (PARCEL_ID);
\par 
\par CREATE INDEX id_spatial USING BTREE ON spatialdata (ID_PARCEL);
\par 
\par CREATE INDEX id_parcel USING BTREE ON snohomish_parcelbase_temp (PARCEL_ID);
\par CREATE INDEX id_lrsn USING BTREE ON snohomish_parcelbase_temp (lrsn);
\par 
\par CREATE INDEX id_parcel USING BTREE ON snohomish_value_temp (PARCEL_NUM);
\par 
\par CREATE INDEX id_parcel USING BTREE ON snohomish_exemptions_temp (PARCEL_NUM);
\par 
\par CREATE INDEX id_parcel USING BTREE ON snohomish_20060331.maindata (PARCEL_NUM);
\par 
\par --
\par -- Assembly of building data 
\par --
\par 
\par -- Organize main data
\par 
\par CREATE TEMPORARY TABLE snohomish_buildings_presort
\par SELECT 
\par '061' AS County, 
\par PARCEL_ID AS AccountID, 
\par REC_TYPE AS BuildingID, 
\par IMP_TYPE, 
\par ST_USECODE AS BuildingUseCode, 
\par BLDG_SQFT AS BldgSF, 
\par ROUND(STORIES,2) AS Stories, 
\par YRBUILT AS YearBuilt, 
\par Quality AS BldgQuality, 
\par COND_CODE AS BldgCondition, 
\par NUM_BDRMS AS Bedrooms, 
\par NUM_FBATH AS BathFull, 
\par 0 AS Bath3Qtr,
\par NUM_HBATH AS BathHalf, 
\par (0.5 * NUM_HBATH + NUM_FBATH) AS Bathrooms
\par FROM snohomish_buildings_temp i
\par GROUP BY PARCEL_ID, REC_TYPE;
\par 
\par CREATE INDEX id_buildings USING {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}BTREE{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}ON{\*\xmlclose}{\*\xmlclose} snohomish_buildings_presort (AccountID, BuildingID);
\par 
\par -- Attach commercial data from special extract
\par 
\par CREATE TEMPORARY TABLE snohomish_commercialSF_temp
\par SELECT lrsn, extension, SUM(base_area) AS base_area
\par FROM snohomish_commfloors_temp a
\par WHERE lrsn <> 0 AND lrsn <> 1 AND lrsn IS NOT NULL
\par GROUP BY lrsn, extension;
\par 
\par CREATE TEMPORARY TABLE snohomish_buildings_addendum
\par SELECT a.parcel_id, t.lrsn, t.extension, t.base_area AS BldgSF 
\par FROM snohomish_commercialSF_temp t 
\par LEFT JOIN snohomish_parcelbase_temp a ON a.lrsn = t.lrsn;
\par 
\par CREATE INDEX building USING BTREE ON snohomish_buildings_addendum (parcel_id, extension);
\par 
\par CREATE TEMPORARY TABLE snohomish_buildings_presort2
\par SELECT
\par a.County,
\par a.AccountID,
\par a.BuildingID,
\par IF(a.IMP_TYPE = 'OTHER', 0, 1) AS BuildingFlag,
\par IF(a.IMP_TYPE = 'OTHER', 1, 0) AS OutbuildingFlag,
\par a.BuildingUseCode,
\par IF(a.BldgSF IS NULL, b.BldgSF, a.BldgSF) AS BldgSF,
\par a.Stories,
\par IF(a.YearBuilt IS NULL, 0, a.YearBuilt) AS YearBuilt,
\par a.BldgQuality,
\par a.BldgCondition,
\par IF(a.Bedrooms IS NULL,0,a.Bedrooms) AS Bedrooms,
\par IF(a.BathFull IS NULL,0,a.BathFull) AS BathFull,
\par IF(a.Bath3Qtr IS NULL,0,a.Bath3Qtr) AS Bath3Qtr,
\par IF(a.BathHalf IS NULL,0,a.BathHalf) AS BathHalf,
\par IF(a.Bathrooms IS NULL,0,a.Bathrooms) AS Bathrooms
\par FROM snohomish_buildings_presort a
\par LEFT JOIN snohomish_buildings_addendum b ON a.AccountID = b.parcel_id AND a.BuildingID = b.extension;
\par 
\par -- Final calculation
\par 
\par CREATE TEMPORARY TABLE snohomish_buildings
\par {\*\xmlopen\xmlns2{\factoidname PlaceName}}{\*\xmlopen\xmlns2{\factoidname place}}SELECT{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname PlaceType}}County{\*\xmlclose}{\*\xmlclose}
, AccountID, BuildingID, BuildingFlag, OutbuildingFlag, BuildingUseCode, BldgSF, Stories, IF(BldgSF IS NOT NULL AND Stories IS NOT NULL, BldgSF/Stories, 0) AS Footprint, YearBuilt, BldgQuality, 
BldgCondition, Bedrooms, BathFull, Bath3Qtr, BathHalf, Bathrooms
\par FROM snohomish_buildings_presort2 a;
\par 
\par -- Add additional columns
\par 
\par CREATE TABLE snohomish_buildings_2
\par SELECT
\par a.*,
\par b.building_use_description AS BuildingUseDescription, 
\par b.general_category AS GeneralCategory, 
\par b.general_category_code AS GeneralCategoryCode,
\par b.building_type AS BuildingType, 
\par b.building_type_desc AS BuildingTypeDesc,
\par      b.housing_units_snohomish AS NumberofUnits,
\par CONCAT(a.County,a.AccountID) AS ID_SUBPARCEL
\par FROM snohomish_buildings a
\par LEFT JOIN building_type_snohomish b ON a.BuildingUseCode = b.building_use_code;
\par 
\par -- Ensure that data corresponds to common format
\par 
\par ALTER TABLE snohomish_buildings_2
\par MODIFY COLUMN {\*\xmlopen\xmlns2{\factoidname PlaceType}}{\*\xmlopen\xmlns2{\factoidname place}}County{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname PlaceName}}VARCHAR{\*\xmlclose}{\*\xmlclose}(5) CHARACT
ER SET latin1 COLLATE latin1_swedish_ci DEFAULT NULL,
\par MODIFY COLUMN AccountID VARCHAR(25) CHARACTER SET latin1 COLLATE latin1_swedish_ci DEFAULT NULL, 
\par MODIFY COLUMN BuildingID VARCHAR(25) CHARACTER SET latin1 COLLATE latin1_swedish_ci DEFAULT NULL, 
\par MODIFY COLUMN BuildingFlag INTEGER UNSIGNED DEFAULT 0,
\par MODIFY COLUMN OutbuildingFlag INTEGER UNSIGNED DEFAULT 0, 
\par MODIFY COLUMN BuildingUseCode VARCHAR(50) CHARACTER SET latin1 COLLATE latin1_swedish_ci,
\par MODIFY COLUMN BldgSF INTEGER DEFAULT 0,
\par MODIFY COLUMN Stories DOUBLE(5,2),
\par MODIFY COLUMN Footprint INTEGER, 
\par MODIFY COLUMN YearBuilt INTEGER UNSIGNED DEFAULT 0,
\par MODIFY COLUMN BldgQuality VARCHAR(50) CHARACTER SET latin1 DEFAULT '0' COLLATE latin1_swedish_ci,
\par MODIFY COLUMN BldgCondition VARCHAR(50) CHARACTER SET latin1 DEFAULT '0' COLLATE latin1_swedish_ci,
\par MODIFY COLUMN NumberofUnits INT UNSIGNED DEFAULT 0,
\par MODIFY COLUMN Bedrooms INT UNSIGNED DEFAULT 0,
\par MODIFY COLUMN BathFull INT UNSIGNED DEFAULT 0,
\par MODIFY COLUMN Bath3Qtr INT UNSIGNED DEFAULT 0, 
\par MODIFY COLUMN BathHalf INT UNSIGNED DEFAULT 0,
\par MODIFY COLUMN Bathrooms DOUBLE(5,2) DEFAULT 0,
\par MODIFY COLUMN BuildingUseDescription VARCHAR(100) CHARACTER SET latin1 COLLATE latin1_swedish_ci,
\par MODIFY COLUMN GeneralCategory VARCHAR(50) CHARACTER SET latin1 COLLATE latin1_swedish_ci,
\par MODIFY COLUMN GeneralCategoryCode INT(5) NOT NULL DEFAULT 0, 
\par MODIFY COLUMN BuildingType INT(1) NOT NULL DEFAULT 0, 
\par MODIFY COLUMN BuildingTypeDesc VARCHAR(50) CHARACTER SET latin1 COLLATE latin1_swedish_ci,
\par MODIFY COLUMN ID_SUBPARCEL VARCHAR(25) CHARACTER SET latin1 COLLATE latin1_swedish_ci;
\par 
\par -- Add to final table
\par 
\par INSERT INTO all_buildings 
\par (County, AccountID, BuildingID, BuildingFlag, OutbuildingFlag, BuildingUseCode, BldgSF, Stories, Footp
rint, YearBuilt, BldgQuality, BldgCondition, NumberofUnits, Bedrooms, BathFull, Bath3Qtr, BathHalf, Bathrooms, BuildingUseDescription, GeneralCategory, GeneralCategoryCode, BuildingType, BuildingTypeDesc, ID_SUBPARCEL) 
\par SELECT County, AccountID, BuildingID
, BuildingFlag, OutbuildingFlag, BuildingUseCode, BldgSF, Stories, Footprint, YearBuilt, BldgQuality, BldgCondition, NumberofUnits, Bedrooms, BathFull, Bath3Qtr, BathHalf, Bathrooms, BuildingUseDescription, GeneralCategory, GeneralCategoryCode, BuildingTy
pe, BuildingTypeDesc, ID_SUBPARCEL FROM snohomish_buildings_2;
\par 
\par 
\par --
\par -- Assembly of subparcel data 
\par --
\par 
\par -- -------------------------------------------
\par -- -------------------------------------------
\par -- -------------------------------------------
\par 
\par -- Note that subparcels are layered in parcel GIS layer, must be extracted.  
\par -- Import allparcels shapefile table into SQL
\par 
\par -- Identify unique parcels within database
\par 
\par CREATE TEMPORARY TABLE snohomish_allparcels_id
\par SELECT PARCEL_ID FROM snohomish_masterrecord_temp m WHERE PARCEL_ID IS NOT NULL GROUP BY PARCEL_ID;
\par CREATE INDEX allparcels USING BTREE ON snohomish_allparcels_id (PARCEL_ID);
\par 
\par -- Identify unique parcels in both database and shapefiles
\par 
\par CREATE TEMPORARY TABLE snohomish_parcels_existing
\par SELECT a.* FROM allparc a
\par LEFT JOIN snohomish_allparcels_id b ON a.PARCEL_ID = b.PARCEL_ID WHERE a.PARCEL_ID IS NOT NULL AND b.PARCEL_ID IS NOT NULL;
\par 
\par -- Separate parcels with only one object within shapefile
\par 
\par CREATE TEMPORARY TABLE snohomish_parcels_singleentry
\par SELECT PARCEL_ID FROM snohomish_parcels_existing GROUP BY PARCEL_ID HAVING COUNT(*) = 1;
\par 
\par CREATE INDEX id USING BTREE ON snohomish_parcels_singleentry (PARCEL_ID);
\par 
\par CREATE TABLE snohomish_parcels_singleentry_records
\par SELECT a.* FROM allparc a
\par LEFT JOIN snohomish_parcels_singleentry b ON a.PARCEL_ID = b.PARCEL_ID WHERE a.PARCEL_ID IS NOT NULL AND b.PARCEL_ID IS NOT NULL;
\par 
\par -- Identify multiple incidences of parcels in shapefile
\par 
\par CREATE TEMPORARY TABLE snohomish_parcels_multipleentry
\par SELECT PARCEL_ID FROM snohomish_parcels_existing GROUP BY PARCEL_ID HAVING COUNT(*) > 1;
\par 
\par CREATE INDEX id USING BTREE ON snohomish_parcels_multipleentry (PARCEL_ID);
\par 
\par CREATE TEMPORARY TABLE snohomish_parcels_multipleentry_records
\par SELECT a.* FROM allparc a
\par LEFT JOIN snohomish_parcels_multipleentry b ON a.PARCEL_ID = b.PARCEL_ID WHERE a.PARCEL_ID IS NOT NULL AND b.PARCEL_ID IS NOT NULL;
\par 
\par -- FILTER:  Cases where only one parcel has valid create / delete date values
\par 
\par CREATE TABLE snohomish_parcels_multipleentry_records_filtered1
\par SELECT * FROM snohomish_parcels_multipleentry_records
\par WHERE CREATEDATE <= date '2006-01-01' AND (DELETEDATE = date '1850-01-01' OR DELETEDATE > date '2006-01-01')
\par GROUP BY PARCEL_ID HAVING COUNT(*) = 1;
\par 
\par CREATE TEMPORARY TABLE snohomish_parcels_multipleentry_records_remove1
\par SELECT PARCEL_ID FROM snohomish_parcels_multipleentry_records_filtered1;
\par 
\par CREATE INDEX parcel USING {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}BTREE{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}ON{\*\xmlclose}{\*\xmlclose} snohomish_parcels_multipleentry_records_remove1 (PARCEL_ID);

\par 
\par CREATE TEMPORARY TABLE snohomish_parcels_multipleentry_records_remaining1
\par SELECT a.* FROM snohomish_parcels_multipleentry_records a
\par LEFT JOIN snohomish_parcels_multipleentry_records_remove1 b ON a.PARCEL_ID = b.PARCEL_ID
\par WHERE b.PARCEL_ID IS NULL;
\par 
\par -- FILTER:  Obtain parcel records where at least one parcel has not been deleted, latest create date?
\par 
\par CREATE TEMPORARY TABLE snohomish_parcels_multipleentry_records_filter2
\par SELECT PARCEL_ID FROM snohomish_parcels_multipleentry_records_remaining1 WHERE DELETEDATE = date '1850-01-01'
\par GROUP BY PARCEL_ID;
\par CREATE INDEX parcel USING {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}BTREE{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}ON{\*\xmlclose}{\*\xmlclose} snohomish_parcels_multipleentry_records_filter2 (PARCEL_ID);

\par 
\par CREATE TABLE snohomish_parcels_multipleentry_records_filtered2
\par SELECT x.* FROM (SELECT a.* FROM snohomish_parcels_multipleentry_records_remaining1 a
\par LEFT JOIN snohomish_parcels_multipleentry_records_filter2 b ON a.PARCEL_ID = b.PARCEL_ID
\par WHERE b.PARCEL_ID IS NULL
\par ORDER BY CREATEDATE desc) x
\par GROUP BY PARCEL_ID;
\par 
\par CREATE TEMPORARY TABLE snohomish_parcels_multipleentry_records_remove2
\par SELECT PARCEL_ID FROM snohomish_parcels_multipleentry_records_filtered2;
\par CREATE INDEX parcel USING {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}BTREE{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}ON{\*\xmlclose}{\*\xmlclose} snohomish_parcels_multipleentry_records_remove2 (PARCEL_ID);

\par  
\par CREATE TEMPORARY TABLE snohomish_parcels_multipleentry_records_remaining2
\par SELECT a.* FROM snohomish_parcels_multipleentry_records_remaining1 a
\par LEFT JOIN snohomish_parcels_multipleentry_records_remove2 b ON a.PARCEL_ID = b.PARCEL_ID
\par WHERE b.PARCEL_ID IS NULL;
\par 
\par -- FILTER:  Remaining - just delete invalid delete dates
\par 
\par CREATE TABLE snohomish_parcels_multipleentry_records_filtered3
\par SELECT * FROM snohomish_parcels_multipleentry_records_remaining2 a
\par WHERE (DELETEDATE = date '1850-01-01' OR DELETEDATE > date '2006-01-01');
\par 
\par -- Assemble data from the filtering phases
\par 
\par CREATE TEMPORARY TABLE snohomish_parcels_sorted
\par SELECT a.* FROM snohomish_parcels_singleentry_records a
\par {\*\xmlopen\xmlns2{\factoidname place}}UNION{\*\xmlclose}
\par SELECT b.* FROM snohomish_parcels_multipleentry_records_filtered1 b
\par {\*\xmlopen\xmlns2{\factoidname place}}UNION{\*\xmlclose}
\par SELECT c.* FROM snohomish_parcels_multipleentry_records_filtered2 c
\par {\*\xmlopen\xmlns2{\factoidname place}}UNION{\*\xmlclose} 
\par SELECT d.* FROM snohomish_parcels_multipleentry_records_filtered3 d;
\par 
\par DROP TABLE snohomish_parcels_singleentry_records;
\par DROP TABLE snohomish_parcels_multipleentry_records_filtered1;
\par DROP TABLE snohomish_parcels_multipleentry_records_filtered2;
\par DROP TABLE snohomish_parcels_multipleentry_records_filtered3;
\par 
\par -- Separate mobile homes from subparcel list
\par 
\par CREATE TABLE snohomish_parcels_MH
\par SELECT * FROM snohomish_parcels_sorted WHERE LEFT(PARCEL_ID,4) = '0096';
\par 
\par CREATE TABLE snohomish_parcels_nonMH
\par SELECT * FROM snohomish_parcels_sorted WHERE LEFT(PARCEL_ID,4) <> '0096';
\par 
\par -- Find coincident parcels (index by centroids, area), assign tag to first in numerical order
\par 
\par CREATE TEMPORARY TABLE snohomish_parcels_multiplelayers
\par SELECT x.PARCEL_ID, x.AREA, x.x_coord, x.y_coord 
\par FROM (SELECT a.* FROM snohomish_parcels_nonMH a ORDER BY PARCEL_ID) x 
\par GROUP BY AREA, x_coord, y_coord HAVING COUNT(*) > 1;
\par 
\par CREATE INDEX parcelmatch USING {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}BTREE{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}ON{\*\xmlclose}{\*\xmlclose} snohomish_parcels_multiplelayers (AREA, x_coord, y_coord);

\par 
\par -- Assemble preliminary base parcel layer
\par 
\par CREATE TABLE snohomish_base
\par SELECT a.* FROM snohomish_parcels_nonMH a
\par LEFT JOIN snohomish_parcels_multiplelayers b ON a.AREA = b.AREA AND a.x_coord = b.x_coord AND a.y_coord = b.y_coord
\par WHERE b.PARCEL_ID IS NULL OR a.PARCEL_ID = b.PARCEL_ID; 
\par 
\par CREATE TABLE snobase
\par SELECT TRUNCATE(TAXACCT_,0) AS TAXACCT_ FROM snohomish_base;
\par  
\par -- ArcGIS: export snobase to ArcGIS, index, obtain intersections for subparcel files, reimport into MySQL
\par 
\par DROP TABLE snobase;
\par 
\par CREATE TABLE snohomish_deletefrombase
\par SELECT * FROM snoint WHERE DELETEDATE < '2006-01-01' AND DELETEDATE <> '1850-01-01' GROUP BY PARCEL_ID;
\par CREATE INDEX deleteparcel USING BTREE ON snohomish_deletefrombase (PARCEL_ID);
\par 
\par -- DROP TABLE snoint;
\par 
\par CREATE TABLE snohomish_base_2
\par SELECT a.* FROM snohomish_base a
\par LEFT JOIN snohomish_deletefrombase b ON a.PARCEL_ID = b.PARCEL_ID WHERE b.PARCEL_ID IS NULL;
\par 
\par DROP TABLE snohomish_base;
\par 
\par CREATE INDEX baseparcel USING {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}BTREE{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}ON{\*\xmlclose}{\*\xmlclose} snohomish_base_2 (x_coord, y_coord, AREA);
\par 
\par CREATE TABLE snobase2
\par SELECT TRUNCATE(TAXACCT_,0) AS TAXACCT_ FROM snohomish_base_2;
\par  
\par CREATE TABLE snomh
\par SELECT PARCEL_ID, x_coord, y_coord FROM snohomish_parcels_MH GROUP BY PARCEL_ID;
\par 
\par -- ArcGIS: join MH points to base file, import correspondences to MySQL
\par 
\par DROP TABLE snohomish_parcels_mh;
\par DROP TABLE snobase2;
\par DROP TABLE snomh;
\par 
\par CREATE TABLE snohomish_subparcels_mh
\par SELECT a.PARCEL_I_1 AS PARCEL_ID, a.PARCEL_ID AS AccountID, 1 AS SubparcelFlag
\par FROM snmhjoin a; 
\par 
\par -- DROP TABLE snmhjoin;
\par 
\par CREATE TEMPORARY TABLE snohomish_subparcels_other_presort
\par SELECT a.* FROM snohomish_parcels_nonMH a
\par LEFT JOIN snohomish_deletefrombase b ON a.PARCEL_ID = b.PARCEL_ID 
\par WHERE b.PARCEL_ID IS NULL;
\par 
\par DROP TABLE snohomish_parcels_nonMH;
\par 
\par CREATE TEMPORARY TABLE snohomish_subparcels_other_prelim
\par SELECT a.PARCEL_ID AS AccountID, b.PARCEL_ID AS PARCEL_ID 
\par FROM snohomish_subparcels_other_presort a
\par LEFT JOIN snohomish_base_2 b ON a.AREA = b.AREA AND a.x_coord = b.x_coord AND a.y_coord = b.y_coord;
\par 
\par CREATE TEMPORARY TABLE snohomish_subparcels_id
\par SELECT PARCEL_ID from snohomish_subparcels_other_prelim WHERE PARCEL_ID IS NOT NULL GROUP BY PARCEL_ID HAVING COUNT(*)>1;
\par 
\par CREATE INDEX subparcelid USING BTREE ON snohomish_subparcels_id (PARCEL_ID);
\par 
\par CREATE TABLE snohomish_subparcels_other
\par SELECT a.*, IF(b.PARCEL_ID IS NOT NULL, 1, 0) AS SubparcelFlag
\par FROM snohomish_subparcels_other_prelim a
\par LEFT JOIN snohomish_subparcels_id b ON a.PARCEL_ID = b.PARCEL_ID;
\par 
\par DROP TABLE snohomish_base_2;
\par 
\par -- Sort subparcel table
\par 
\par CREATE TABLE snohomish_subparcels_temp
\par SELECT '061' AS County, PARCEL_ID, AccountID, SubparcelFlag, CONCAT('061',AccountID) AS ID_SUBPARCEL
\par FROM snohomish_subparcels_mh a
\par WHERE PARCEL_ID IS NOT NULL AND AccountID IS NOT NULL
\par {\*\xmlopen\xmlns2{\factoidname place}}UNION{\*\xmlclose}
\par SELECT '061' AS County, PARCEL_ID, AccountID, SubparcelFlag, CONCAT('061',AccountID) AS ID_SUBPARCEL
\par FROM snohomish_subparcels_other a
\par WHERE PARCEL_ID IS NOT NULL AND AccountID IS NOT NULL;
\par 
\par ALTER TABLE snohomish_subparcels_temp
\par MODIFY COLUMN ID_SUBPARCEL VARCHAR(28) CHARACTER SET latin1 COLLATE latin1_swedish_ci DEFAULT NULL;
\par 
\par DROP TABLE snohomish_subparcels_mh;
\par DROP TABLE snohomish_subparcels_other;
\par -- DROP TABLE allparc;
\par 
\par -- -------------------------------------------
\par -- -------------------------------------------
\par -- -------------------------------------------
\par 
\par 
\par CREATE TEMPORARY TABLE snohomish_subparcels_2
\par SELECT a.*, IF(b.MKIMP IS NULL, 0, b.MKIMP) AS ImprValue, IF(b.MKLND IS NULL, 0, b.MKLND) AS LandValue
\par FROM snohomish_subparcels_temp a
\par LEFT JOIN snohomish_value_temp b ON a.AccountID = b.PARCEL_NUM;
\par 
\par CREATE TEMPORARY TABLE snohomish_subparcels_3
\par SELECT a.*, IF(b.XMPTDESCR IS NOT NULL, 1, 0) AS TaxExempt
\par FROM snohomish_subparcels_2 a
\par LEFT JOIN snohomish_exemptions_temp b ON a.PARCEL_ID = b.PARCEL_NUM;
\par 
\par CREATE INDEX id_buildingsums USING {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}BTREE{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}ON{\*\xmlclose}{\*\xmlclose} snohomish_subparcels_3 (ID_SUBPARCEL);
\par 
\par -- Assess number of buildings per subparcel
\par 
\par CREATE TEMPORARY TABLE snohomish_building_sums
\par SELECT ID_SUBPARCEL, SUM(BuildingFlag) AS NumberofBuildings, SUM(OutbuildingFlag) AS NumberofOutbuildings
\par FROM snohomish_buildings_2
\par GROUP BY ID_SUBPARCEL;
\par 
\par DROP TABLE snohomish_buildings_2;
\par 
\par ALTER TABLE snohomish_building_sums
\par MODIFY COLUMN ID_SUBPARCEL VARCHAR(28) CHARACTER SET latin1 COLLATE latin1_swedish_ci DEFAULT NULL;
\par 
\par CREATE INDEX id_buildingsums USING BTREE ON snohomish_building_sums (ID_SUBPARCEL);
\par 
\par -- Merge building counts with subparcel data
\par 
\par CREATE TEMPORARY TABLE snohomish_subparcels_4
\par SELECT
 a.County, a.PARCEL_ID, a.AccountID, a.SubparcelFlag, IF(b.NumberofBuildings IS NULL,0, b.NumberofBuildings) AS NumberofBuildings, IF(b.NumberofOutbuildings IS NULL,0, b.NumberofOutbuildings) AS NumberofOutbuildings, a.LandValue, a.ImprValue, a.TaxExempt,
 a.ID_SUBPARCEL, CONCAT(a.County, a.PARCEL_ID) AS ID_PARCEL
\par FROM snohomish_subparcels_3 a
\par LEFT JOIN snohomish_building_sums b ON a.ID_SUBPARCEL = b.ID_SUBPARCEL;
\par 
\par -- Add to final table
\par 
\par INSERT INTO all_subparcels
\par (County, PARCEL_ID, AccountID, SubparcelFlag, NumberofBuildings, NumberofOutbuildings, LandValue, ImprValue, TaxExempt, ID_SUBPARCEL, ID_PARCEL)
\par SELECT County, PARCEL_ID, AccountID, SubparcelFlag, NumberofBuildings, NumberofOutbuildings, LandValue, ImprValue, TaxExempt, ID_SUBPARCEL, ID_PARCEL FROM snohomish_subparcels_4;
\par 
\par 
\par --
\par -- Assembly of parcel data
\par --
\par 
\par -- Assess number of subparcels per parcel
\par 
\par CREATE TEMPORARY TABLE snohomish_parents
\par SELECT PARCEL_ID, COUNT(PARCEL_ID) AS Subparcels, SUM(LandValue) AS LandValueParcel, SUM(ImprValue) AS ImprValueParcel, IF(SUM(TaxExempt) > 0, 1,0) AS TaxExemptParcel
\par FROM snohomish_subparcels_4
\par WHERE PARCEL_ID IS NOT NULL
\par GROUP BY PARCEL_ID;
\par 
\par CREATE INDEX id_parents USING BTREE ON snohomish_parents (PARCEL_ID);
\par 
\par -- Presort parcel data
\par 
\par CREATE TEMPORARY TABLE snohomish_parcel_presort
\par SELECT '061' AS County, m.PARCEL_ID, m.ACRES AS Size_Acres, (m.ACRES * 43560) AS Size_SF, m.ZONE_DESC AS Zoning
\par FROM snohomish_masterrecord_temp m;
\par 
\par CREATE TEMPORARY TABLE snohomish_parcel_presort_2
\par SELECT a.*, b.CITY AS Jurisdiction, b.USECODE AS Land_Use FROM snohomish_parcel_presort a
\par LEFT JOIN snohomish_city_1 b ON a.PARCEL_ID = b.PARCEL_ID;
\par 
\par CREATE TEMPORARY TABLE snohomish_parcel_presort_3
\par SELECT a.County, a.PARCEL_ID, IF(a.Jurisdiction IS NULL, b.CITY, a.Jurisdiction) AS Jurisdiction, a.Size_Acres, a.Size_SF, IF(a.Land_Use IS NULL, b.USECODE, a.Land_Use) AS Land_Use, a.Zoning
\par FROM snohomish_parcel_presort_2 a
\par LEFT JOIN snohomish_city_2 b ON a.PARCEL_ID = b.PARCEL_ID;
\par 
\par CREATE INDEX id_parcel USING {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}BTREE{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}ON{\*\xmlclose}{\*\xmlclose} snohomish_parcel_presort_3 (PARCEL_ID);
\par 
\par -- Add subparcel counts
\par 
\par CREATE TEMPORARY TABLE parcels_snohomish
\par SELECT m.County, m.PARCEL_ID, k.Subparcels AS NumberofAccounts, k.TaxExemptParcel, k.LandValueParcel, k.ImprValueParcel, m.Jurisdiction, m.Size_Acres, m.Size_SF, m.Land_Use, m.Zoning
\par FROM snohomish_parents k
\par LEFT JOIN snohomish_parcel_presort_3 m ON m.PARCEL_ID = k.PARCEL_ID
\par WHERE m.PARCEL_ID IS NOT NULL;
\par 
\par ALTER TABLE parcels_snohomish
\par MODIFY COLUMN {\*\xmlopen\xmlns2{\factoidname PlaceType}}{\*\xmlopen\xmlns2{\factoidname place}}County{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname PlaceName}}VARCHAR{\*\xmlclose}{\*\xmlclose}(5) CHARACTER SET latin1 COLLATE latin1_swedish_ci,
\par MODIFY COLUMN Land_Use VARCHAR(50) CHARACTER SET latin1 COLLATE latin1_swedish_ci;
\par 
\par CREATE INDEX id_code USING {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}BTREE{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}ON{\*\xmlclose}{\*\xmlclose} parcels_snohomish (County, Land_Use);
\par 
\par -- Add additional columns
\par 
\par CREATE TEMPORARY TABLE parcels_snohomish_2
\par SELECT a.County, a.PARCEL_ID, LEFT(a.PARCEL_ID, 6) AS PLAT_ID, a.NumberofAccounts, a.TaxExemptParcel, a.LandValueParcel, a.ImprValueParcel, IF(a
.Jurisdiction IS NULL, '', a.Jurisdiction) AS Jurisdiction, a.Size_Acres, a.Size_SF, a.Land_Use, IF(a.Zoning IS NULL, '', a.Zoning) AS Zoning, IF(b.land_use_description IS NULL, '', b.land_use_description) AS LandUseDescription, IF(b.generic_land_use_1 IS
 
NULL, '', b.generic_land_use_1) AS GenericLandUse1, IF(b.generic_land_use_2 IS NULL, '', b.generic_land_use_2) AS GenericLandUse2, IF(b.res_nonres IS NULL, '', b.res_nonres) AS res_nonres, CONCAT(a.County, a.PARCEL_ID) AS ID_PARCEL, CONCAT(a.County, LEFT(
a.PARCEL_ID,6)) AS ID_PLAT
\par FROM parcels_snohomish a
\par LEFT JOIN general.land_use_generic_reclass_2005 b ON (b.county = a.County AND b.county_land_use_code = a.Land_Use);
\par 
\par ALTER TABLE parcels_snohomish_2
\par MODIFY COLUMN PLAT_ID VARCHAR(13) CHARACTER SET latin1 COLLATE latin1_swedish_ci,
\par MODIFY COLUMN Jurisdiction VARCHAR(50) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL DEFAULT '0',
\par MODIFY COLUMN LandUseDescription VARCHAR(100) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL DEFAULT '0',
\par MODIFY COLUMN GenericLandUse1 VARCHAR(50) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL DEFAULT '0',
\par MODIFY COLUMN GenericLandUse2 VARCHAR(50) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL DEFAULT '0',
\par MODIFY COLUMN res_nonres VARCHAR(10) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL DEFAULT '0',
\par MODIFY COLUMN ID_PARCEL VARCHAR(28) CHARACTER SET latin1 COLLATE latin1_swedish_ci,
\par MODIFY COLUMN ID_PLAT VARCHAR(13) CHARACTER SET latin1 COLLATE latin1_swedish_ci;
\par 
\par -- Add to final table
\par 
\par INSERT INTO all_parcels
\par (County, PARCEL_ID, PLAT_ID, NumberofAccounts, LandValueParcel, ImprValueParcel, TaxExemptParcel, Jurisdiction, Size_Acres, Size_SF, Land_Use, Zoning, LandUseDescription, GenericLandUse1, GenericLandUse2, res_nonres, ID_PARCEL, ID_PLAT)
\par SELECT County, PARCEL_ID, PLAT_ID, NumberofAccounts, LandValueParcel, ImprValueParcel, TaxExemptParcel, Jurisdiction, Size_Acres, Size_SF, Land_Use, Zoning, LandUseDescription, GenericLandUse1, GenericLandUse2, res_nonres, ID_PARCEL, ID_PLAT
\par FROM parcels_snohomish_2;
\par 
\par DROP TABLE snohomish_deletefrombase;
\par DROP TABLE snohomish_subparcels_temp;
\par 
\par 
\par --
\par -- Assembly of sales data
\par --
\par 
\par -- Collect initial variables
\par 
\par CREATE TEMPORARY TABLE sales_snohomish
\par SELECT '061' AS Cou
nty, `Parcel Id` AS AccountID, CONCAT(YEAR(`Sale Date`),`Excise Nbr`) AS ExciseTaxNumber, `Sale Date` AS SaleDate, `Sale Price` AS SalePrice, 0 AS PPropPrice, "" AS BuyerName, Grantor AS SellerName, `Deed Type` AS DeedType, `Sale Qual Code` AS SaleWarning
s
\par FROM snohomish_sales_temp c;
\par 
\par CREATE INDEX id_excise USING BTREE ON sales_snohomish (ExciseTaxNumber);
\par 
\par -- Count number of accounts per sale
\par 
\par CREATE TEMPORARY TABLE sales_snohomish_counts
\par SELECT ExciseTaxNumber, COUNT(ExciseTaxNumber) AS NumberofAccounts FROM sales_snohomish GROUP BY ExciseTaxNumber;
\par 
\par CREATE INDEX id_excise USING BTREE ON sales_snohomish_counts (ExciseTaxNumber);
\par 
\par -- Join counts to main table
\par 
\par ALTER TABLE sales_snohomish
\par MODIFY COLUMN ExciseTaxNumber VARCHAR(25) NULL,
\par MODIFY COLUMN DeedType VARCHAR(50) NOT NULL DEFAULT '0',
\par MODIFY COLUMN SaleWarnings VARCHAR(50) NOT NULL DEFAULT '0';
\par 
\par CREATE TEMPORARY TABLE sales_snohomish_2
\par SELECT s.County, s.AccountID, s.ExciseTaxNumber, c.NumberofAccounts, s.SaleDate, s.SalePrice, s.PPropPrice, s.BuyerName, s.SellerName, s.DeedType, s.SaleWarnings
\par FROM sales_snohomish s
\par LEFT JOIN sales_snohomish_counts c ON c.ExciseTaxNumber = s.ExciseTaxNumber;
\par 
\par -- Add descriptions of sales instruments
\par 
\par CREATE TEMPORARY TABLE sales_snohomish_3
\par SELECT a.*, IF(i.InstrumentDescr IS NULL, '', i.InstrumentDescr) AS InstrumentDescr, IF(i.ValidInstrument IS NULL, 0, i.ValidInstrument) AS ValidInstrument
\par FROM sales_snohomish_2 a
\par LEFT JOIN general.instrumenttypes i ON (a.County = i.County AND a.DeedType = i.InstrumentType);
\par 
\par ALTER TABLE sales_snohomish_3
\par MODIFY COLUMN DeedType VARCHAR(255) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL DEFAULT '0';
\par 
\par CREATE INDEX id_salewarnings USING {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}BTREE{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}ON{\*\xmlclose}{\*\xmlclose} sales_snohomish_3 (County, SaleWarnings);
\par 
\par -- Add descriptions of sales warnings
\par 
\par CREATE TEMPORARY TABLE sales_snohomish_4
\par SELECT a.*, IF(s.SWarnDescr IS NULL, '', s.SWarnDescr) AS SWarnDescr,
\par IF(s.ValidSale IS NULL, '0', s.ValidSale) AS ValidSale, CONCAT(a.County, a.AccountID) AS ID_SUBPARCEL,
\par CONCAT(a.County,a.ExciseTaxNumber,a.AccountID) AS ID_SALE
\par FROM sales_snohomish_3 a
\par LEFT JOIN general.salewarnings s ON (a.County = s.County AND a.SaleWarnings = s.SaleWarnings);
\par 
\par ALTER TABLE sales_snohomish_4
\par MODIFY COLUMN InstrumentDescr VARCHAR(50) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL DEFAULT '0',
\par MODIFY COLUMN ValidInstrument INT NOT NULL DEFAULT 0,
\par MODIFY COLUMN SWarnDescr VARCHAR(150) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL DEFAULT '0',
\par MODIFY COLUMN ValidSale INT NOT NULL DEFAULT 0;
\par 
\par -- Add to final table
\par 
\par INSERT INTO all_sales
\par (County, AccountID, ExciseTaxNumber, NumberofAccounts, SaleDate, SalePrice, PPropPrice, BuyerName, SellerName, DeedType, SaleWarnings, InstrumentDescr, ValidInstrument, SWarnDescr, ValidSale, ID_SUBPARCEL, ID_SALE)
\par {\*\xmlopen\xmlns2{\factoidname PlaceName}}{\*\xmlopen\xmlns2{\factoidname place}}SELECT{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname PlaceType}}County{\*\xmlclose}{\*\xmlclose}
, AccountID, ExciseTaxNumber, NumberofAccounts, SaleDate, SalePrice, PPropPrice, BuyerName, SellerName, DeedType, SaleWarnings, InstrumentDescr, ValidInstrument, SWarnDescr, ValidSale, ID_SUBPARCEL, ID_SALE
\par FROM sales_snohomish_4;
\par 
\par FLUSH TABLES;
\par 
\par -- ----------------------------------------------------------------------
\par 
\par 
\par -- ----------------------------------------------------------------------
\par -- ADD GIS DATA TO PARCELS
\par -- ----------------------------------------------------------------------
\par 
\par 
\par --
\par -- PARCELS (plus GIS data)
\par --
\par 
\par DROP TABLE IF EXISTS all_parcels_gis;
\par CREATE TABLE all_parcels_gis (
\par   all_parcels_gis_id INT(10) unsigned NOT NULL AUTO_INCREMENT,
\par   {\*\xmlopen\xmlns2{\factoidname PlaceType}}{\*\xmlopen\xmlns2{\factoidname place}}County{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname PlaceName}}CHAR{\*\xmlclose}{\*\xmlclose}(3) NULL,
\par   PARCEL_ID VARCHAR(25) NULL,
\par   PLAT_ID VARCHAR(10) NULL,
\par   NumberofAccounts INT(11) NOT NULL DEFAULT '0',
\par   LandValueParcel INT(12) NOT NULL DEFAULT 0,
\par   ImprValueParcel INT(12) NOT NULL DEFAULT 0,
\par   TaxExemptParcel INT(5) NOT NULL DEFAULT 0,
\par   Jurisdiction VARCHAR(50) NOT NULL DEFAULT 'Unknown',
\par   Size_Acres DOUBLE(22,2) NOT NULL DEFAULT '0.00',
\par   Size_SF INT(11) NOT NULL DEFAULT '0',
\par   Land_Use VARCHAR(50) NOT NULL,
\par   Zoning VARCHAR(50) NOT NULL,
\par   LandUseDescription VARCHAR(100) NOT NULL DEFAULT '0',
\par   GenericLandUse1 VARCHAR(50) NOT NULL DEFAULT '0',
\par   GenericLandUse2 VARCHAR(50) NOT NULL DEFAULT '0',
\par   res_nonres VARCHAR(10) NOT NULL DEFAULT '0',
\par   ID_PARCEL VARCHAR(28) NULL,
\par   ID_PLAT VARCHAR(13) NULL,
\par   GIS_area_sf INT(20) NOT NULL DEFAULT '0',
\par   GIS_area_acres DOUBLE(15,2) NOT NULL DEFAULT '0.00',
\par   X_SP_HARN DOUBLE(15,5) NOT NULL DEFAULT '0.00000',
\par   Y_SP_HARN DOUBLE(15,5) NOT NULL DEFAULT '0.00000',
\par   X_SP DOUBLE(15,5) NOT NULL DEFAULT '0.00000',
\par   Y_SP DOUBLE(15,5) NOT NULL DEFAULT '0.00000',
\par   X_UTM DOUBLE(15,5) NOT NULL DEFAULT '0.00000',
\par   Y_UTM DOUBLE(15,5) NOT NULL DEFAULT '0.00000',
\par   grid_code INT(10) NOT NULL DEFAULT '0',
\par   taz_id INT(4) NOT NULL DEFAULT '0',
\par   block_id VARCHAR(20) NOT NULL DEFAULT '0',
\par   is_in_ugb INT(1) NOT NULL DEFAULT '0',
\par   PRIMARY KEY (all_parcels_gis_id),
\par   }{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\lang1046\langfe1033\langnp1046\insrsid2098316\charrsid2098316 INDEX id_parcel (ID_PARCEL)
\par }{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid2098316\charrsid2098316 )
\par ENGINE = MyISAM
\par ROW_FORMAT = Dynamic
\par CHARACTER SET latin1 COLLATE latin1_swedish_ci;
\par 
\par CREATE TEMPORARY TABLE spatialdata
\par SELECT * FROM spatial.spatial_2005;
\par 
\par CREATE INDEX parcelid USING BTREE ON spatialdata (ID_PARCEL);
\par 
\par CREATE TEMPORARY TABLE citydata
\par SELECT *, CONCAT(county, city, city_alt, parcel_zoning) AS indexvalue FROM general.city_reclass_2005;
\par 
\par ALTER TABLE citydata
\par MODIFY COLUMN indexvalue VARCHAR(100) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL DEFAULT '';
\par 
\par CREATE INDEX city USING BTREE ON citydata (indexvalue);
\par 
\par CREATE TEMPORARY TABLE all_parcels_gis_temp
\par SELECT a.County, a.PARCEL_I
D, a.PLAT_ID, a.NumberofAccounts, a.LandValueParcel, a.ImprValueParcel, a.TaxExemptParcel, a.Jurisdiction, a.Size_Acres, a.Size_SF, a.Land_Use, a.Zoning, a.LandUseDescription, a.GenericLandUse1, a.GenericLandUse2, a.res_nonres, a.ID_PARCEL, a.ID_PLAT, b.G
IS_area_sf, b.GIS_area_acres, b.X_SP_HARN, b.Y_SP_HARN, b.X_SP, b.Y_SP, b.X_UTM, b.Y_UTM, b.grid_code, b.taz_id, b.block_id, b.CityName, b.is_in_ugb, CONCAT(a.County, a.Jurisdiction, b.CityName, a.Zoning) AS indexvalue
\par FROM all_parcels a
\par LEFT JOIN spatialdata b ON a.ID_PARCEL = b.ID_PARCEL;
\par 
\par ALTER TABLE all_parcels_gis_temp
\par MODIFY COLUMN indexvalue VARCHAR(100) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL DEFAULT '';
\par 
\par CREATE TEMPORARY TABLE all_parcels_gis_temp_2
\par SELECT a.*, IF(b.city_name IS NULL, 'Unknown', b.city_name) AS Jurisdiction_final FROM all_parcels_gis_temp a
\par LEFT JOIN citydata b ON a.indexvalue = b.indexvalue;
\par 
\par INSERT INTO all_parcels_gis
\par (County, PARCEL_ID, PLAT_ID, NumberofAccounts, LandValueParcel, ImprValueParcel, TaxExemptParcel, 
Jurisdiction, Size_Acres, Size_SF, Land_Use, Zoning, LandUseDescription, GenericLandUse1, GenericLandUse2, res_nonres, ID_PARCEL, ID_PLAT, GIS_area_sf, GIS_area_acres, X_SP_HARN, Y_SP_HARN, X_SP, Y_SP, X_UTM, Y_UTM, grid_code, taz_id, block_id, is_in_ugb)

\par SELECT County, PARCEL_ID, PLAT_ID, NumberofAccounts, LandValueParcel, ImprValueParcel, TaxExemptParcel, Jurisdiction_final, Size_Acres, Size_SF, Land_Use, Zoning, LandUseDescription, GenericLandUse1, GenericLandUse2, res_nonres, ID_PARCEL, ID_PLAT, GIS_ar
ea_sf, GIS_area_acres, X_SP_HARN, Y_SP_HARN, X_SP, Y_SP, X_UTM, Y_UTM, grid_code, taz_id, block_id, is_in_ugb
\par FROM all_parcels_gis_temp_2;
\par 
\par -- -------------------------------------------------------------------
\par 
\par 
\par 
\par 
\par -- ----------------------------------------------------------------------
\par -- COLLAPSE BUILDINGS TO PARCEL (ELIMINATE SUBPARCELS), COMBINE CONDOS, ADD PROPORTIONS
\par -- ----------------------------------------------------------------------
\par 
\par 
\par FLUSH TABLES;
\par USE workspace;
\par 
\par DROP TABLE IF EXISTS all_buildings_collapsed_prelim;
\par DROP TABLE IF EXISTS all_buildings_collapsed;
\par 
\par 
\par CREATE TABLE all_buildings_collapsed_prelim (
\par   all_buildings_collapsed_id INT(10) unsigned NOT NULL AUTO_INCREMENT,
\par   County VARCHAR(5) NULL,
\par   AccountID VARCHAR(25) NULL,
\par   BuildingID VARCHAR(25) NULL,
\par   BuildingFlag INT(3) NOT NULL DEFAULT '0',
\par   OutbuildingFlag INT(3) NOT NULL DEFAULT '0',
\par   BuildingUseCode VARCHAR(50) NOT NULL DEFAULT '0',
\par   BldgSF INT(11) NOT NULL DEFAULT '0',
\par   Stories DOUBLE(5,2) NOT NULL DEFAULT '0',
\par   Footprint INT(11) NOT NULL DEFAULT '0',
\par   YearBuilt INT(11) NOT NULL DEFAULT '0',
\par   BldgQuality VARCHAR(50) NOT NULL DEFAULT '0',
\par   BldgCondition VARCHAR(50) NOT NULL DEFAULT '0',
\par   NumberofUnits INT(11) NOT NULL DEFAULT '0',
\par   Bedrooms INT(3) NOT NULL DEFAULT '0',
\par   BathFull INT(3) NOT NULL DEFAULT '0',
\par   Bath3Qtr INT(3) NOT NULL DEFAULT '0',
\par   BathHalf INT(3) NOT NULL DEFAULT '0',
\par   Bathrooms DOUBLE(5,2) NOT NULL DEFAULT '0.00',
\par   BuildingUseDescription VARCHAR(100) NOT NULL DEFAULT '0',
\par   GeneralCategory VARCHAR(50) NOT NULL DEFAULT '0',
\par   GeneralCategoryCode INT(5) NOT NULL DEFAULT '0',
\par   BuildingType INT(1) NOT NULL DEFAULT '0', 
\par   BuildingTypeDesc VARCHAR(50) NOT NULL DEFAULT '0',
\par   }{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\lang1046\langfe1033\langnp1046\insrsid2098316\charrsid2098316 ID_SUBPARCEL VARCHAR(30) NULL,
\par   PARCEL_ID VARCHAR(25) NULL,
\par   }{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid2098316\charrsid2098316 SubparcelFlag INT(11) NULL,
\par   ID_PARCEL VARCHAR(28) NULL,
\par   NumberofBuildingsParcel DOUBLE(17,0) NULL,
\par   NumberofOutbuildingsParcel DOUBLE(17,0) NULL,
\par   PRIMARY KEY (all_buildings_collapsed_id),
\par   }{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\lang1046\langfe1033\langnp1046\insrsid2098316\charrsid2098316 INDEX id_subparcel (ID_SUBPARCEL),
\par   INDEX id_parcel (ID_PARCEL)
\par }{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid2098316\charrsid2098316 )
\par ENGINE = MyISAM
\par ROW_FORMAT = Dynamic
\par CHARACTER SET latin1 COLLATE latin1_swedish_ci;
\par 
\par 
\par CREATE TABLE all_buildings_collapsed (
\par   all_buildings_collapsed_id INT(10) unsigned NOT NULL AUTO_INCREMENT,
\par   County VARCHAR(5) NULL,
\par   AccountID VARCHAR(25) NULL,
\par   BuildingID VARCHAR(25) NULL,
\par   BuildingFlag INT(3) NOT NULL DEFAULT '0',
\par   OutbuildingFlag INT(3) NOT NULL DEFAULT '0',
\par   BuildingUseCode VARCHAR(50) NOT NULL DEFAULT '0',
\par   BldgSF INT(11) NOT NULL DEFAULT '0',
\par   Stories DOUBLE(5,2) NOT NULL DEFAULT '0',
\par   Footprint INT(11) NOT NULL DEFAULT '0',
\par   YearBuilt INT(11) NOT NULL DEFAULT '0',
\par   BldgQuality VARCHAR(50) NOT NULL DEFAULT '0',
\par   BldgCondition VARCHAR(50) NOT NULL DEFAULT '0',
\par   NumberofUnits INT(11) NOT NULL DEFAULT '0',
\par   Bedrooms INT(3) NOT NULL DEFAULT '0',
\par   BathFull INT(3) NOT NULL DEFAULT '0',
\par   Bath3Qtr INT(3) NOT NULL DEFAULT '0',
\par   BathHalf INT(3) NOT NULL DEFAULT '0',
\par   Bathrooms DOUBLE(5,2) NOT NULL DEFAULT '0.00',
\par   BuildingUseDescription VARCHAR(100) NOT NULL DEFAULT '0',
\par   GeneralCategory VARCHAR(50) NOT NULL DEFAULT '0',
\par   GeneralCategoryCode INT(5) NOT NULL DEFAULT '0',
\par   BuildingType INT(1) NOT NULL DEFAULT '0', 
\par   BuildingTypeDesc VARCHAR(50) NOT NULL DEFAULT '0',
\par   }{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\lang1046\langfe1033\langnp1046\insrsid2098316\charrsid2098316 ID_SUBPARCEL VARCHAR(30) NULL,
\par   PARCEL_ID VARCHAR(25) NULL,
\par   }{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid2098316\charrsid2098316 SubparcelFlag INT(11) NULL,
\par   ID_PARCEL VARCHAR(28) NULL,
\par   all_parcels_gis_id INT(10) unsigned NOT NULL DEFAULT '0',
\par   NumberofBuildingsParcel DOUBLE(17,0) NULL,
\par   NumberofOutbuildingsParcel DOUBLE(17,0) NULL,
\par   ParcelAreaPortion INT(11) NOT NULL DEFAULT '0',
\par   ParcelValuePortion INT(11) NOT NULL DEFAULT '0',
\par   TaxExemptParcel INT(1) NOT NULL DEFAULT '0',
\par   PRIMARY KEY (all_buildings_collapsed_id),
\par   }{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\lang1046\langfe1033\langnp1046\insrsid2098316\charrsid2098316 INDEX id_subparcel (ID_SUBPARCEL),
\par   INDEX id_parcel (ID_PARCEL)
\par }{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid2098316\charrsid2098316 )
\par ENGINE = MyISAM
\par ROW_FORMAT = Dynamic
\par CHARACTER SET latin1 COLLATE latin1_swedish_ci;
\par 
\par 
\par CREATE TEMPORARY TABLE all_buildings_collapsed_temp
\par }{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\lang1046\langfe1033\langnp1046\insrsid2098316\charrsid2098316 SELECT a.*, b.PARCEL_ID, b.SubparcelFlag, b.ID_PARCEL
\par }{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid2098316\charrsid2098316 FROM all_buildings a
\par LEFT JOIN all_subparcels b ON (a.ID_SUBPARCEL = b.ID_SUBPARCEL)
\par WHERE b.PARCEL_ID IS NOT NULL;
\par 
\par CREATE TEMPORARY TABLE all_buildings_collapsed_temp_2
\par }{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\lang1046\langfe1033\langnp1046\insrsid2098316\charrsid2098316 SELECT a.*, '0' AS PARCEL_ID, 0 AS SubparcelFlag, '0' AS ID_PARCEL
\par }{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid2098316\charrsid2098316 FROM all_buildings a
\par LEFT JOIN all_subparcels b ON (a.ID_SUBPARCEL = b.ID_SUBPARCEL)
\par WHERE b.PARCEL_ID IS NULL;
\par 
\par CREATE TEMPORARY TABLE all_buildingsonparcel
\par SELECT SUM(NumberofBuildings) AS NumberofBuildingsParcel, SUM(NumberofOutbuildings) AS NumberofOutbuildingsParcel, ID_PARCEL
\par FROM all_subparcels b
\par WHERE PARCEL_ID IS NOT NULL
\par GROUP BY ID_PARCEL;
\par 
\par CREATE INDEX id_parcel USING BTREE ON all_buildingsonparcel (ID_PARCEL);
\par 
\par CREATE TEMPORARY TABLE all_buildings_collapsed_temp_combined
\par SELECT a.County, a.AccountID, a.BuildingID, a.BuildingFlag, a.OutbuildingFlag, a.BuildingUseCode, a.BldgSF, a.Stories, a.Footprint, a.YearBuilt, a.BldgQuality, a.BldgCondition, a.NumberofUnits, a.Bedrooms, a.BathFull, a.Bath3Qtr, a.BathHalf, a.Bathrooms, 
a.BuildingUseDescription, a.GeneralCategory, a.GeneralCategoryCode, a.BuildingType, a.BuildingTypeDesc, a.ID_SUBPARCEL, a.PARCEL_ID, a.SubparcelFlag, a.ID_PARCEL, b.NumberofBuildingsParcel, b.NumberofOutbuildingsParcel
\par FROM all_buildings_collapsed_temp a
\par LEFT JOIN all_buildingsonparcel b ON a.ID_PARCEL = b.ID_PARCEL;
\par 
\par ALTER TABLE all_buildings_collapsed_temp_combined ADD ID INT UNSIGNED NOT NULL AUTO_INCREMENT FIRST, ADD PRIMARY KEY (ID);
\par 
\par CREATE TEMPORARY TABLE all_buildings_collapsed_temp_combined_2
\par SELECT
 a.County, a.AccountID, a.BuildingID, a.BuildingFlag, a.OutbuildingFlag, a.BuildingUseCode, a.BldgSF, a.Stories, a.Footprint, a.YearBuilt, a.BldgQuality, a.BldgCondition, a.NumberofUnits, a.Bedrooms, a.BathFull, a.Bath3Qtr, a.BathHalf, a.Bathrooms, a.Buil
dingUseDescription, a.GeneralCategory, a.GeneralCategoryCode, a.BuildingType, a.BuildingTypeDesc, a.ID_SUBPARCEL, a.PARCEL_ID, a.SubparcelFlag, a.ID_PARCEL,  0 AS NumberofBuildingsParcel, 0 AS NumberofOutbuildingsParcel
\par FROM all_buildings_collapsed_temp_2 a;
\par 
\par ALTER TABLE all_buildings_collapsed_temp_combined_2 ADD ID INT UNSIGNED NOT NULL AUTO_INCREMENT FIRST, ADD PRIMARY KEY (ID);
\par 
\par CREATE TEMPORARY TABLE all_buildings_collapsed_combined
\par SELECT a.* FROM all_buildings_collapsed_temp_combined a
\par {\*\xmlopen\xmlns2{\factoidname place}}UNION{\*\xmlclose}
\par SELECT a.* FROM all_buildings_collapsed_temp_combined_2 a;
\par 
\par INSERT INTO all_buildings_collapsed_prelim
\par (County, AccountID, BuildingID, BuildingFlag, OutbuildingFlag, BuildingUseCode, BldgSF, Stories, Footprint, YearBuilt, BldgQuality, BldgCondition, NumberofUn
its, Bedrooms, BathFull, Bath3Qtr, BathHalf, Bathrooms, BuildingUseDescription, GeneralCategory, GeneralCategoryCode, BuildingType, BuildingTypeDesc, ID_SUBPARCEL, PARCEL_ID, SubparcelFlag, ID_PARCEL, NumberofBuildingsParcel, NumberofOutbuildingsParcel)

\par SE
LECT a.County, a.AccountID, a.BuildingID, a.BuildingFlag, a.OutbuildingFlag, a.BuildingUseCode, a.BldgSF, a.Stories, a.Footprint, a.YearBuilt, a.BldgQuality, a.BldgCondition, a.NumberofUnits, a.Bedrooms, a.BathFull, a.Bath3Qtr, a.BathHalf, a.Bathrooms, a.
BuildingUseDescription, a.GeneralCategory, a.GeneralCategoryCode, a.BuildingType, a.BuildingTypeDesc, a.ID_SUBPARCEL, a.PARCEL_ID, a.SubparcelFlag, a.ID_PARCEL, a.NumberofBuildingsParcel, a.NumberofOutbuildingsParcel
\par FROM all_buildings_collapsed_combined a;
\par 
\par CREATE TEMPORARY TABLE all_buildings_collapsed_prelim_step2
\par SELECT a.*, b.all_parcels_gis_id, b.Size_SF, (b.LandValueParcel + b.ImprValueParcel) AS TotalValueParcel, b.TaxExemptParcel FROM all_buildings_collapsed_prelim a
\par LEFT JOIN all_parcels_gis b ON a.ID_PARCEL = b.ID_PARCEL;
\par 
\par CREATE TEMPORARY TABLE all_buildings_collapsed_prelim_step3
\par SELECT ID_PARCEL, SUM(BldgSF) AS SumBldgSF
\par FROM all_buildings_collapsed_prelim
\par GROUP BY ID_PARCEL;
\par 
\par CREATE INDEX parcel USING {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}BTREE{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}ON{\*\xmlclose}{\*\xmlclose} all_buildings_collapsed_prelim_step3 (ID_PARCEL);
\par 
\par CREATE TEMPORARY TABLE all_buildings_collapsed_prelim_step4
\par SELECT a.*, b.SumBldgSF
\par FROM all_buildings_collapsed_prelim_step2 a
\par LEFT JOIN all_buildings_collapsed_prelim_step3 b ON a.ID_PARCEL = b.ID_PARCEL;
\par 
\par CREATE TEMPORARY TABLE all_buildings_collapsed_prelim_step5a
\par SELECT a.*, IF(SumBldgSF = 0, 0, FLOOR(Size_SF * (BldgSF / SumBldgSF)) ) AS ParcelAreaPortion, IF(SumBldgSF = 0, 0, FLOOR(TotalValueParcel * (BldgSF / SumBldgSF)) ) AS ParcelValuePortion
\par FROM all_buildings_collapsed_prelim_step4 a
\par WHERE SubparcelFlag = 0 OR GeneralCategoryCode = 11;
\par 
\par CREATE TEMPORARY TABLE all_buildings_collapsed_prelim_step5b
\par SELECT 
\par County, AccountID, 'comb' AS BuildingID, 1 AS BuildingFlag, 0 AS OutbuildingFlag, 
BuildingUseCode, SUM(a.BldgSF) AS BldgSF, Stories, SUM(a.BldgSF)/a.Stories AS Footprint, YearBuilt, BldgQuality, BldgCondition, SUM(a.NumberofUnits) AS NumberofUnits, SUM(a.Bedrooms) AS Bedrooms, SUM(a.BathFull) AS BathFull, SUM(a.Bath3Qtr) AS Bath3Qtr, S
U
M(a.BathHalf) AS BathHalf, SUM(a.Bathrooms) AS Bathrooms, BuildingUseDescription, GeneralCategory, GeneralCategoryCode, BuildingType, BuildingTypeDesc, ID_SUBPARCEL, PARCEL_ID, SubparcelFlag, ID_PARCEL, all_parcels_gis_id, NumberofBuildingsParcel, Numbero
fOutbuildingsParcel, IF(SumBldgSF = 0, 0, FLOOR(Size_SF * (SUM(a.BldgSF) / SumBldgSF)) ) AS ParcelAreaPortion, IF(SumBldgSF = 0, 0, FLOOR(TotalValueParcel * (SUM(a.BldgSF) / SumBldgSF)) ) AS ParcelValuePortion, TaxExemptParcel
\par FROM all_buildings_collapsed_prelim_step4 a
\par WHERE SubparcelFlag = 1 AND GeneralCategoryCode <> 11
\par GROUP BY ID_PARCEL, GeneralCategoryCode;
\par 
\par INSERT INTO all_buildings_collapsed
\par (C
ounty, AccountID, BuildingID, BuildingFlag, OutbuildingFlag, BuildingUseCode, BldgSF, Stories, Footprint, YearBuilt, BldgQuality, BldgCondition, NumberofUnits, Bedrooms, BathFull, Bath3Qtr, BathHalf, Bathrooms, BuildingUseDescription, GeneralCategory, Gen
eralCategoryCode, BuildingType, BuildingTypeDesc, ID_SUBPARCEL, PARCEL_ID, SubparcelFlag, ID_PARCEL, all_parcels_gis_id, NumberofBuildingsParcel, NumberofOutbuildingsParcel, ParcelAreaPortion, ParcelValuePortion, TaxExemptParcel)
\par SELECT County, AccountID, B
uildingID, BuildingFlag, OutbuildingFlag, BuildingUseCode, BldgSF, Stories, Footprint, YearBuilt, BldgQuality, BldgCondition, NumberofUnits, Bedrooms, BathFull, Bath3Qtr, BathHalf, Bathrooms, BuildingUseDescription, GeneralCategory, GeneralCategoryCode, B
uildingType, BuildingTypeDesc, ID_SUBPARCEL, PARCEL_ID, SubparcelFlag, ID_PARCEL, all_parcels_gis_id, NumberofBuildingsParcel, NumberofOutbuildingsParcel, ParcelAreaPortion, ParcelValuePortion, TaxExemptParcel
\par FROM all_buildings_collapsed_prelim_step5a
\par {\*\xmlopen\xmlns2{\factoidname place}}UNION{\*\xmlclose}
\par SELECT County, AccountID, BuildingID, BuildingFlag, OutbuildingFlag, BuildingUseCode, BldgSF, Stories, Footprint, YearBuilt, BldgQuality, BldgCondition, NumberofUnits, Bedrooms, BathFull, Bath3Qtr, BathHalf, Bathrooms, BuildingUseDescription, Genera
lCategory, GeneralCategoryCode, BuildingType, BuildingTypeDesc, ID_SUBPARCEL, PARCEL_ID, SubparcelFlag, ID_PARCEL, all_parcels_gis_id, NumberofBuildingsParcel, NumberofOutbuildingsParcel, ParcelAreaPortion, ParcelValuePortion, TaxExemptParcel
\par FROM all_buildings_collapsed_prelim_step5b;
\par 
\par DROP TABLE all_buildings_collapsed_prelim;
\par 
\par -- ----------------------------------------------------------------------
\par 
\par 
\par 
\par 
\par -- ----------------------------------------------------------------------
\par -- DEFINE OUTPUT TABLES
\par -- ----------------------------------------------------------------------
\par 
\par FLUSH TABLES;
\par USE workspace;
\par 
\par DROP TABLE IF EXISTS building;
\par 
\par CREATE TABLE building
\par SELECT 
\par  all_buildings_collapsed_id as building_id,
\par  all_parcels_gis_id AS parcel_id,
\par  {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}OutbuildingFlag{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}AS{\*\xmlclose}{\*\xmlclose} outbuilding_flag,
\par  BldgSF as building_sf,
\par  Stories AS stories,
\par  {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}Footprint{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}AS{\*\xmlclose}{\*\xmlclose} footprint,
\par  {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}YearBuilt{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}AS{\*\xmlclose}{\*\xmlclose} year_built,
\par  {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}BldgQuality{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}AS{\*\xmlclose}{\*\xmlclose} building_quality,
\par  {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}BldgCondition{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}AS{\*\xmlclose}{\*\xmlclose} building_condition,
\par  {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}NumberofUnits{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}AS{\*\xmlclose}{\*\xmlclose} number_of_units,
\par  Bedrooms AS bedrooms,
\par  Bathrooms AS bathrooms,
\par  {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}BuildingUseCode{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}AS{\*\xmlclose}{\*\xmlclose} building_use,
\par  BuildingUseDescription building_use_description,
\par  {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}GeneralCategoryCode{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}AS{\*\xmlclose}{\*\xmlclose} general_type_1,
\par  {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}GeneralCategory{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}AS{\*\xmlclose}{\*\xmlclose} general_type_1_description,
\par  {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}BuildingType{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}AS{\*\xmlclose}{\*\xmlclose} general_type_2,
\par  {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}BuildingTypeDesc{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}AS{\*\xmlclose}{\*\xmlclose} general_type_2_description,
\par  County AS county,
\par  ID_SUBPARCEL AS id_subparcel,
\par  }{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\lang1046\langfe1033\langnp1046\insrsid2098316\charrsid2098316 ID_PARCEL AS id_parcel,
\par  }{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid2098316\charrsid2098316 {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}SubparcelFlag{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}AS{\*\xmlclose}{\*\xmlclose}
 subparcel_flag,
\par  {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}ParcelAreaPortion{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}AS{\*\xmlclose}{\*\xmlclose} area_portion,
\par  {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}ParcelValuePortion{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}AS{\*\xmlclose}{\*\xmlclose} value_portion,
\par  {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}TaxExemptParcel{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}AS{\*\xmlclose}{\*\xmlclose} tax_exempt
\par FROM all_buildings_collapsed;
\par 
\par ALTER TABLE building 
\par MODIFY COLUMN building_id INTEGER UNSIGNED NOT NULL DEFAULT NULL AUTO_INCREMENT, 
\par ADD PRIMARY KEY (building_id);
\par 
\par CREATE TABLE parcel
\par SELECT 
\par  all_parcels_gis_id as parcel_id,
\par  {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}LandValueParcel{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}AS{\*\xmlclose}{\*\xmlclose} land_value_parcel,
\par  {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}ImprValueParcel{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}AS{\*\xmlclose}{\*\xmlclose} improvement_value_parcel,
\par  {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}TaxExemptParcel{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}AS{\*\xmlclose}{\*\xmlclose} tax_exempt_flag,
\par  Size_SF AS parcel_size_sf,
\par  Land_Use AS parcel_land_use,
\par  {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}Zoning{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}AS{\*\xmlclose}{\*\xmlclose} parcel_zoning,
\par  GenericLandUse1 AS general_use_1,
\par  GenericLandUse2 AS general_use_2,
\par  res_nonres,
\par  GIS_area_sf AS parcel_size_sf_gis,
\par  X_SP_HARN AS x_coord_sp,
\par  Y_SP_HARN AS y_coord_sp,
\par  }{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\lang1046\langfe1033\langnp1046\insrsid2098316\charrsid2098316 X_UTM AS x_utm,
\par  }{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid2098316\charrsid2098316 Y_UTM AS y_utm,
\par  grid_code AS grid_id,
\par  taz_id AS taz_id,
\par  block_id AS block_id,
\par  {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}Jurisdiction{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}AS{\*\xmlclose}{\*\xmlclose} city,
\par  is_in_ugb as ugb_flag,
\par  County as county,
\par  ID_PARCEL as id_parcel,
\par  ID_PLAT as id_plat
\par FROM all_parcels_gis;
\par 
\par ALTER TABLE parcel
\par MODIFY COLUMN parcel_id
\par  INTEGER UNSIGNED NOT NULL DEFAULT NULL AUTO_INCREMENT, 
\par ADD PRIMARY KEY (parcel_id);
\par 
\par CREATE TABLE sale
\par SELECT
\par  x.sale_id,
\par  x.accounts_in_transaction,
\par  y.all_parcels_gis_id AS parcel_id,
\par  }{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\lang1046\langfe1033\langnp1046\insrsid2098316\charrsid2098316 x.partial_parcel_flag,
\par  x.date,
\par  }{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid2098316\charrsid2098316 x.price,
\par  x.personal_property_price,
\par  x.valid_sale,
\par  x.county,
\par  }{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\lang1046\langfe1033\langnp1046\insrsid2098316\charrsid2098316 x.id_subparcel,
\par  x.id_parcel,
\par  }{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid2098316\charrsid2098316 x.id_sale
\par FROM (
\par SELECT
\par  a.all_sales_id AS sale_id,
\par  a.NumberofAccounts as accounts_in_transaction,
\par  }{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\lang1046\langfe1033\langnp1046\insrsid2098316\charrsid2098316 b.SubparcelFlag AS partial_parcel_flag,
\par  }{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid2098316\charrsid2098316 a.SaleDate as date,
\par  a.SalePrice as price,
\par  a.PPropPrice as personal_property_price,
\par  a.ValidSale as valid_sale,
\par  a.County as county,
\par  }{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\lang1046\langfe1033\langnp1046\insrsid2098316\charrsid2098316 a.ID_SUBPARCEL AS id_subparcel,
\par  b.ID_PARCEL AS id_parcel,
\par  }{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid2098316\charrsid2098316 a.ID_SALE AS id_sale
\par FROM all_sales a
\par LEFT JOIN all_subparcels b ON a.ID_SUBPARCEL = b.ID_SUBPARCEL) x
\par LEFT JOIN all_parcels_gis y ON x.id_parcel = y.ID_PARCEL
\par GROUP BY sale_id;
\par 
\par ALTER TABLE sale
\par MODIFY COLUMN sale_id INTEGER UNSIGNED NOT NULL DEFAULT NULL AUTO_INCREMENT, 
\par ADD PRIMARY KEY (sale_id);
\par 
\par -- ----------------------------------------------------------------------
\par 
\par 
\par 
\par 
\par 
\par 
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0\pararsid7044004 {\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid7044004\charrsid7044004 CREATE TEMPORARY TABLE buildings_and_plats
\par SELECT a.*, b.Size_SF, b.Zoning, b.ID_PLAT
\par FROM all_buildings_collapsed a
\par LEFT JOIN all_parcels_gis b ON a.ID_PARCEL = b.ID_PARCEL
\par WHERE OutbuildingFlag = 0;}{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid2098316 
\par }{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid7044004\charrsid7044004 
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0\pararsid2098316 {\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid2098316\charrsid2098316 CREATE TEMPORARY TABLE buildings_and_plats_1
\par SELECT ID_PLAT, COUNT(*) AS Number1990 FROM buildings_and_plats WHERE YearBuilt >= 1990
\par GROUP BY ID_PLAT;
\par 
\par CREATE TEMPORARY TABLE buildings_and_plats_2
\par SELECT ID_PLAT, COUNT(*) AS NumberAll FROM buildings_and_plats
\par GROUP BY ID_PLAT;
\par 
\par CREATE INDEX id_plat USING {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}BTREE{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}ON{\*\xmlclose}{\*\xmlclose} buildings_and_plats_1 (ID_PLAT);
\par 
\par CREATE TEMPORARY TABLE platbuildings_all
\par SELECT b.ID_PLAT, a.Number1990, b.NumberAll
\par FROM buildings_and_plats_2 b
\par LEFT JOIN buildings_and_plats_1 a ON a.ID_PLAT = b.ID_PLAT;
\par 
\par CREATE TABLE template_plat_listings
\par SELECT p.ID_PLAT 
\par FROM platbuildings_all p 
\par WHERE Number1990 IS NOT NULL AND Number1990 = NumberAll;
\par 
\par CREATE INDEX id_plat USING BTREE ON template_plat_listings (ID_PLAT);
\par 
\par CREATE TEMPORARY TABLE template_buildings_temp
\par SELECT a.* FROM buildings_and_plats a
\par LEFT JOIN template_plat_listings b ON a.ID_PLAT = b.ID_PLAT WHERE b.ID_PLAT IS NOT NULL;
\par 
\par CREATE TABLE template_buildings
\par SELECT County, AccountID, BuildingID, BuildingFlag, OutbuildingFlag, BuildingUseCode, BldgSF, Stories, Footprint, YearBuilt, BldgQuality, BldgCondition, NumberofUnits, Bedrooms, BathFull, Bath3Qtr, BathHalf, Bathrooms, Bui
ldingUseDescription, GeneralCategory, ID_SUBPARCEL, PARCEL_ID, SubparcelFlag, ID_PARCEL, NumberofBuildingsParcel, NumberofOutbuildingsParcel, Size_SF, Zoning, ID_PLAT
\par FROM template_buildings_temp
\par ORDER BY ID_PARCEL;
\par 
\par CREATE TABLE template_parcels
\par SELECT a.* FROM workspace.all_parcels_gis a
\par LEFT JOIN template_plat_listings b ON a.ID_PLAT = b.ID_PLAT WHERE b.ID_PLAT IS NOT NULL;
\par 
\par 
\par CREATE TEMPORARY TABLE buildings_and_parcel
\par SELECT a.*, b.Size_SF, b.Zoning, b.ID_PLAT
\par FROM all_buildings_collapsed a
\par LEFT JOIN all_parcels_gis b ON a.ID_PARCEL = b.ID_PARCEL
\par WHERE OutbuildingFlag = 0;
\par 
\par CREATE TEMPORARY TABLE buildings_and_parcels_1
\par SELECT ID_PARCEL, ID_PLAT, COUNT(*) AS Number1990 FROM buildings_and_parcel WHERE YearBuilt >= 1990
\par GROUP BY ID_PARCEL;
\par 
\par CREATE TEMPORARY TABLE buildings_and_parcels_2
\par SELECT ID_PARCEL, ID_PLAT, COUNT(*) AS NumberAll FROM buildings_and_parcel
\par GROUP BY ID_PARCEL;
\par 
\par CREATE INDEX id_parcel USING {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}BTREE{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}ON{\*\xmlclose}{\*\xmlclose} buildings_and_parcels_1 (ID_PARCEL);
\par 
\par CREATE TEMPORARY TABLE parcellistings_all
\par SELECT b.ID_PARCEL, b.ID_PLAT, a.Number1990, b.NumberAll
\par FROM buildings_and_parcels_2 b
\par LEFT JOIN buildings_and_parcels_1 a ON a.ID_PARCEL = b.ID_PARCEL
\par WHERE a.Number1990 = b.NumberAll;
\par 
\par CREATE INDEX id_parcel USING BTREE ON template_parcels (ID_PARCEL);
\par 
\par CREATE TEMPORARY TABLE parcellistings_all_2
\par SELECT a.ID_PARCEL, IF(b.ID_PLAT IS NOT NULL, 1, 0) AS FullPlatFlag
\par FROM parcellistings_all a
\par LEFT JOIN template_parcels b ON a.ID_PARCEL = b.ID_PARCEL;
\par 
\par CREATE INDEX id_parcel USING {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}BTREE{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}ON{\*\xmlclose}{\*\xmlclose} parcellistings_all_2 (ID_PARCEL);
\par 
\par CREATE TABLE template_parcels_all
\par SELECT a.*, b.FullPlatFlag
\par FROM all_parcels_gis a LEFT JOIN parcellistings_all_2 b ON a.ID_PARCEL = b.ID_PARCEL
\par WHERE b.ID_PARCEL IS NOT NULL;
\par 
\par CREATE TABLE template_buildings_all
\par SELECT a.*, b.FullPlatFlag
\par FROM buildings_and_parcel a LEFT JOIN parcellistings_all_2 b ON a.ID_PARCEL = b.ID_PARCEL
\par WHERE b.ID_PARCEL IS NOT NULL;
\par 
\par CREATE INDEX id_parcel USING BTREE ON template_parcels_all (ID_PARCEL);}{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid6041791\charrsid2098316 
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid6041791\charrsid10231556 
\par 
\par }{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid11483792 -- -------------------------------}{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid6041791 
\par }{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid11483792 -- END OF REGULAR CODE}{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid11483792\charrsid10231556 
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0\pararsid11483792 {\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid11483792 -- -------------------------------
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid6041791 
\par }{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid11483792 
\par 
\par 
\par 
\par }{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid11483792\charrsid10231556 
\par }{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid6041791\charrsid10231556 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par }{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid11668356\charrsid10231556 
\par }{\rtlch\fcs1 \ab\af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid11668356\charrsid10231556 -- 2001 Parcel data -- temporary, with spatial data
\par 
\par }{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid11668356\charrsid10231556 -- ----------------------------------------------------------------------
\par -- Using 2001 parcel data on network...
\par -- ----------------------------------------------------------------------
\par 
\par CREATE TABLE parcels_2001_alt
\par SELECT County, IF((mid(PARCEL_ID,7,4)='8888' AND County = '033'),CONCAT(mid(PARCEL_ID,1,6),'0000'),PARCEL_ID) AS PARCEL_ID, Land_Use, Built_SF, Improve
ment_Value, Land_Value, Lot_SF, Lot_Acres, Residential_Units, Residential_Units_Imputed, Year_Built, Land_Use_Imputed, Year_Built_Imputed, Tax_Exempt, Undevelopable
\par FROM table_temp.2001_alt;
\par 
\par CREATE TABLE parcels_2001_alt2
\par SELECT a.*, CONCAT(County, PARCEL_ID) AS ID_PARCEL  
\par FROM all_parcels_2001_alt a;
\par 
\par CREATE INDEX id_parcel USING {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}BTREE{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}ON{\*\xmlclose}{\*\xmlclose} parcels_2001_alt2 (ID_PARCEL);
\par 
\par CREATE TABLE parcels_2001_alldata
\par SELECT a.*, s.GIS_area_sf, s.GIS_area_acres, s.grid_code, s.taz_id, s.block_id, s.CityName, s.is_in_ugb
\par FROM parcels_2001_alt2 a
\par LEFT JOIN spatial.spatial_2001 s
\par ON s.ID_PARCEL = a.ID_PARCEL
\par where s.PARCEL_ID is not null and a.PARCEL_ID is not null;
\par 
\par CREATE TABLE all_parcelsdata_spatial_2005_final
\par SELECT a.*, s.county_land_use_code, s.land_use_description, s.generic_land_use_1, s.generic_land_use_2, s.res_nonres
\par FROM parcels_2001_alldata a
\par LEFT JOIN table_temp.land_use_generic_reclass s ON (a.County = s.County AND a.Land_Use = s.county_land_use_code);
\par 
\par ALTER TABLE all_parceldata_spatial_2001_final
\par MODIFY COLUMN {\*\xmlopen\xmlns2{\factoidname PlaceType}}{\*\xmlopen\xmlns2{\factoidname place}}{\*\xmlopen\xmlns2{\factoidname PlaceType}}County{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname PlaceName}}VARCHAR{\*\xmlclose}{\*\xmlclose}{\*\xmlclose}
(3) CHARACTER SET latin1 COLLATE latin1_swedish_ci,
\par MODIFY COLUMN PARCEL_ID VARCHAR(25) CHARACTER SET latin1 COLLATE latin1_swedish_ci,
\par MODIFY COLUMN Land_Use VARCHAR(50) CHARACTER SET latin1 COLLATE latin1_swedish_ci,
\par MODIFY COLUMN Built_SF INT(15),
\par MODIFY COLUMN Improvement_Value INT(15),
\par MODIFY COLUMN Land_Value INT(15),
\par MODIFY COLUMN Built_SF INT(15),
\par MODIFY COLUMN Lot_SF INT(15),
\par MODIFY COLUMN Lot_Acres DOUBLE(15,2),
\par MODIFY COLUMN Residential_Units DOUBLE(15,2),
\par MODIFY COLUMN Residential_Units_Imputed DOUBLE(15,2),
\par MODIFY COLUMN Year_Built INT(5),
\par MODIFY COLUMN Land_Use_Imputed INT(1),
\par MODIFY COLUMN Year_Built_Imputed INT(1),
\par MODIFY COLUMN Tax_Exempt INT(1),
\par MODIFY COLUMN Undevelopable INT(1);
\par 
\par DROP TABLE parcels_2001_alt;
\par DROP TABLE parcels_2001_alt2;
\par DROP TABLE parcels_2001_alldata;
\par 
\par CREATE INDEX id_parcel USING {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}BTREE{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}ON{\*\xmlclose}{\*\xmlclose} all_parceldata_spatial_2001_final (ID_PARCEL);
\par }{\rtlch\fcs1 \ab\af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid11668356\charrsid10231556 
\par }{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid11668356\charrsid10231556 ALTER TABLE all_parceldata_spatial_2001_final ADD ID INT UNSIGNED NOT NULL AUTO_INCREMENT FIRST, ADD PRIMARY KEY (ID);
\par }{\rtlch\fcs1 \ab\af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid11668356\charrsid10231556 
\par }{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid11668356\charrsid10231556 
\par }{\rtlch\fcs1 \ab\af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid11668356\charrsid10231556 -- Comparisons between 2001 and 2005: analysis of subdivisions
\par 
\par }{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid11668356\charrsid10231556 -- ----------------------------------------------------------------------
\par -- Creating tables for comparisons
\par -- ----------------------------------------------------------------------
\par 
\par CREATE TABLE parcels_not_found_in_2005
\par SELECT a.County, a.PARCEL_ID, a.GIS_area_acres, a.res_nonres, a.ID_PARCEL
\par FROM all_parceldata_spatial_2001_final a
\par LEFT JOIN all_parceldata_spatial_2005_final b ON (a.ID_PARCEL = b.ID_PARCEL)
\par WHERE b.ID_PARCEL IS NULL;
\par 
\par CREATE TABLE parcels_not_found_in_2001
\par SELECT a.County, a.PARCEL_ID, a.GIS_area_acres, a.res_nonres, a.ID_PARCEL
\par FROM all_parceldata_spatial_2005_final a
\par LEFT JOIN all_parceldata_spatial_2001_final b ON (a.ID_PARCEL = b.ID_PARCEL)
\par WHERE b.ID_PARCEL IS NULL;
\par 
\par CREATE TABLE parcels_in_2005_and_2001
\par SELECT a.County, a.PARCEL_ID, a.GIS_area_acres AS area_2001, b.GIS_area_acres AS area_2005, (b.GIS_area_acres - a.GIS_area_acres) AS area_change, a.res_nonres AS res_nonres_2001, b.res_nonres AS res_nonres_2005, a.ID_PARCEL
\par FROM all_parceldata_spatial_2001_final a
\par LEFT JOIN all_parceldata_spatial_2005_final b ON (a.ID_PARCEL = b.ID_PARCEL)
\par WHERE b.ID_PARCEL IS NOT NULL;
\par 
\par CREATE INDEX size USING {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}BTREE{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}ON{\*\xmlclose}{\*\xmlclose} parcels_in_2005_and_2001 (area_change);
\par 
\par CREATE TABLE parcels_lost_area_2005
\par SELECT a.County, a.PARCEL_ID, a.area_2001 AS GIS_area_acres, a.area_change, a.res_nonres_2001 AS res_nonres, a.ID_PARCEL
\par FROM parcels_in_2005_and_2001 a
\par WHERE (area_change < -0.009) ;
\par 
\par CREATE TABLE parcels_gained_area_2005
\par SELECT a.County, a.PARCEL_ID, a.area_2001 AS GIS_area_acres, a.area_change, a.res_nonres_2001 AS res_nonres, a.ID_PARCEL
\par FROM parcels_in_2005_and_2001 a
\par WHERE (area_change > 0.009) ;
\par 
\par CREATE TABLE possible_parents_presort
\par SELECT ID_PARCEL FROM parcels_lost_area_2005
\par {\*\xmlopen\xmlns2{\factoidname place}}UNION{\*\xmlclose}
\par SELECT ID_PARCEL FROM parcels_not_found_in_2005;
\par 
\par CREATE TABLE possible_parents
\par SELECT ID_PARCEL FROM possible_parents_presort WHERE ID_PARCEL IS NOT NULL
\par GROUP BY ID_PARCEL;
\par 
\par CREATE TABLE possible_children_presort
\par SELECT ID_PARCEL FROM parcels_gained_area_2005
\par {\*\xmlopen\xmlns2{\factoidname place}}UNION{\*\xmlclose}
\par SELECT ID_PARCEL FROM parcels_not_found_in_2001;
\par 
\par CREATE TABLE possible_children
\par SELECT ID_PARCEL FROM possible_children_presort WHERE ID_PARCEL IS NOT NULL
\par GROUP BY ID_PARCEL;
\par 
\par DROP TABLE parcels_lost_area_2005;
\par DROP TABLE parcels_gained_area_2005;
\par DROP TABLE possible_parents_presort;
\par DROP TABLE possible_children_presort;
\par 
\par 
\par -- ----------------------------------------------------------------------
\par -- Data processed for correspondences
\par -- ----------------------------------------------------------------------
\par 
\par CREATE TABLE parcels_correspondence
\par SELECT ID_PARCEL AS parent_parcel, ID_PARCEL AS child_parcel, 0 AS newparcel
\par FROM parcels_in_2005_and_2001 a
\par WHERE (area_change < -0.009 OR area_change > 0.009);
\par 
\par CREATE TABLE new_parcels
\par SELECT parcelid AS parent_parcel, ID_PARCEL AS child_parcel, 1 AS newparcel
\par FROM table_temp.parcel_new;
\par 
\par CREATE TABLE missing_parcels
\par SELECT ID_PARCEL AS parent_parcel, parcelid AS child_parcel, 0 AS newparcel
\par FROM table_temp.parcel_missing;
\par 
\par CREATE TABLE parcels_correspondences_all
\par SELECT parent_parcel, child_parcel, newparcel FROM parcels_correspondence
\par {\*\xmlopen\xmlns2{\factoidname place}}UNION{\*\xmlclose}
\par SELECT parent_parcel, child_parcel, newparcel FROM new_parcels
\par {\*\xmlopen\xmlns2{\factoidname place}}UNION{\*\xmlclose}
\par SELECT parent_parcel, child_parcel, newparcel FROM missing_parcels;
\par 
\par CREATE TABLE parcels_correspondences_all_2
\par SELECT * FROM parcels_correspondences_all
\par WHERE (SUBSTRING(parent_parcel,1,3) <> '033' OR SUBSTRING(parent_parcel,10,4) <> '7777') AND parent_parcel IS NOT NULL AND child_parcel IS NOT NULL;
\par 
\par CREATE TABLE parcels_correspondences_all_3
\par SELECT parent_parcel, child_parcel
\par FROM parcels_correspondences_all_2
\par GROUP BY parent_parcel, child_parcel;
\par 
\par CREATE INDEX parent USING {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}BTREE{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}ON{\*\xmlclose}{\*\xmlclose} parcels_correspondences_all_3 (parent_parcel);
\par CREATE INDEX child USING {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}BTREE{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}ON{\*\xmlclose}{\*\xmlclose} parcels_correspondences_all_3 (child_parcel);
\par 
\par CREATE TABLE parcels_count_parents
\par SELECT parent_parcel, COUNT(*) AS parent_number
\par FROM parcels_correspondences_all_3 WHERE parent_parcel IS NOT NULL
\par GROUP BY parent_parcel;
\par 
\par CREATE TABLE parcels_count_children
\par SELECT child_parcel, COUNT(*) AS child_number
\par FROM parcels_correspondences_all_3 WHERE child_parcel IS NOT NULL
\par GROUP BY child_parcel;
\par 
\par CREATE INDEX parent USING BTREE ON parcels_count_parents (parent_parcel);
\par CREATE INDEX child USING BTREE ON parcels_count_children (child_parcel);
\par 
\par CREATE TABLE parcels_correspondences_all_4
\par SELECT a.parent_parcel, b.parent_number, a.child_parcel
\par FROM parcels_correspondences_all_3 a
\par LEFT JOIN parcels_count_parents b ON a.parent_parcel = b.parent_parcel;
\par 
\par CREATE TABLE parcels_correspondences_all_5
\par SELECT a.parent_parcel, a.parent_number, a.child_parcel, b.child_number
\par FROM parcels_correspondences_all_4 a
\par LEFT JOIN parcels_count_children b ON a.child_parcel = b.child_parcel;
\par 
\par CREATE TABLE parcels_correspondences_all_6
\par SELECT * FROM parcels_correspondences_all_5
\par WHERE parent_number > 1 AND child_number = 1;
\par 
\par CREATE TABLE parcels_correspondences_all_7
\par SELECT a.* FROM parcels_correspondences_all_6 a
\par LEFT JOIN table_temp.exclude_children b ON (a.parent_parcel = b.PARENT_PAR AND a.child_parcel = b.CHILD_PARC)
\par WHERE b.PARENT_PAR IS NULL;
\par 
\par CREATE TABLE parent_parcel_sums
\par SELECT parent_parcel, COUNT(*) AS numparents FROM parcels_correspondences_all_7
\par GROUP BY parent_parcel;
\par 
\par CREATE INDEX parent USING BTREE ON parent_parcel_sums (parent_parcel);
\par 
\par CREATE TABLE parcels_correspondences_all_8
\par SELECT a.parent_parcel, a.child_parcel, b.numparents
\par FROM parcels_correspondences_all_7 a
\par LEFT JOIN parent_parcel_sums b ON a.parent_parcel = b.parent_parcel
\par WHERE b.numparents > 1;
\par 
\par DROP TABLE parcels_correspondence;
\par DROP TABLE new_parcels;
\par DROP TABLE missing_parcels;
\par DROP TABLE parcels_correspondences_all;
\par DROP TABLE parcels_correspondences_all_2;
\par DROP TABLE parcels_correspondences_all_3;
\par DROP TABLE parcels_correspondences_all_4;
\par DROP TABLE parcels_correspondences_all_5;
\par DROP TABLE parcels_correspondences_all_6;
\par DROP TABLE parcels_correspondences_all_7;
\par DROP TABLE parent_parcel_sums;
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0\pararsid13199804 {\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid13199804\charrsid10231556 DROP TABLE parcels_count_parents;
\par DROP TABLE parcels_count_children;
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid11668356\charrsid10231556 
\par 
\par -- ----------------------------------------------------------------------
\par -- Assessment of child parcels
\par -- ----------------------------------------------------------------------
\par 
\par CREATE TABLE subdivision_assessment_1
\par SELECT a.*, b.GIS_area_sf, b.GIS_area_acres, b.Land_Use, b.Zoning, b.LandUseDescription, b.GenericLandUse1, b.GenericLandUse2, b.res_nonres
\par FROM parcels_correspondences_all_8 a
\par LEFT JOIN all_parceldata_spatial_2005_final b ON b.ID_PARCEL = a.child_parcel
\par 
\par CREATE INDEX child_parcel USING {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}BTREE{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}ON{\*\xmlclose}{\*\xmlclose} subdivision_assessment_1 (child_parcel);
\par 
\par ID_PARCEL, BUILDINGUS, 
\par 
\par CREATE TABLE quick_pierce_reclass_1
\par SELECT q.*, b.GENERALCAT AS general_category, b.ID_PARCEL
\par FROM table_temp.pierce_reclass q;
\par 
\par CREATE INDEX parcel USING {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}BTREE{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}ON{\*\xmlclose}{\*\xmlclose} quick_pierce_reclass_1 (ID_PARCEL);
\par 
\par CREATE TABLE subdivision_assessment_2
\par SELECT a.parent_parcel, a.child_parcel, a.numparents, a.GIS_area_sf, a.GIS_area_acres, a.Land_Use, a.Zoning, LandUseDescription, IF(SUBSTRING(ID_PARCEL,1,3) = '053', NULL(q.general_category, 'Vacant'), a.GenericLandUse1) AS GenericLandUse1, a.Generi
cLandUse2, a.res_nonres
\par FROM subdivision_assessment_1 a
\par LEFT JOIN quick_pierce_reclass_1 q ON q.ID_PARCEL = a.child_parcel;
\par 
\par CREATE TABLE subdivision_assessment_3
\par SELECT parent_parcel, child_parcel, numparents, GIS_area_sf, GIS_area_acres, Land_Use, Zoning, LandUseDescription, IFNULL(GenericLandUse1, 'Vacant') AS GenericLandUse1, GenericLandUse2, res_nonres
\par FROM subdivision_assessment_2;
\par 
\par ALTER TABLE subdivision_assessment_3 MODIFY COLUMN GenericLandUse1 VARCHAR(50) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL DEFAULT 'No Code';
\par 
\par ALTER TABLE `table_temp`.`itemized_chart` 
\par CHANGE COLUMN `GENERAL_CA` `general_category` VARCHAR(33) CHARACTER SET latin1 COLLATE latin1_swedish_ci,
\par  MODIFY COLUMN `AGRIC` INTEGER(25) UNSIGNED,
\par  MODIFY COLUMN `CIVIC` INTEGER(25) UNSIGNED,
\par  MODIFY COLUMN `COMME` INTEGER(25) UNSIGNED,
\par  MODIFY COLUMN `FISHE` INTEGER(25) UNSIGNED,
\par  MODIFY COLUMN `FORES` INTEGER(25) UNSIGNED,
\par  MODIFY COLUMN `GOVER` INTEGER(25) UNSIGNED,
\par  MODIFY COLUMN `GROUP` INTEGER(25) UNSIGNED,
\par  MODIFY COLUMN `HOSPI` INTEGER(25) UNSIGNED,
\par  MODIFY COLUMN `{\*\xmlopen\xmlns2{\factoidname place}}INDUS{\*\xmlclose}` INTEGER(25) UNSIGNED,
\par  MODIFY COLUMN `MININ` INTEGER(25) UNSIGNED,
\par  MODIFY COLUMN `MOBIL` INTEGER(25) UNSIGNED,
\par  MODIFY COLUMN `MULTI` INTEGER(25) UNSIGNED,
\par  MODIFY COLUMN `NOCODE` INTEGER(25) UNSIGNED,
\par  MODIFY COLUMN `OFFIC` INTEGER(25) UNSIGNED,
\par  MODIFY COLUMN `OUTBU` INTEGER(25) UNSIGNED,
\par  MODIFY COLUMN `PARK` INTEGER(25) UNSIGNED,
\par  MODIFY COLUMN `PARKI` INTEGER(25) UNSIGNED,
\par  MODIFY COLUMN `RECRE` INTEGER(25) UNSIGNED,
\par  MODIFY COLUMN `RIGHT` INTEGER(25) UNSIGNED,
\par  MODIFY COLUMN `SCHOO` INTEGER(25) UNSIGNED,
\par  MODIFY COLUMN `SINGL` INTEGER(25) UNSIGNED,
\par  MODIFY COLUMN `TRANS` INTEGER(25) UNSIGNED,
\par  MODIFY COLUMN `VACAN` INTEGER(25) UNSIGNED,
\par  MODIFY COLUMN `WAREH` INTEGER(25) UNSIGNED,
\par  MODIFY COLUMN `WATER` INTEGER(25) UNSIGNED;
\par 
\par ALTER TABLE `table_temp`.`itemized_chart` ADD INDEX `gencat`(`general_category`);
\par 
\par CREATE TABLE subdivision_assessment_4
\par SELECT a.parent_parcel, a.child_parcel, a.numparents, a.GIS_area_sf, a.GIS_area_acres, a.Land_Use, a.Zoning, a.LandUseDescription, a.GenericLandUse1, a.GenericLandUse2, a.res_nonres, b.AGRIC, b.CIVIC, b.COMME, b.FISHE, b.FORES, b.GOVER, b.GROUP AS GRP, b.
HOSPI, b.INDUS, b.MININ, b.MOBIL, b.MULTI, b.NOCODE, b.OFFIC, b.OUTBU, b.PARK, b.PARKI, b.RECRE, b.RIGHT AS RGHT, b.SCHOO, b.SINGL, b.TRANS, b.VACAN, b.WAREH, b.WATER, (b.AGRIC * a.GIS_area_sf) AS AGRICarea, (b.CIVIC * a.GIS_area_sf) AS CIVICarea, (b.COMM
E
 * a.GIS_area_sf) AS COMMEarea, (b.FISHE * a.GIS_area_sf) AS FISHEarea, (b.FORES * a.GIS_area_sf) AS FORESarea, (b.GOVER * a.GIS_area_sf) AS GOVERarea, (b.GROUP * a.GIS_area_sf) AS GROUParea, (b.HOSPI * a.GIS_area_sf) AS HOSPIarea, (b.INDUS * a.GIS_area_s
f
) AS INDUSarea, (b.MININ * a.GIS_area_sf) AS MININarea, (b.MOBIL * a.GIS_area_sf) AS MOBILarea, (b.MULTI * a.GIS_area_sf) AS MULTIarea, (b.NOCODE * a.GIS_area_sf) AS NOCODEarea, (b.OFFIC * a.GIS_area_sf) AS OFFICarea, (b.OUTBU * a.GIS_area_sf) AS OUTBUare
a
, (b.PARK * a.GIS_area_sf) AS PARKarea, (b.PARKI * a.GIS_area_sf) AS PARKIarea, (b.RECRE * a.GIS_area_sf) AS RECREarea, (b.RIGHT * a.GIS_area_sf) AS RIGHTarea, (b.SCHOO * a.GIS_area_sf) AS SCHOOarea, (b.SINGL * a.GIS_area_sf) AS SINGLarea, (b.TRANS * a.GI
S_area_sf) AS TRANSarea, (b.VACAN * a.GIS_area_sf) AS VACANarea, (b.WAREH * a.GIS_area_sf) AS WAREHarea, (b.WATER * a.GIS_area_sf) AS WATERarea
\par FROM subdivision_assessment_3 a
\par LEFT JOIN table_temp.itemized_chart b ON b.general_category = a.GenericLandUse1;
\par 
\par CREATE TABLE subdivision_assessment_5
\par SELECT parent_parcel, numparents AS totalchildren, sum(AGRIC),sum(CIVIC),sum(COMME),sum(FISHE),sum(FORES),sum(GOVER),sum(GRP),sum(HOSPI),sum(INDUS),sum(MININ),sum(MOBIL),sum(MULTI),sum(NOCODE),sum(OFFIC),sum(OUTBU),su
m(PARK),sum(PARKI),sum(RECRE),sum(RGHT),sum(SCHOO),sum(SINGL),sum(TRANS),sum(VACAN),sum(WAREH),sum(AGRICarea),sum(CIVICarea),sum(COMMEarea),sum(FISHEarea),sum(FORESarea),sum(GOVERarea),sum(GROUParea),sum(HOSPIarea),sum(INDUSarea),sum(MININarea),sum(MOBILa
rea),sum(MULTIarea),sum(NOCODEarea),sum(OFFICarea),sum(OUTBUarea),sum(PARKarea),sum(PARKIarea),sum(RECREarea),sum(RIGHTarea),sum(SCHOOarea),sum(SINGLarea),sum(TRANSarea),sum(VACANarea),sum(WAREHarea)
\par FROM subdivision_assessment_4
\par GROUP BY parent_parcel;
\par 
\par CREATE TABLE subdivision_assessment_6
\par SELECT *, IFNULL((`sum(MOBILarea)`/`sum(MOBIL)`),0) AS avgMOBIL, IFNULL((`sum(MULTIarea)`/`sum(MULTI)`),0) AS avgMULTI, IFNULL((`sum(SINGLarea)`/`sum(SINGL)`),0) AS avgSINGL
\par FROM subdivision_assessment_5;
\par 
\par CREATE TABLE subdivision_assessment_7
\par SELECT a.*, b.GIS_area_sf AS original_area_sf, b.generic_land_use_1 AS original_land_use, 1 AS EventFlag
\par FROM subdivision_assessment_6 a
\par LEFT JOIN all_parceldata_spatial_2001_final b ON a.parent_parcel = b.ID_PARCEL
\par WHERE a.`sum(SINGL)` > 0 AND b.GIS_area_sf  > 43560 AND a.avgSINGL < 500000 AND a.`sum(SINGL)` > 2 AND a.`sum(MOBIL)` = 0 AND a.`sum(MULTI)` = 0;
\par 
\par 
\par 
\par -- -------------------
\par -- Assessing parcels with new buildings; possible distribution of new lot sizes
\par -- -------------------
\par 
\par CREATE TABLE 2005_new_residential_presort_1
\par SELECT a.* FROM all_buildings_condensed_2005_final a
\par WHERE NumberofBuildingsParcel = 1 AND GeneralCategory = 'Single Family Residential' AND YearBuilt > 2001;
\par CREATE INDEX id_parcel USING {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}BTREE{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}ON{\*\xmlclose}{\*\xmlclose} 2005_new_residential_presort_1 (ID_PARCEL);
\par 
\par CREATE TABLE 2005_new_residential_parcels
\par SELECT a.*, b.GIS_area_sf, b.GIS_area_acres, b.Zoning, b.CityName, b.is_in_ugb, b.taz_id
\par FROM 2005_new_residential_presort_1 a
\par LEFT JOIN all_parceldata_spatial_2005_final b ON a.ID_PARCEL = b.ID_PARCEL
\par WHERE b.ID_PARCEL IS NOT NULL;
\par 
\par CREATE TABLE 2005_new_residential_parcels_final
\par SELECT a.*, b.drive_alone AS access_drive_alone, b.walk AS access_walk
\par FROM 2005_new_residential_parcels a
\par LEFT JOIN table_temp.travel_time_access b ON a.taz_id = b.taz_id;
\par 
\par CREATE INDEX id_parcel USING {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}BTREE{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}ON{\*\xmlclose}{\*\xmlclose} 2005_new_residential_parcels_final (ID_PARCEL);
\par 
\par CREATE TABLE 2001_new_residential_parcels
\par SELECT a.* FROM all_parceldata_spatial_2001_final a
\par WHERE Residential_Units = 1 AND generic_land_use_1 = 'Single Family Residential' AND Year_Built > 1995;
\par 
\par CREATE TABLE 2001_new_residential_parcels_final
\par SELECT a.*, b.drive_alone AS access_drive_alone, b.walk AS access_walk
\par FROM 2001_new_residential_parcels a
\par LEFT JOIN table_temp.travel_time_access b ON a.taz_id = b.taz_id;
\par 
\par CREATE INDEX id_parcel USING {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}BTREE{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}ON{\*\xmlclose}{\*\xmlclose} 2001_new_residential_parcels_final (ID_PARCEL);
\par 
\par DROP TABLE 2005_new_residential_presort_1;
\par DROP TABLE 2005_new_residential_parcels;
\par DROP TABLE 2001_new_residential_parcels;
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par -- --------------------
\par -- Tracking changes in plats?
\par -- --------------------
\par 
\par CREATE TABLE plats_2001
\par SELECT PlatName, COUNT(*) AS numprop FROM king_20011103.extr_parcel e WHERE PlatName IS NOT NULL GROUP BY PlatName;
\par 
\par CREATE INDEX platname USING {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}BTREE{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}ON{\*\xmlclose}{\*\xmlclose} plats_2001 (PlatName);
\par 
\par CREATE TABLE plats_2005
\par SELECT PlatName, COUNT(*) AS numprop FROM king_20051216.extr_parcel e WHERE PlatName IS NOT NULL GROUP BY PlatName;
\par 
\par CREATE INDEX platname USING {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}BTREE{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}ON{\*\xmlclose}{\*\xmlclose} plats_2005 (PlatName);
\par 
\par CREATE TABLE new_plats_2005
\par SELECT a.PlatName, a.numprop FROM plats_2005 a
\par LEFT JOIN plats_2001 b ON a.PlatName = b.PlatName WHERE b.PlatName IS NULL;
\par 
\par SELECT * FROM new_plats_2005 n WHERE numprop > 1;
\par 
\par CREATE INDEX platname USING {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}BTREE{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname State}}ON{\*\xmlclose}{\*\xmlclose} new_plats_2005 (PlatName);
\par 
\par CREATE TABLE new_plats_with_parcels_2005
\par SELECT CONCAT(a.Major, a.Minor) AS PARCEL_ID, a.PlatName, a.PlatLot, a.SqFtLot, a.CurrentZoning, a.DistrictName, a.PresentUse, CONCAT('033', a.Major, a.Minor) AS ID_PARCEL
\par FROM king_20051216.extr_parcel a
\par LEFT JOIN new_plats_2005 b ON a.PlatName = b.PlatName
\par WHERE b.PlatName IS NOT NULL AND b.numprop > 1;
\par 
\par ALTER TABLE new_plats_with_parcels_2005 
\par MODIFY COLUMN ID_PARCEL VARCHAR(28) CHARACTER SET latin1 COLLATE latin1_swedish_ci;
\par 
\par CREATE INDEX id_parcel USING {\*\xmlopen\xmlns2{\factoidname City}}{\*\xmlopen\xmlns2{\factoidname place}}BTREE{\*\xmlclose} {\*\xmlopen\xmlns2{\factoidname place}}ON{\*\xmlclose}{\*\xmlclose} new_plats_with_parcels_2005 (ID_PARCEL);
\par 
\par CREATE TABLE new_plats_with_parcels_joined_2005
\par SELECT b.ID_PARCEL, a.* FROM new_plats_with_parcels_2005 a
\par LEFT JOIN all_parceldata_spatial_2005_final b ON a.ID_PARCEL = b.ID_PARCEL;
\par 
\par -- -------------------
\par -- Summary stats for TAZs
\par -- -------------------
\par 
\par CREATE TABLE temp_2001_taz_aggregation_1
\par SELECT taz_id, 
\par SUM(Land_Value)/SUM(GIS_area_sf) AS average_land_price, 
\par SUM(IF(generic_land_use_2 = 'R',GIS_area_sf,0))/SUM(GIS_area_sf) AS residential_area_proportion,
\par SUM(IF(generic_land_use_2 = 'C',GIS_area_sf,0))/SUM(GIS_area_sf) AS commercial_area_proportion,
\par SUM(IF(generic_land_use_2 = 'I',GIS_area_sf,0))/SUM(GIS_area_sf) AS industrial_area_proportion,
\par SUM(IF(generic_land_use_2 = 'G',GIS_area_sf,0))/SUM(GIS_area_sf) AS government_area_proportion,
\par SUM(IF(generic_land_use_2 = 'NR',GIS_area_sf,0))/SUM(GIS_area_sf) AS nonresidential_area_proportion,
\par SUM(IF(generic_land_use_1 = 'Vacant',GIS_area_sf,0))/SUM(GIS_area_sf) AS vacant_area_proportion,
\par SUM(IF(generic_land_use_1 = 'Agriculture',GIS_area_sf,0))/SUM(GIS_area_sf) AS agriculture_area_proportion, 
\par SUM(IF(generic_land_use_1 = 'Park and Open Space',GIS_area_sf,0))/SUM(GIS_area_sf) AS open_space_area_proportion,
\par SUM(IF(Tax_Exempt = 1,GIS_area_sf,0))/SUM(GIS_area_sf) AS tax_exempt_proportion,
\par SUM(IF(Undevelopable = 1,GIS_area_sf,0))/SUM(GIS_area_sf) AS undevelopable_proportion,
\par IFNULL(AVG(IF(Year_Built < 1800, NULL, Year_Built)),0) AS average_year_built,
\par SUM(Built_SF)/SUM(GIS_area_sf) AS total_intensity,
\par IF(SUM(IF(generic_land_use_2 = 'R',GIS_area_sf,0)) > 0, SUM(IF(generic_land_use_2 = 'R',Built_SF,0))/SUM(IF(generic_land_use_2 = 'R',GIS_area_sf,0)), 0)  AS residential_intensity,
\par IF(SUM(IF(generic_land_use_2 = 'C',GIS_area_sf,0)) > 0, SUM(IF(generic_land_use_2 = 'C',Built_SF,0))/SUM(IF(generic_land_use_2 = 'C',GIS_area_sf,0)), 0)  AS commercial_intensity,
\par IF(SUM(IF(generic_land_use_2 = 'I',GIS_area_sf,0)) > 0, SUM(IF(generic_land_use_2 = 'I',Built_SF,0))/SUM(IF(generic_land_use_2 = 'I',GIS_area_sf,0)), 0)  AS industrial_intensity,
\par IF(SUM(IF(generic_land_use_2 = 'G',GIS_area_sf,0)) > 0, SUM(IF(generic_land_use_2 = 'G',Built_SF,0))/SUM(IF(generic_land_use_2 = 'G',GIS_area_sf,0)), 0)  AS government_intensity,
\par SUM(Residential_Units)/SUM(GIS_area_acres) AS residential_density_per_acre
\par FROM all_parceldata_spatial_2001_final
\par GROUP BY taz_id;
\par 
\par CREATE TABLE temp_2001_taz_aggregation_2
\par SELECT a.*, b.drive_alone
\par FROM temp_2001_taz_aggregation_1 a
\par LEFT JOIN table_temp.travel_time_access b ON a.taz_id = b.taz_id;
\par 
\par CREATE TABLE dc_development_numbers
\par SELECT taz_id,
\par SUM(IF(GROUP2 = 1,1,0)) AS GROUP21,
\par SUM(IF(GROUP2 = 2,1,0)) AS GROUP22,
\par SUM(IF(GROUP5 = 1,1,0)) AS GROUP51,
\par SUM(IF(GROUP5 = 2,1,0)) AS GROUP52,
\par SUM(IF(GROUP5 = 3,1,0)) AS GROUP53,
\par SUM(IF(GROUP5 = 4,1,0)) AS GROUP54,
\par SUM(IF(GROUP5 = 5,1,0)) AS GROUP55
\par FROM table_temp.new_housing GROUP BY taz_id;
\par 
\par 
\par 
\par 
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0\pararsid5861540 {\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid5861540\charrsid10231556 CREATE TABLE kitsapplats
\par SELECT x.* FROM
\par (SELECT CONCAT('035',TRUNCATE(RP_ACCT_ID,0)) AS RP_ACCT_ID, CONCAT('035',LEFT(ACCT_NO,LOCATE('-',ACCT_NO)-1)) as PLAT_ID FROM kitsap_20051230.main m WHERE LEFT(ACCT_NO,1) <> '9'
\par {\*\xmlopen\xmlns2{\factoidname place}}UNION{\*\xmlclose}
\par SELECT CONCAT('035', TRUNCATE(RP_ACCT_ID,0)) AS RP_ACCT_ID, CONCAT('035',LEFT(ACCT_NO,LOCATE('-',ACCT_NO)-1)) as PLAT_ID FROM kitsap_20060323.main m WHERE LEFT(ACCT_NO,1) <> '9') x
\par GROUP BY RP_ACCT_ID, PLAT_ID;
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid11668356\charrsid10231556 
\par 
\par }{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid14318564\charrsid10231556 CREATE }{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid10687753\charrsid10231556 TEMPORARY }{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid14318564\charrsid10231556 
TABLE revised_parcels}{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid11668356\charrsid10231556 
\par }{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid14318564\charrsid10231556 SELECT a.*, IF(County <> '035', LEFT(ID_PARCEL,9), '') AS PLAT_ID}{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid10687753\charrsid10231556 _1}{\rtlch\fcs1 \af2\afs12 
\ltrch\fcs0 \f2\fs12\insrsid14318564\charrsid10231556  FROM workspace.all_parcels_gis a;}{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid11668356\charrsid10231556 
\par }{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid5929861\charrsid10231556 
\par CREATE }{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid10687753\charrsid10231556 TEMPORARY }{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid5929861\charrsid10231556 TABLE revised_parcels_2
\par SELECT a.*, }{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid10687753\charrsid10231556 IF(a.PLAT_ID_1 = '', b.PLAT_ID, a.PLAT_ID_1) AS PLAT_ID}{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid5929861\charrsid10231556 
\par }{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid10687753\charrsid10231556 FROM revised_parcels a
\par LEFT JOIN kitsapplats b ON a.ID_PARCEL = b.RP_ACCT_ID;
\par }{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid5929861\charrsid10231556 
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0\pararsid5861540 {\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid5861540\charrsid10231556 CREATE TABLE all_parcels_gis_with_plats
\par SELECT County, PARCEL_ID, SUBSTRING(a.PLAT_ID,4,20) AS PLAT_ID, NumberofAccounts, LandValueParcel, ImprValueParcel, TaxExemptParcel, Jurisdiction, Size_Acres, Size_SF, Land_Use, Zoning, LandUseDescription, GenericLandUse1, GenericLandUse2, res_nonres, ID_
PARCEL, a.PLAT_ID AS ID_PLAT, GIS_area_sf, GIS_area_acres, X_SP_HARN, Y_SP_HARN, X_SP, Y_SP, X_UTM, Y_UTM, grid_code, taz_id, block_id, CityName, is_in_ugb FROM revised_parcels_2 a;
\par 
\par ALTER TABLE all_parcels_gis_with_plats ADD ID INT UNSIGNED NOT NULL AUTO_INCREMENT FIRST, ADD PRIMARY KEY (ID);}{\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid10687753\charrsid10231556 
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0\pararsid10687753 {\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid10687753\charrsid10231556 
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af2\afs12 \ltrch\fcs0 \f2\fs12\insrsid14318564\charrsid10231556 
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0\pararsid1008276 {\rtlch\fcs1 \af37\afs16 \ltrch\fcs0 \f37\fs16\insrsid9189900\charrsid10231556 
\par }}